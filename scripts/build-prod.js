const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const srcDir = path.join(__dirname, '../src')
const distDir = path.join(__dirname, '../dist')

// –°–æ–∑–¥–∞–µ–º dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(distDir)) {
  fs.mkdirSync(distDir)
}

// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ src –≤ dist, –∑–∞–º–µ–Ω—è—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .ts –Ω–∞ .js
function copyDir(src, dest) {
  const entries = fs.readdirSync(src, { withFileTypes: true })

  for (const entry of entries) {
    const srcPath = path.join(src, entry.name)
    const destPath = path.join(dest, entry.name.replace('.ts', '.js'))

    if (entry.isDirectory()) {
      if (!fs.existsSync(destPath)) {
        fs.mkdirSync(destPath)
      }
      copyDir(srcPath, destPath)
    } else if (entry.name.endsWith('.ts')) {
      const content = fs.readFileSync(srcPath, 'utf8')
      fs.writeFileSync(destPath, content)
    }
  }
}

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º production —Å–±–æ—Ä–∫—É...')

try {
  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
  copyDir(srcDir, distDir)
  console.log('‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')

  // –¢—Ä–∞–Ω—Å–ø–∏–ª–∏—Ä—É–µ–º TypeScript –≤ JavaScript –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
  execSync(
    'tsc --allowJs --outDir dist --noEmit false --emitDeclarationOnly false --noEmitOnError false --skipLibCheck true',
    {
      stdio: 'inherit',
    }
  )

  console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error)
  process.exit(1)
}
