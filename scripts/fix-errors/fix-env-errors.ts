#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { promisify } from 'util'
import { execSync } from 'child_process'

const readFile = promisify(fs.readFile)
const writeFile = promisify(fs.writeFile)
const readdir = promisify(fs.readdir)
const stat = promisify(fs.stat)

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
const errorPatterns = [
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏
  {
    pattern:
      /if\s*\(\s*!\s*process\.env\.(\w+)\s*\)\s*\{\s*throw\s+new\s+Error\(['"](.*?)['"]\)/gs,
    replacement: (match, envVar, errorMessage) =>
      `if (!process.env.${envVar}) { console.warn('[ENV WARNING] ${errorMessage}'); process.env.${envVar} = 'dummy-${envVar.toLowerCase()}'`,
  },
  // –ü—Ä—è–º–æ–π –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  {
    pattern:
      /throw\s+new\s+Error\(['"](.*?–Ω–µ\s+—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.*?|.*?not\s+set.*?)['"]\)/g,
    replacement: (match, errorMessage) =>
      `console.warn('[ENV WARNING] ${errorMessage}')`,
  },
  // –í—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è API URL
  {
    pattern:
      /(const\s+API_URL\s*=\s*process\.env\.(\w+))\s*if\s*\(\s*!\s*API_URL\s*\)\s*\{\s*throw\s+new\s+Error/gs,
    replacement: (match, declaration, envVar) =>
      `${declaration} || 'https://example.com'\n  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏`,
  },
]

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function findFiles(dir: string, pattern: RegExp): Promise<string[]> {
  const entries = await readdir(dir)
  const result: string[] = []

  for (const entry of entries) {
    const fullPath = path.join(dir, entry)
    const entryStat = await stat(fullPath)

    if (entryStat.isDirectory()) {
      const subResults = await findFiles(fullPath, pattern)
      result.push(...subResults)
    } else if (pattern.test(entry)) {
      result.push(fullPath)
    }
  }

  return result
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
async function processFile(file: string): Promise<boolean> {
  try {
    const content = await readFile(file, 'utf8')
    let newContent = content
    let modified = false

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–º–µ–Ω—ã
    for (const { pattern, replacement } of errorPatterns) {
      if (pattern.test(newContent)) {
        newContent = newContent.replace(pattern, replacement as any)
        modified = true
      }
    }

    // –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (modified) {
      await writeFile(file, newContent, 'utf8')
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file}`)
    }

    return modified
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error)
    return false
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function fixEnvErrors() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ TS —Ñ–∞–π–ª–æ–≤...')
    const srcFiles = await findFiles('src', /\.tsx?$/)
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${srcFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`)

    // –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏
    console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏...')
    const errorFilesOutput = execSync(
      'find src -name "*.ts" -exec grep -l "throw new Error" {} \\;',
      { encoding: 'utf8' }
    )
    const errorFiles = errorFilesOutput.trim().split('\n')

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${errorFiles.length} —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏`)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
    let fixedCount = 0
    for (const file of errorFiles) {
      const wasFixed = await processFile(file)
      if (wasFixed) fixedCount++
    }

    console.log(`\nüìä –ò—Ç–æ–≥–∏:`)
    console.log(`- –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${srcFiles.length}`)
    console.log(`- –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errorFiles.length}`)
    console.log(`- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`)
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixEnvErrors()
