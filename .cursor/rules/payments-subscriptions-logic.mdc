---
description: 
globs: 
alwaysApply: true
---
# Logic: Payments and Subscriptions üí≥‚ú®

## üïâÔ∏è Single Source of Truth: `payments_v2`

The Supabase table `payments_v2` is the **sole source of truth** for all financial transactions and subscription statuses. Do not rely on the `users` table for subscription details.

Key files for interaction:
- Core getter: `[src/core/supabase/getUserDetails.ts](mdc:src/core/supabase/getUserDetails.ts)`
- Balance calculation: `[src/core/supabase/getUserBalance.ts](mdc:src/core/supabase/getUserBalance.ts)`
- Core interfaces:
    - `[src/interfaces/payments.interface.ts](mdc:src/interfaces/payments.interface.ts)`
    - `[src/interfaces/subscription.interface.ts](mdc:src/interfaces/subscription.interface.ts)`
- Robokassa handler (in separate service): `[src/api-server/routes/robokassa.ts](mdc:src/api-server/routes/robokassa.ts)` (Needs interfaces and stubs)

## üè∫ Duality of Purpose: `subscription_type` vs `service_type`

These two fields in `payments_v2` serve distinct purposes:

1.  **`subscription_type`**:
    *   **Purpose**: Records the **type of subscription** being purchased or granted (`neurophoto`, `neurobase`, `NEUROTESTER`).
    *   **When Filled**:
        *   On **income** (`type = 'money_income'` via Robokassa/Telegram Pay for a subscription).
        *   On **system grants** (`type = 'system_income'`, e.g., via the `create_system_payment` function).
    *   **When NULL**: For expense operations (`stars_expense`, `money_expense`) or income not related to a subscription purchase.

2.  **`service_type`**:
    *   **Purpose**: Records the **specific service** for which stars/money were **spent** (`image_generation`, `text_to_speech`, etc., corresponds to `ModeEnum`).
    *   **When Filled**: On **expense** (`type = 'stars_expense'`, `type = 'money_expense'`).
    *   **When NULL**: For income operations (`money_income`, `system_income`), especially subscription purchases, where no specific *service* is being consumed at that moment.

**Conclusion:** `service_type = NULL` for `money_income` related to subscription purchase is **CORRECT** and expected behavior. Check `subscription_type` in the same row to see what was purchased.

## ‚ú® `getUserDetails.ts`: The Oracle of User Status

This function ([src/core/supabase/getUserDetails.ts](mdc:src/core/supabase/getUserDetails.ts)) provides the current status:
- Fetches the last **completed** payment (`status = 'COMPLETED'`, `payment_method = 'Robokassa' | 'Telegram'`) from `payments_v2`.
- Checks `subscription_type` from that payment.
- **Special Logic `NEUROTESTER`**: If `subscription_type` is `NEUROTESTER`, `isSubscriptionActive` is set to `true` **regardless of date**.
- **Other Subscriptions**: Checks if the `payment_date` + 30 days is in the future.
- Returns `isSubscriptionActive`, `subscriptionType` (Enum), `subscriptionStartDate`.
- Also returns `stars` (from `getUserBalance`) and `isExist` (from `users` table check).
- **Does NOT return user level.**

## ‚öñÔ∏è `getUserBalance.ts`: The Keeper of Stars

This function ([src/core/supabase/getUserBalance.ts](mdc:src/core/supabase/getUserBalance.ts)) calculates the current star balance by aggregating `stars` values from relevant `payments_v2` entries for the user.

## üõ†Ô∏è PostgreSQL Function: `create_system_payment`

- **Purpose**: Manually grant subscriptions or add funds via a system operation.
- **Location**: Needs to be created/edited manually in the **Supabase SQL Editor**.
- **CRITICAL**: Ensure this function correctly inserts into `payments_v2`, setting `subscription_type` when granting a subscription (and leaving `service_type` as `NULL`).

## üìÑ Schema Details (from `docs/payments_v2_schema.md`)

(Content from docs/payments_v2_schema.md will be added here)

```
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –¢–∞–±–ª–∏—Ü–∞ `payments_v2`

–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã `payments_v2`, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.

**–í–∞–∂–Ω–æ:** –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω–∏–ª–∞ —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Ç–∞–±–ª–∏—Ü—É `payments`. –í–µ—Å—å –Ω–æ–≤—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `payments_v2`.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã (–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)

| –ü–æ–ª–µ                | –¢–∏–ø                         | –û–ø–∏—Å–∞–Ω–∏–µ                                                             | –ü—Ä–∏–º–µ—Ä                  | –ü—Ä–∏–º–µ—á–∞–Ω–∏—è                                      |
| :------------------ | :-------------------------- | :------------------------------------------------------------------- | :---------------------- | :---------------------------------------------- |
| `id`                | `uuid`                      | –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ (Primary Key)                        |                         | –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                      |
| `inv_id`            | `bigint`                    | –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–æ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Robokassa). –£–Ω–∏–∫–∞–ª—å–Ω—ã–π.          | `777002`                | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏     |
| `telegram_id`       | `text`                      | ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.                                          | `'144022504'`           | –°–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π `users` (–ø–æ `telegram_id`)     |
| `bot_name`          | `text`                      | –ò–º—è –±–æ—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—à–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è.                            | `'ai_koshey_bot'`       |                                                 |
| `amount`            | `numeric`                   | –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB).                    | `10.00`                 |                                                 |
| `stars`             | `integer`                   | –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—É–º–º—ã –≤ –∑–≤–µ–∑–¥–∞—Ö (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).                         | `6`                     | –ú–æ–∂–µ—Ç –±—ã—Ç—å `NULL`                               |
| `currency`          | `text`                      | –ö–æ–¥ –≤–∞–ª—é—Ç—ã (ISO 4217).                                               | `'RUB'`                 |                                                 |
| `status`            | `payment_status` (enum)     | –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.                                              | `'PENDING'`             | –°–º. Enum `PaymentStatus` –Ω–∏–∂–µ.                  |
| `type`              | `payment_type` (enum)       | –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.                                                        | `'money_income'`        | –°–º. Enum `PaymentType` –Ω–∏–∂–µ.                    |
| `payment_method`    | `text`                      | –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.                                                        | `'Robokassa'`           | `'Telegram'`, `'Manual'`, `'System'` –∏ –¥—Ä.      |
| `description`       | `text`                      | –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.                                                   | `'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'`  |                                                 |
| `metadata`          | `jsonb`                     | –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.                                | `{"shp_item": "stars"}` |                                                 |
| `created_at`        | `timestamp with time zone`  | –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.                                               |                         | –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                   |
| `updated_at`        | `timestamp with time zone`  | –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.                                  |                         | –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                       |
| `subscription_type` | `subscription_type` (enum)  | **–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–≤—è–∑–∞–Ω —Å –Ω–µ–π.**                          | `'neurobase'`           | **–ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.** –ú–æ–∂–µ—Ç –±—ã—Ç—å `NULL`. |
| `user_id`           | `uuid`                      | –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Ç–∞–±–ª–∏—Ü—É `users` (–ø–æ–ª–µ `id`).                         |                         | –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö                 |
| `level`             | `integer`                   | –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏) | `1`                     | **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏**          |
| `service_type`      | `mode_enum` (enum)          | **–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞/—Ä–µ–∂–∏–º–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –°–ü–ò–°–ê–ù–´ –∑–≤–µ–∑–¥—ã/–¥–µ–Ω—å–≥–∏.**          | `'neuro_photo_v2'`      | **–ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.** –û–±—ã—á–Ω–æ `NULL` –¥–ª—è `money_income`. |
| `operation_id`      | `text`                      | –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω).                   |                         |                                                 |
| `payment_id`        | `bigint`                    | –£—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ / ID –ø–ª–∞—Ç–µ–∂–∞ –≤ Telegram Payments.                      |                         |                                                 |

## Enum: `PaymentStatus`

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–ª–µ `status`.

```typescript
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≤: [src/interfaces/payments.interface.ts](mdc:src/interfaces/payments.interface.ts)
export enum PaymentStatus {
  PENDING = 'PENDING', // –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ–ø–ª–∞—Ç—ã
  COMPLETED = 'COMPLETED', // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
  FAILED = 'FAILED', // –ù–µ —É–¥–∞–ª—Å—è
  CANCELLED = 'CANCELLED', // –û—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π
}
```

## Enum: `PaymentType`

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–ª–µ `type`.

```typescript
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≤: [src/interfaces/payments.interface.ts](mdc:src/interfaces/payments.interface.ts)
export enum PaymentType {
  MONEY_INCOME = 'money_income', // –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ (Robokassa, Telegram Pay)
  MONEY_EXPENSE = 'money_expense', // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ (—Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  STARS_EXPENSE = 'stars_expense', // –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ —É—Å–ª—É–≥—É
  SYSTEM_INCOME = 'system_income', // –°–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (–ø–æ–¥–ø–∏—Å–∫–∏, –∑–≤–µ–∑–¥—ã)
  // –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ/—É—Ç–æ—á–Ω—è–µ–º—ã–µ —Ç–∏–ø—ã:
  // SUBSCRIPTION_PURCHASE = 'subscription_purchase',
  // SUBSCRIPTION_RENEWAL = 'subscription_renewal',
  // REFUND = 'refund',
  // BONUS = 'bonus',
  // REFERRAL = 'referral',
  // SYSTEM = 'system',
}
```

**–í–∞–∂–Ω–æ:**
- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞/–ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Robokassa/Telegram Pay: `type = 'money_income'`, `payment_method = 'Robokassa' | 'Telegram'`, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è `subscription_type`.
- –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –∑–∞ —É—Å–ª—É–≥—É: `type = 'stars_expense'`, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è `service_type`.
- –°–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: `type = 'system_income'`, `payment_method = 'System'`, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è `subscription_type`.

## –ö–ª—é—á–∏ Supabase

- **`SUPABASE_URL`**: URL –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase.
- **`SUPABASE_KEY`**: **–ê–Ω–æ–Ω–∏–º–Ω—ã–π (–ø—É–±–ª–∏—á–Ω—ã–π)** –∫–ª—é—á Supabase.
- **`SUPABASE_SERVICE_KEY` / `SUPABASE_SERVICE_ROLE_KEY`**: –ö–ª—é—á–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (`supabaseAdmin`).

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º `.env` —Ñ–∞–π–ª–µ.
