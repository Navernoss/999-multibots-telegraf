import { Request, Response } from 'express'
import {
  getPendingPayment,
  getPaymentByInvId,
  updatePaymentStatus,
  updateUserBalance,
} from '@/core/supabase'
import { PASSWORD2 } from '@/config'
import { validateRobokassaSignature } from '@/core/robokassa'
import { sendPaymentSuccessMessage } from '@/helpers/notifications'

import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { PaymentStatus } from '@/interfaces'
import { ParsedQs } from 'qs'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ Robokassa
interface RobokassaQuery extends ParsedQs {
  OutSum?: string
  InvId?: string
  SignatureValue?: string
  shp_user_id?: string
  shp_payment_uuid?: string
  [key: string]: string | string[] | ParsedQs | ParsedQs[] | undefined
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Robokassa
 * –ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.
 * @param bot - –ò–Ω—Å—Ç–∞–Ω—Å Telegraf –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export const handleRobokassaWebhook =
  (bot: Telegraf<MyContext>) =>
  // –Ø–≤–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä—É–µ–º req –∏ res
  async (req: Request<{}, {}, {}, RobokassaQuery>, res: Response) => {
    // –¢–∏–ø query —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω –∏–∑ –¥–∂–µ–Ω–µ—Ä–∏–∫–∞ Request
    const { OutSum, InvId, SignatureValue, ...otherParams } = req.query

    logger.info('ü§ñ Robokassa Webhook Received', {
      InvId,
      OutSum,
      hasSignature: !!SignatureValue,
      otherParams:
        Object.keys(otherParams).length > 0 ? otherParams : undefined,
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!OutSum || !InvId || !SignatureValue) {
      logger.warn('‚ö†Ô∏è Robokassa Webhook: Missing required parameters', {
        query: req.query,
      })
      // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
      return res.status(400).send('Bad Request: Missing parameters')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É shp_ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { shp_user_id, shp_payment_uuid } = otherParams // –¢–∏–ø—ã —É–∂–µ –µ—Å—Ç—å –∏–∑ RobokassaQuery
    if (!shp_user_id || !shp_payment_uuid) {
      logger.warn('‚ö†Ô∏è Robokassa Webhook: Missing required shp_ parameters', {
        query: req.query,
        shp_user_id,
        shp_payment_uuid,
      })
      // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
      return res.status(400).send('Bad Request: Missing shp_ parameters')
    }
    // –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ shp_

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    const isValidSignature = validateRobokassaSignature(
      OutSum as string,
      InvId as string,
      PASSWORD2,
      SignatureValue as string
    )

    if (!isValidSignature) {
      logger.error('‚ùå Robokassa Webhook: Invalid signature', { InvId })
      // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
      return res.status(400).send('Bad Request: Invalid signature')
    }
    logger.info(`‚úÖ Robokassa Webhook: Signature valid for InvId ${InvId}`)

    try {
      // 2. –ü–æ–∏—Å–∫ PENDING –ø–ª–∞—Ç–µ–∂–∞
      const { data: payment, error: paymentError } = await getPendingPayment(
        InvId as string
      )

      if (paymentError) {
        logger.error(
          `‚ùå Robokassa Webhook: DB Error getting payment for InvId ${InvId}`,
          {
            error: paymentError.message,
          }
        )
        // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
        return res.status(500).send('Internal Server Error')
      }

      if (!payment) {
        const { data: successPayment } = await getPaymentByInvId(
          InvId as string
        )

        if (
          successPayment &&
          successPayment.status === PaymentStatus.COMPLETED
        ) {
          logger.warn(
            `‚ö†Ô∏è Robokassa Webhook: Payment ${InvId} already processed (COMPLETED). Ignoring.`,
            { InvId }
          )
          // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
          return res.status(200).send(`OK${InvId}`)
        } else {
          logger.warn(
            `‚ö†Ô∏è Robokassa Webhook: PENDING payment not found for InvId ${InvId}. It might be FAILED or non-existent.`,
            { InvId }
          )
          // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
          return res.status(200).send(`OK${InvId}`)
        }
      }

      if (Number(payment.amount) !== Number(OutSum)) {
        logger.error(
          `‚ùå Robokassa Webhook: Amount mismatch for InvId ${InvId}`,
          {
            dbAmount: payment.amount,
            webhookAmount: OutSum,
            telegram_id: payment.telegram_id,
          }
        )
        // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
        return res.status(400).send('Bad Request: Amount mismatch')
      }

      logger.info(`üÖøÔ∏è Robokassa Webhook: Found PENDING payment ${InvId}`, {
        telegram_id: payment.telegram_id,
        amount: payment.amount,
        stars: payment.stars,
      })

      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ SUCCESS
      const { error: updateError } = await updatePaymentStatus(
        InvId as string,
        PaymentStatus.COMPLETED
      )
      if (updateError) {
        logger.error(
          `‚ùå Robokassa Webhook: DB Error updating payment status for InvId ${InvId}`,
          {
            error: updateError.message,
            telegram_id: payment.telegram_id,
          }
        )
        // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
        return res.status(500).send('Internal Server Error')
      }

      logger.info(
        `‚úÖ Robokassa Webhook: Payment ${InvId} status updated to SUCCESS`
      )

      // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥)
      const balanceUpdated = await updateUserBalance(
        payment.telegram_id,
        payment.stars ?? 0,
        'money_income',
        `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø–æ Robokassa (InvId: ${InvId})`,
        {
          payment_method: 'Robokassa',
          inv_id: InvId as string,
        }
      )

      if (!balanceUpdated) {
        logger.error(
          `üÜò CRITICAL: Robokassa Webhook: Failed to update user balance for InvId ${InvId} AFTER payment success!`,
          {
            telegram_id: payment.telegram_id,
            stars_to_add: payment.stars,
            inv_id: InvId as string,
          }
        )
        // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
        return res.status(200).send(`OK${InvId}`)
      }

      logger.info(
        `üë§ Robokassa Webhook: User ${payment.telegram_id} balance updated`
      )

      // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      sendPaymentSuccessMessage(
        bot,
        payment.telegram_id,
        payment.stars ?? 0,
        'ru' // TODO: –ü–æ–ª—É—á–∞—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
      ).catch(err => {
        logger.error(
          `‚ùå Robokassa Webhook: Failed to send success notification to user ${payment.telegram_id} for InvId ${InvId}`,
          { error: err instanceof Error ? err.message : String(err) }
        )
      })

      // 6. –û—Ç–≤–µ—Ç Robokassa –æ–± —É—Å–ø–µ—Ö–µ
      logger.info(`üëç Robokassa Webhook: Successfully processed InvId ${InvId}`)
      // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
      return res.status(200).send(`OK${InvId}`)
    } catch (error: any) {
      logger.error(
        `üí• Robokassa Webhook: Uncaught error processing InvId ${InvId}`,
        {
          error: error.message,
          stack: error.stack,
        }
      )
      // –¢–∏–ø res –∏–∑–≤–µ—Å—Ç–µ–Ω
      return res.status(500).send('Internal Server Error')
    }
  }
