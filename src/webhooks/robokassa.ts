import { Request, Response } from 'express'
import * as supabase from '@/core/supabase'
import { PASSWORD2 } from '@/config'
import { validateRobokassaSignature } from '@/core/robokassa'
import { sendPaymentSuccessMessage } from '@/helpers/notifications'
import { updateUserSubscription } from '@/core/supabase/updateUserSubscription'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Robokassa
 * –ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö.
 * @param bot - –ò–Ω—Å—Ç–∞–Ω—Å Telegraf –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export const handleRobokassaWebhook =
  (bot: Telegraf<MyContext>) => async (req: Request, res: Response) => {
    const { OutSum, InvId, SignatureValue, ...otherParams } = req.query

    logger.info('ü§ñ Robokassa Webhook Received', {
      InvId,
      OutSum,
      hasSignature: !!SignatureValue,
      otherParams:
        Object.keys(otherParams).length > 0 ? otherParams : undefined,
    })

    if (!OutSum || !InvId || !SignatureValue) {
      logger.warn('‚ö†Ô∏è Robokassa Webhook: Missing required parameters', {
        query: req.query,
      })
      // Robokassa –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç "OK...", —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å –µ–≥–æ –æ—à–∏–±–∫–æ–π
      // –û—Ç–ø—Ä–∞–≤–∫–∞ "Bad Request" –≤–º–µ—Å—Ç–æ "Missing parameters" –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π
      return res.status(400).send('Bad Request: Missing parameters')
    }

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    const isValidSignature = validateRobokassaSignature(
      OutSum as string,
      InvId as string,
      PASSWORD2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
      SignatureValue as string
    )

    if (!isValidSignature) {
      logger.error('‚ùå Robokassa Webhook: Invalid signature', { InvId })
      return res.status(400).send('Bad Request: Invalid signature')
    }
    logger.info(`‚úÖ Robokassa Webhook: Signature valid for InvId ${InvId}`)

    try {
      // 2. –ü–æ–∏—Å–∫ PENDING –ø–ª–∞—Ç–µ–∂–∞
      // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –∏–º–µ–Ω–Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
      const { data: payment, error: paymentError } =
        await supabase.getPendingPayment(InvId as string)

      if (paymentError) {
        logger.error(
          `‚ùå Robokassa Webhook: DB Error getting payment for InvId ${InvId}`,
          {
            error: paymentError.message,
          }
        )
        // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –ø–æ–≤—Ç–æ—Ä–∏–ª–∞
        return res.status(500).send('Internal Server Error')
      }

      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ò–õ–ò –æ–Ω –ù–ï PENDING
      if (!payment) {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (SUCCESS)?
        const { data: successPayment, error: successPaymentError } =
          await supabase.getPaymentByInvId(InvId as string)

        if (successPayment && successPayment.status === 'SUCCESS') {
          logger.warn(
            `‚ö†Ô∏è Robokassa Webhook: Payment ${InvId} already processed (SUCCESS). Ignoring.`,
            { InvId }
          )
          // –û—Ç–≤–µ—á–∞–µ–º OK, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ
          return res.status(200).send(`OK${InvId}`)
        } else {
          logger.warn(
            `‚ö†Ô∏è Robokassa Webhook: PENDING payment not found for InvId ${InvId}. It might be FAILED or non-existent.`,
            { InvId }
          )
          // –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∞—Ç—É—Å–µ. –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
          // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–µ—Ä–Ω—É—Ç—å 404, –Ω–æ 200 OK –∑–∞—Å—Ç–∞–≤–∏—Ç —Ä–æ–±–æ–∫–∞—Å—Å—É –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
          // –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ä–∞–∑ –ü–ï–ù–î–ò–ù–ì –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–¥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å.
          return res.status(200).send(`OK${InvId}`) // –û—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É–º–º—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
      if (Number(payment.out_sum) !== Number(OutSum)) {
        logger.error(
          `‚ùå Robokassa Webhook: Amount mismatch for InvId ${InvId}`,
          {
            dbAmount: payment.out_sum,
            webhookAmount: OutSum,
            telegram_id: payment.telegram_id,
          }
        )
        // –û—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π, –Ω–æ –Ω–µ 500, —Ç.–∫. —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        return res.status(400).send('Bad Request: Amount mismatch')
      }

      logger.info(`üÖøÔ∏è Robokassa Webhook: Found PENDING payment ${InvId}`, {
        telegram_id: payment.telegram_id,
        amount: payment.out_sum,
        stars: payment.stars,
      })

      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ SUCCESS
      const { error: updateError } = await supabase.updatePaymentStatus(
        InvId as string,
        'SUCCESS'
      )
      if (updateError) {
        logger.error(
          `‚ùå Robokassa Webhook: DB Error updating payment status for InvId ${InvId}`,
          {
            error: updateError.message,
            telegram_id: payment.telegram_id,
          }
        )
        // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –ø–æ–≤—Ç–æ—Ä–∏–ª–∞
        return res.status(500).send('Internal Server Error')
      }

      logger.info(
        `‚úÖ Robokassa Webhook: Payment ${InvId} status updated to SUCCESS`
      )

      // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏/–±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: userUpdateError } = await updateUserSubscription({
        telegramId: payment.telegram_id,
        starsToAdd: payment.stars ?? 0,
        subscriptionType: 'stars', // –í—Å–µ–≥–¥–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ä—É–±–ª—è–º–∏
        paymentId: InvId as string,
      })

      if (userUpdateError) {
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —É–∂–µ SUCCESS.
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞.
        // –ü—Ä–æ–±–ª–µ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ—à–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.
        logger.error(
          `üÜò CRITICAL: Robokassa Webhook: DB Error updating user balance/subscription for InvId ${InvId} AFTER payment success!`,
          {
            error: userUpdateError.message,
            telegram_id: payment.telegram_id,
            stars_to_add: payment.stars,
          }
        )
        // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º OK, —Ç.–∫. –¥–µ–Ω—å–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.
        return res.status(200).send(`OK${InvId}`)
      }

      logger.info(
        `üë§ Robokassa Webhook: User ${payment.telegram_id} balance updated`
      )

      // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ await, —á—Ç–æ–±—ã –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç Robokassa
      sendPaymentSuccessMessage(
        bot,
        payment.telegram_id,
        payment.stars ?? 0,
        payment.language ?? 'ru'
      ).catch(err => {
        logger.error(
          `‚ùå Robokassa Webhook: Failed to send success notification to user ${payment.telegram_id} for InvId ${InvId}`,
          { error: err instanceof Error ? err.message : String(err) }
        )
        // –ù–µ –≤–ª–∏—è–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç Robokassa
      })

      // 6. –û—Ç–≤–µ—Ç Robokassa –æ–± —É—Å–ø–µ—Ö–µ
      logger.info(`üëç Robokassa Webhook: Successfully processed InvId ${InvId}`)
      return res.status(200).send(`OK${InvId}`)
    } catch (error: any) {
      // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      logger.error(
        `üí• Robokassa Webhook: Uncaught error processing InvId ${InvId}`,
        {
          error: error.message,
          stack: error.stack,
        }
      )
      // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –ø–æ–≤—Ç–æ—Ä–∏–ª–∞
      return res.status(500).send('Internal Server Error')
    }
  }
