import { Request as ExpressRequest, Response as ExpressResponse } from 'express'

import { logger } from '@/utils/logger'
import {
  supabase,
  updateUserBalance,
  updatePaymentStatus,
} from '@/core/supabase'
import { validateRobokassaSignature } from './utils/validateSignature'
import { createBotByName } from '@/core/bot'
import { sendPaymentSuccessMessage } from '@/helpers/notifications'
import { PaymentStatus } from '@/interfaces'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'

interface RobokassaRequestBody {
  InvId?: string
  OutSum?: string
  SignatureValue?: string
  [key: string]: string | undefined
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –æ—Ç Robokassa (Result URL).
 */
export const handleRobokassaResult = async (
  req: ExpressRequest<{}, {}, RobokassaRequestBody>,
  res: ExpressResponse
): Promise<void> => {
  try {
    logger.info('[Robokassa Result] Received request:', req.body)

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { InvId, OutSum, SignatureValue } = req.body

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!InvId || !OutSum || !SignatureValue) {
      logger.error('[Robokassa Result] Missing required parameters', {
        InvId,
        OutSum,
        SignatureValue,
      })
      res.status(400).send('Bad Request: Missing parameters')
      return
    }

    const invId = parseInt(InvId, 10)
    const outSum = parseFloat(OutSum)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å Robokassa (Password #2)
    const robokassaPassword2 = process.env.PASSWORD2
    if (!robokassaPassword2) {
      logger.error(
        '[Robokassa Result] Robokassa Password #2 is not configured!'
      )
      res.status(500).send('Internal Server Error: Configuration missing')
      return
    }

    // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    if (!validateRobokassaSignature(req.body, robokassaPassword2)) {
      logger.warn('[Robokassa Result] Invalid signature received', {
        InvId,
        SignatureValue,
      })
      res.status(400).send('Bad Request: Invalid signature')
      return
    }

    logger.info(
      `[Robokassa Result] Signature validated successfully for InvId: ${invId}`
    )

    // 4. –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    const { data: payment, error: paymentError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('inv_id', invId)
      .maybeSingle()

    if (paymentError) {
      logger.error(
        `[Robokassa Result] Error fetching payment for InvId: ${invId}`,
        paymentError
      )
      res.status(200).send(`OK${invId}`)
      return
    }

    if (!payment) {
      logger.warn(`[Robokassa Result] Payment not found for InvId: ${invId}`)
      res.status(200).send(`OK${invId}`)
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏ bot_name –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–ø–∏—Å–∏ payment
    const telegramId = payment.telegram_id
    const botName = payment.bot_name
    // languageCode –ø–æ–∫–∞ —É–±–µ—Ä–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ telegram_id –∏ bot_name
    if (!telegramId || !botName) {
      logger.error(
        `[Robokassa Result] Missing telegram_id or bot_name in payment record for InvId: ${invId}`,
        { telegramId, botName }
      )
      res.status(200).send(`OK${invId}`)
      return
    }

    logger.info(`[Robokassa Result] Found payment for InvId: ${invId}`, payment)

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
    if (payment.status === PaymentStatus.COMPLETED) {
      logger.warn(
        `[Robokassa Result] Payment InvId: ${invId} already processed.`
      )
      res.status(200).send(`OK${invId}`)
      return
    }

    // –°–≤–µ—Ä—è–µ–º —Å—É–º–º—É (OutSum - —ç—Ç–æ —Å—É–º–º–∞, –∑–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è –º–∞–≥–∞–∑–∏–Ω—É, —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
    // –î–æ–ø—É—Å—Ç–∏–º, –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ —Å—É–º–º–∞
    if (payment.amount !== outSum) {
      logger.warn(
        `[Robokassa Result] Amount mismatch for InvId: ${invId}. Expected: ${payment.amount}, Received: ${outSum}`
      )
      res.status(200).send(`OK${invId}`)
      return
    }

    // 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ SUCCESS
    const { error: updateError } = await updatePaymentStatus(
      InvId as string,
      PaymentStatus.COMPLETED
    )
    if (updateError) {
      logger.error(
        `‚ùå [Robokassa Result] DB Error updating payment status for InvId ${invId}`,
        {
          error: updateError.message,
          telegram_id: payment.telegram_id,
        }
      )
      res.status(500).send('Internal Server Error')
      return
    }
    logger.info(
      `‚úÖ [Robokassa Result] Payment ${invId} status updated to SUCCESS`
    )

    // 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥)
    const balanceUpdated = await updateUserBalance(
      payment.telegram_id,
      payment.stars ?? 0,
      'money_income',
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –ø–æ Robokassa (InvId: ${invId})`,
      {
        payment_method: 'Robokassa',
        inv_id: InvId as string,
      }
    )

    if (!balanceUpdated) {
      logger.error(
        `üÜò CRITICAL: [Robokassa Result] Failed to update user balance for InvId ${invId} AFTER payment success!`,
        {
          telegram_id: payment.telegram_id,
          stars_to_add: payment.stars,
          inv_id: InvId as string,
        }
      )
      res.status(200).send(`OK${invId}`)
      return
    }

    logger.info(
      `üë§ [Robokassa Result] User ${payment.telegram_id} balance updated`
    )

    // 8. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const botData = await createBotByName(botName)
      if (botData && botData.bot) {
        await sendPaymentSuccessMessage(
          botData.bot,
          telegramId,
          payment.stars ?? 0,
          'ru' // TODO: –ü–æ–ª—É—á–∞—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
        )
      } else {
        logger.error(
          `[Robokassa Result] Could not find bot instance for botName: ${botName} to send notification.`
        )
      }
    } catch (err) {
      logger.error(
        `‚ùå [Robokassa Result] Failed to send success notification to user ${telegramId} for InvId ${invId}`,
        { error: err instanceof Error ? err.message : String(err) }
      )
    }

    // 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Robokassa
    logger.info(`[Robokassa Result] Successfully processed InvId: ${invId}`)
    res.status(200).send(`OK${invId}`)
  } catch (error) {
    logger.error('[Robokassa Result] Uncaught Error:', error)
    res.status(500).send('Internal Server Error')
  }
}
