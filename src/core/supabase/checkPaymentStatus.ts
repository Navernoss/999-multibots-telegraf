import { MyWizardContext } from '@/interfaces'
import { supabase } from '.'
import { isRussian } from '@/helpers/language'

export const checkPaymentStatus = async (
  ctx: MyWizardContext,
  subscription: string
): Promise<boolean> => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx –∏ ctx.from –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
  if (!ctx || !ctx.from || !ctx.from.id) {
    console.error('–û—à–∏–±–∫–∞: ctx –∏–ª–∏ ctx.from –∏–ª–∏ ctx.from.id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã')
    return false
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: paymentData, error } = await supabase
      .from('payments')
      .select('payment_date')
      .eq('user_id', ctx.from.id.toString())
      .order('payment_date', { ascending: false })
      .limit(1)
      .single()
    console.log('paymentData', paymentData)

    if (error || !paymentData) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ:', error)
      return false
    }

    const lastPaymentDate = new Date(paymentData.payment_date)
    const currentDate = new Date()
    const differenceInDays =
      (currentDate.getTime() - lastPaymentDate.getTime()) / (1000 * 3600 * 24)
    const isRu = isRussian(ctx)
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –¥–Ω–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    if (differenceInDays > 30) {
      await ctx.reply(
        isRu
          ? 'ü§ë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞.'
          : 'ü§ëYour subscription has expired. Please update your subscription to continue using the service.'
      )

      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    const fullAccessSubscriptions = [
      'neurophoto',
      'neurobase',
      'neuromeeting',
      'neuroblogger',
      'neurotester',
    ]
    const hasFullAccess = fullAccessSubscriptions.includes(subscription)

    if (hasFullAccess) {
      return true
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:', error)
    return false
  }
}
