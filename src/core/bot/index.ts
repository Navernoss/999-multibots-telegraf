import { Telegraf } from 'telegraf'
import { MyContext } from '../../interfaces'
import { registerCommands } from '../../registerCommands'
import logger from '../../utils/logger'
import { Composer } from 'telegraf'

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
 */
export interface BotInfo {
  id: string
  token: string
  username?: string
  error?: Error
}

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
 */
export interface BotInstance {
  id: string
  username?: string
  instance: Telegraf<MyContext>
}

/**
 * –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
 */
export type BotList = BotInfo[]

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞
 * @param token –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns true, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function validateToken(token: string): boolean {
  // –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞:–±—É–∫–≤-—Ü–∏—Ñ—Ä
  // –ù–∞–ø—Ä–∏–º–µ—Ä: 123456789:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi
  const tokenRegex = /^\d+:[\w-]{35,}$/
  return tokenRegex.test(token)
}

/**
 * –ú–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥–∏
 * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–≤–∏–¥–∏–º—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞)
 */
export function maskToken(token: string): string {
  if (!token || token.length < 10) {
    return '***masked***'
  }

  // –ú–∞—Å–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö 5 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4
  return `${token.substring(0, 5)}...${token.substring(token.length - 4)}`
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–≥–æ
 * @param botInfo –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
 * @returns –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
export async function createBot(botInfo: BotInfo): Promise<BotInstance | null> {
  const { id, token, username } = botInfo
  const identifier = username ? `@${username}` : `ID ${id}`

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if (!validateToken(token)) {
      logger.error({
        message: `‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ ${identifier}`,
        description: 'Invalid token format',
        bot_id: id,
      })
      return null
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    logger.info({
      message: `ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ ${identifier}`,
      description: 'Creating bot instance',
      bot_id: id,
    })

    const bot = new Telegraf<MyContext>(token)

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    const composerInstance = new Composer<MyContext>()
    await registerCommands({ bot, composer: composerInstance })

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    bot.context.botId = id
    bot.context.botUsername = username

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    bot.catch((error, ctx) => {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: `‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ ${identifier}: ${errorMessage}`,
        description: 'Bot error',
        bot_id: id,
        update_id: ctx.update?.update_id,
        chat_id: ctx.chat?.id,
        user_id: ctx.from?.id,
        error: errorMessage,
      })
    })

    logger.info({
      message: `‚úÖ –ë–æ—Ç ${identifier} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`,
      description: 'Bot instance created',
      bot_id: id,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    return {
      id,
      username,
      instance: bot,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ ${identifier}: ${errorMessage}`,
      description: 'Failed to create bot instance',
      bot_id: id,
      error: errorMessage,
    })
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö
 */
export function getBotsInfo(): BotInfo[] {
  const botInfos: BotInfo[] = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN (–¥–ª—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞)
  const singleBotToken = process.env.BOT_TOKEN
  if (singleBotToken) {
    botInfos.push({
      id: 'main',
      token: singleBotToken,
    })
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKENS (–¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
  const multipleBotTokens = process.env.BOT_TOKENS
  if (multipleBotTokens) {
    const tokens = multipleBotTokens.split(',').map(token => token.trim())
    tokens.forEach((token, index) => {
      if (token) {
        botInfos.push({
          id: `bot${index + 1}`,
          token,
        })
      }
    })
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ BOT_TOKEN_1, BOT_TOKEN_2, –∏ —Ç.–¥.
  for (let i = 1; i <= 20; i++) {
    const envKey = `BOT_TOKEN_${i}`
    const token = process.env[envKey]
    if (token) {
      botInfos.push({
        id: `bot${i}`,
        token,
      })
    }
  }

  return botInfos
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫
 * @param botsInfo –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * @returns –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
 */
export async function initBots(botsInfo: BotInfo[]): Promise<BotInstance[]> {
  if (!botsInfo || botsInfo.length === 0) {
    logger.warn('–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
    return []
  }

  logger.info({
    message: `üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ${botsInfo.length} –±–æ—Ç–æ–≤...`,
    description: 'Initializing bots',
    bots_count: botsInfo.length,
  })

  const botInstances: BotInstance[] = []

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
  for (const botInfo of botsInfo) {
    try {
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      const bot = await createBot(botInfo)

      if (bot) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        try {
          const me = await bot.instance.telegram.getMe()
          bot.username = me.username

          logger.info({
            message: `‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: @${me.username} (${me.id})`,
            description: 'Bot info retrieved',
            bot_id: botInfo.id,
            bot_username: me.username,
            bot_telegram_id: me.id,
          })

          botInstances.push(bot)
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : String(error)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞
          if (
            errorMessage.includes('401') ||
            errorMessage.includes('Unauthorized')
          ) {
            logger.error({
              message: `üîí –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ${botInfo.id}. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.`,
              description: 'Bot token authorization error',
              bot_id: botInfo.id,
              error: errorMessage,
            })
          } else {
            logger.error({
              message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ ${botInfo.id}: ${errorMessage}`,
              description: 'Failed to get bot info',
              bot_id: botInfo.id,
              error: errorMessage,
            })
          }
        }
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ ${botInfo.id}: ${errorMessage}`,
        description: 'Bot initialization failed',
        bot_id: botInfo.id,
        error: errorMessage,
      })
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
    }
  }

  logger.info({
    message: `‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${botInstances.length} –∏–∑ ${botsInfo.length} —É—Å–ø–µ—à–Ω–æ`,
    description: 'Bots initialization completed',
    successful_count: botInstances.length,
    total_count: botsInfo.length,
  })

  return botInstances
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns –°–ø–∏—Å–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–±–æ—Ç–∞
 */
async function init() {
  logger.info({
    message: 'üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
    description: 'Initializing bots from environment variables',
  })

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö
  const botsInfo = getBotsInfo()

  if (botsInfo.length === 0) {
    logger.warn('–ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
    return []
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
  const botInstances = await initBots(botsInfo)

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º –≤ bot.ts
  return botInstances.map(botInstance => ({
    id: botInstance.id,
    username: botInstance.username,
    instance: botInstance.instance,
  }))
}

export default init
