import { BotInfo } from '.'
import logger from '../../utils/logger'

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
 */
export interface TokenValidationResult {
  isValid: boolean
  error?: string
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
 * @param token –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param botId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export function validateToken(token: string, botId = 'unknown'): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!token) {
    logger.error(
      `üîí [Security] –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ '${botId}'`
    )
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä, –∑–∞—Ç–µ–º ':' –∏ –∑–∞—Ç–µ–º –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã
  const botTokenPattern = /^\d+:[A-Za-z0-9_-]+$/

  if (!botTokenPattern.test(token)) {
    logger.error(
      `üîí [Security] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ '${botId}': ${maskToken(token)}`
    )
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 40 —Å–∏–º–≤–æ–ª–æ–≤)
  if (token.length < 40) {
    logger.warn(
      `üîí [Security] –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ '${botId}': ${maskToken(token)}`
    )
    return false
  }

  return true
}

/**
 * –ú–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
 */
export function maskToken(token: string): string {
  if (!token) return '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

  if (token.length <= 10) {
    return '*'.repeat(token.length)
  }

  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∏–¥–∏–º—ã–º–∏
  const firstPart = token.slice(0, 5)
  const lastPart = token.slice(-5)
  const maskedPart = '*'.repeat(token.length - 10)

  return `${firstPart}${maskedPart}${lastPart}`
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * @param eventType –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
 * @param data –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
 * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function logSecurityEvent(
  eventType: string,
  data: Record<string, any>,
  level: 'info' | 'warn' | 'error' = 'info'
): void {
  const logMessage = `–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ [${eventType}]: ${JSON.stringify(data)}`

  switch (level) {
    case 'warn':
      logger.warn(logMessage)
      break
    case 'error':
      logger.error(logMessage)
      break
    default:
      logger.info(logMessage)
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
 * @param botTokens –ú–∞—Å—Å–∏–≤ —Ç–æ–∫–µ–Ω–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–∞—Ö
 */
export function getBotsInfo(botTokens: string[]): BotInfo[] {
  const botsInfo: BotInfo[] = []

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
  botTokens.forEach((token, index) => {
    const id = `bot${index + 1}`
    if (validateToken(token, id)) {
      botsInfo.push({ id, token })
    } else {
      logger.error(`üîí –ë–æ—Ç '${id}' –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞`)
    }
  })

  return botsInfo
}

/**
 * –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏ –∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export const BOT_NAMES: Record<string, string | undefined> = {
  ['neuro_blogger_bot']: process.env.BOT_TOKEN_1,
  ['MetaMuse_Manifest_bot']: process.env.BOT_TOKEN_2,
  ['ZavaraBot']: process.env.BOT_TOKEN_3,
  ['LeeSolarbot']: process.env.BOT_TOKEN_4,
  ['NeuroLenaAssistant_bot']: process.env.BOT_TOKEN_5,
  ['NeurostylistShtogrina_bot']: process.env.BOT_TOKEN_6,
  ['Gaia_Kamskaia_bot']: process.env.BOT_TOKEN_7,
  ['ai_koshey_bot']: process.env.BOT_TOKEN_TEST_1,
  ['clip_maker_neuro_bot']: process.env.BOT_TOKEN_TEST_2,
}

/**
 * –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
 */
export const DEFAULT_BOT_NAME = 'neuro_blogger_bot'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –±–æ—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
 * @param token –¢–æ–∫–µ–Ω –±–æ—Ç–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
 */
export function getBotNameByToken(token: string): { bot_name: string } {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const entry = Object.entries(BOT_NAMES).find(([_, value]) => value === token)
  if (!entry) {
    return { bot_name: DEFAULT_BOT_NAME }
  }

  const [bot_name] = entry
  return { bot_name }
}

/**
 * –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤
 */
const BOT_TOKENS_PROD = [
  process.env.BOT_TOKEN_1,
  process.env.BOT_TOKEN_2,
  process.env.BOT_TOKEN_3,
  process.env.BOT_TOKEN_4,
  process.env.BOT_TOKEN_5,
  process.env.BOT_TOKEN_6,
  process.env.BOT_TOKEN_7,
].filter((token): token is string => typeof token === 'string')

/**
 * –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤
 */
const BOT_TOKENS_TEST = [
  process.env.BOT_TOKEN_TEST_1,
  process.env.BOT_TOKEN_TEST_2,
].filter((token): token is string => typeof token === 'string')

/**
 * –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export const BOT_TOKENS =
  process.env.NODE_ENV === 'production' ? BOT_TOKENS_PROD : BOT_TOKENS_TEST
