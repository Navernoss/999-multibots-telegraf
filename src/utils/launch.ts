import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { logger } from '@/utils/logger'

const production = async (
  bot: Telegraf<MyContext>,
  port: number,
  webhookUrl: string,
  path: string
): Promise<void> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    let botInfo
    try {
      botInfo = await bot.telegram.getMe()
      logger.info('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', {
        description: 'Bot authenticated successfully',
        username: botInfo.username,
        bot_id: botInfo.id,
        path,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ', {
        description: 'Error getting bot info',
        error: error instanceof Error ? error.message : String(error),
        error_code: error.response?.error_code,
        error_description: error.response?.description,
        path,
      })

      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
      if (error.response?.error_code === 401) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401): –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω', {
          description: 'Unauthorized (401): Token is invalid',
          path,
        })
        return
      }
      throw error
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    logger.info('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫...', {
      description: 'Deleting old webhook',
      webhookUrl,
      path,
    })

    try {
      await bot.telegram.deleteWebhook({ drop_pending_updates: true })
      logger.info('‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω', {
        description: 'Old webhook deleted',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞', {
        description: 'Error deleting webhook',
        error: error instanceof Error ? error.message : String(error),
        error_code: error.response?.error_code,
        error_description: error.response?.description,
        path,
      })

      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞
      if (error.response?.error_code === 401) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ (401)', {
          description: 'Unauthorized (401) when deleting webhook',
          path,
        })
        return
      }
    }

    // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –≤–µ–±—Ö—É–∫–∞
    await new Promise(resolve => setTimeout(resolve, 3000))

    logger.info('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫...', {
      description: 'Setting up new webhook',
      webhookUrl,
      path,
    })

    try {
      await bot.launch({
        webhook: {
          domain: webhookUrl,
          port,
          path,
          secretToken: process.env.SECRET_TOKEN,
        },
      })

      logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook', {
        description: 'Bot launched in webhook mode',
        webhookUrl,
        path,
        bot_username: botInfo.username,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook', {
        description: 'Error launching bot in webhook mode',
        error: error instanceof Error ? error.message : String(error),
        error_code: error.response?.error_code,
        error_description: error.response?.description,
        webhookUrl,
        path,
      })

      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
      return
    }

    return
  } catch (e) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ production —Ä–µ–∂–∏–º–∞:', {
      description: 'Critical error in production setup',
      error: e instanceof Error ? e.message : String(e),
      error_code: e.response?.error_code,
      error_description: e.response?.description,
      path,
    })

    // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
    logger.warn(
      '‚ö†Ô∏è –ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏',
      {
        description:
          'Bot was not launched, but the program will continue with other bots',
        path,
      }
    )

    return
  }
}

const development = async (bot: Telegraf<MyContext>): Promise<void> => {
  try {
    const botInfo = await bot.telegram.getMe().catch(error => {
      logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        {
          description: 'Error getting bot info in development mode',
          error: error instanceof Error ? error.message : String(error),
          error_code: error.response?.error_code,
          error_description: error.response?.description,
        }
      )
      throw error
    })

    logger.info('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', {
      description: 'Bot authenticated successfully in development mode',
      username: botInfo.username,
      bot_id: botInfo.id,
    })

    logger.info('üîÑ –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è development —Ä–µ–∂–∏–º–∞...', {
      description: 'Deleting webhook for development mode',
    })

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    const webhookInfo = await bot.telegram.getWebhookInfo().catch(error => {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ', {
        description: 'Error getting webhook info',
        error: error instanceof Error ? error.message : String(error),
        error_code: error.response?.error_code,
        error_description: error.response?.description,
      })
      throw error
    })

    if (webhookInfo.url) {
      logger.info('üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook:', {
        description: 'Active webhook detected',
        url: webhookInfo.url,
        has_custom_certificate: webhookInfo.has_custom_certificate,
        pending_update_count: webhookInfo.pending_update_count,
      })
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook —Å –æ–ø—Ü–∏–µ–π drop_pending_updates
    await bot.telegram
      .deleteWebhook({ drop_pending_updates: true })
      .catch(error => {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', {
          description: 'Error deleting webhook in development mode',
          error: error instanceof Error ? error.message : String(error),
          error_code: error.response?.error_code,
          error_description: error.response?.description,
        })
        throw error
      })

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook
    const webhookInfoAfter = await bot.telegram
      .getWebhookInfo()
      .catch(error => {
        logger.error(
          '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è',
          {
            description: 'Error getting webhook info after deletion',
            error: error instanceof Error ? error.message : String(error),
            error_code: error.response?.error_code,
            error_description: error.response?.description,
          }
        )
        return { url: 'UNKNOWN' }
      })

    if (webhookInfoAfter.url) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å webhook:', {
        description: 'Failed to completely remove webhook',
        url: webhookInfoAfter.url,
      })

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      await bot.telegram
        .deleteWebhook({ drop_pending_updates: true })
        .catch(error => {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞', {
            description: 'Error deleting webhook on second attempt',
            error: error instanceof Error ? error.message : String(error),
            error_code: error.response?.error_code,
            error_description: error.response?.description,
          })
          throw error
        })

      // –î–∞–µ–º Telegram API –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 3000))
    } else {
      logger.info('‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', {
        description: 'Webhook successfully deleted',
      })
    }

    // –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await new Promise(resolve => setTimeout(resolve, 2000))

    logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...', {
      description: 'Starting bot in polling mode',
      bot_username: botInfo.username,
    })

    try {
      await bot.launch()

      logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling', {
        description: 'Bot launched in polling mode',
        bot_username: botInfo.username,
        bot_id: botInfo.id,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling', {
        description: 'Error launching bot in polling mode',
        error: error instanceof Error ? error.message : String(error),
        error_code: error.response?.error_code,
        error_description: error.response?.description,
      })
      throw error
    }

    return
  } catch (e) {
    logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ development —Ä–µ–∂–∏–º–∞:', {
      description: 'Critical error in development setup',
      error: e instanceof Error ? e.message : String(e),
      error_code: e.response?.error_code,
      error_description: e.response?.description,
    })

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    throw e
  }
}

export { production, development }
