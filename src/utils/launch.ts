import * as dotenv from 'dotenv'
import logger from './logger'
import { BotInstance, initBots, getBotsInfo, maskToken } from '../core/bot'
import { getBotsFromSupabase } from '@/core/supabase'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ webhook
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
async function startBot(bot: BotInstance): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    const webhookDomain = process.env.WEBHOOK_DOMAIN
    const webhookPath = process.env.WEBHOOK_PATH || '/webhook'
    const botPath = process.env.BOT_PATH || ''

    const identifier = bot.username ? `@${bot.username}` : `bot ${bot.id}`

    if (webhookDomain) {
      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º webhook
      const webhookUrl = `${webhookDomain}${botPath}${webhookPath}/${bot.id}`

      logger.info({
        message: `üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è ${identifier}: ${webhookUrl}`,
        description: 'Setting up webhook',
        bot_id: bot.id,
        webhook_url: webhookUrl,
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ webhook
      try {
        await bot.instance.telegram.setWebhook(webhookUrl)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfo = await bot.instance.telegram.getWebhookInfo()

        if (webhookInfo.url === webhookUrl) {
          logger.info({
            message: `‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${identifier}`,
            description: 'Webhook setup successful',
            bot_id: bot.id,
            webhook_url: webhookUrl,
            pending_updates: webhookInfo.pending_update_count,
          })
          return true
        } else {
          logger.warn({
            message: `‚ö†Ô∏è Webhook –¥–ª—è ${identifier} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π URL: ${webhookInfo.url}`,
            description: 'Webhook mismatch',
            bot_id: bot.id,
            expected_url: webhookUrl,
            actual_url: webhookInfo.url,
          })
          return true // –ë–æ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ webhook –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: `‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è ${identifier}: ${errorMessage}`,
          description: 'Webhook setup failed',
          bot_id: bot.id,
          error: errorMessage,
        })
        return false
      }
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ long polling
      logger.info({
        message: `üì° –ó–∞–ø—É—Å–∫ ${identifier} –≤ —Ä–µ–∂–∏–º–µ long polling`,
        description: 'Starting in long polling mode',
        bot_id: bot.id,
      })

      await bot.instance.launch()

      logger.info({
        message: `‚úÖ ${identifier} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling`,
        description: 'Long polling started',
        bot_id: bot.id,
      })
      return true
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${bot.id}: ${errorMessage}`,
      description: 'Bot launch failed',
      bot_id: bot.id,
      error: errorMessage,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Sentry, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (process.env.SENTRY_DSN) {
      // –í–º–µ—Å—Ç–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Sentry –∏—Å–ø–æ–ª—å–∑—É–µ–º try-catch
      try {
        // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Sentry
        console.error('Sentry error:', errorMessage)
      } catch (sentryError) {
        logger.error({
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Sentry: ${String(sentryError)}`,
          description: 'Sentry logging error',
        })
      }
    }
    return false
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π
 */
export async function launchBot(): Promise<void> {
  try {
    logger.info({
      message: 'üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤',
      description: 'Starting bot launch process',
    })

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botsInfo = getBotsInfo()

    if (botsInfo.length === 0) {
      logger.error({
        message: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è',
        description: 'No bot tokens found in environment variables',
      })
      return
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    logger.info({
      message: `üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${botsInfo.length} —Ç–æ–∫–µ–Ω–æ–≤ –±–æ—Ç–æ–≤`,
      description: 'Bot tokens found',
      tokens_count: botsInfo.length,
      masked_tokens: botsInfo.map(bot => ({
        id: bot.id,
        masked_token: maskToken(bot.token),
      })),
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
    const botInstances = await initBots(botsInfo)

    if (botInstances.length === 0) {
      logger.error({
        message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞',
        description: 'No bots initialized successfully',
      })
      return
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    const shutdownHandler = () => {
      logger.info({
        message: 'üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–æ–≤...',
        description: 'Shutdown signal received',
      })

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
      botInstances.forEach(bot => {
        const identifier = bot.username ? `@${bot.username}` : `bot ${bot.id}`

        try {
          bot.instance.stop()
          logger.info({
            message: `‚úÖ –ë–æ—Ç ${identifier} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`,
            description: 'Bot stopped',
            bot_id: bot.id,
          })
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : String(error)
          logger.error({
            message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ ${identifier}: ${errorMessage}`,
            description: 'Bot stop failed',
            bot_id: bot.id,
            error: errorMessage,
          })
        }
      })

      // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      logger.info({
        message: 'üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
        description: 'Process exit',
      })

      setTimeout(() => process.exit(0), 1000)
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process.on('SIGINT', shutdownHandler)
    process.on('SIGTERM', shutdownHandler)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –æ—à–∏–±–æ–∫
    const startPromises = botInstances.map(bot => {
      // –ò–∑–æ–ª–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π promise
      return startBot(bot).catch(error => {
        const errorMessage =
          error instanceof Error ? error.message : String(error)
        logger.error({
          message: `‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ ${bot.id}: ${errorMessage}`,
          description: 'Unexpected error launching bot',
          bot_id: bot.id,
          error: errorMessage,
        })
        return false // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, —á—Ç–æ–±—ã Promise.all –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–ª—Å—è
      })
    })

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    const results = await Promise.all(startPromises)
    const successCount = results.filter(result => result === true).length

    logger.info({
      message: `‚ú® –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: ${successCount} –∏–∑ ${botInstances.length} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã`,
      description: 'All bots launched',
      success_count: successCount,
      bots_count: botInstances.length,
      bots: botInstances.map(bot => ({
        id: bot.id,
        username: bot.username,
      })),
    })
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤: ${errorMessage}`,
      description: 'Critical error launching bots',
      error: errorMessage,
    })

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Sentry, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (process.env.SENTRY_DSN) {
      // –í–º–µ—Å—Ç–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Sentry –∏—Å–ø–æ–ª—å–∑—É–µ–º try-catch
      try {
        // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Sentry
        console.error('Sentry error:', errorMessage)
      } catch (sentryError) {
        logger.error({
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Sentry: ${String(sentryError)}`,
          description: 'Sentry logging error',
        })
      }
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π
 * @param bots –ú–∞—Å—Å–∏–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
 * @returns –ú–∞—Å—Å–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
export async function launchBots(bots: BotInstance[]): Promise<BotInstance[]> {
  if (!bots || bots.length === 0) {
    logger.warn('–ù–µ—Ç –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    return []
  }

  logger.info({
    message: `üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ ${bots.length} –±–æ—Ç–æ–≤`,
    description: 'Starting bots',
    bots_count: bots.length,
  })

  const successfullyLaunched: BotInstance[] = []
  const failedBots: BotInstance[] = []

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –∏–∑–æ–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
  for (const botInstance of bots) {
    const { id, username } = botInstance
    const identifier = username ? `@${username}` : `ID ${id}`

    try {
      logger.info({
        message: `üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ${identifier}...`,
        description: 'Starting bot',
        bot_id: botInstance.id,
      })

      const success = await startBot(botInstance)

      if (success) {
        successfullyLaunched.push(botInstance)
        logger.info({
          message: `‚úÖ –ë–æ—Ç ${identifier} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`,
          description: 'Bot successfully started',
          bot_id: botInstance.id,
        })
      } else {
        failedBots.push(botInstance)
        logger.error({
          message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ${identifier}`,
          description: 'Bot failed to start',
          bot_id: botInstance.id,
        })
      }
    } catch (error) {
      failedBots.push(botInstance)
      const errorMessage =
        error instanceof Error ? error.message : String(error)
      logger.error({
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ ${identifier}: ${errorMessage}`,
        description: 'Bot launch error',
        bot_id: botInstance.id,
        error: errorMessage,
      })
    }
  }

  const successCount = successfullyLaunched.length
  const failCount = failedBots.length

  logger.info({
    message: `üìä –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ ${successCount}, –Ω–µ —É–¥–∞–ª–æ—Å—å ${failCount}`,
    description: 'Bots launch completed',
    success_count: successCount,
    failed_count: failCount,
    total_count: bots.length,
  })

  return successfullyLaunched
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * @returns –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
export async function startBotsFromEnv(): Promise<BotInstance[]> {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
  const botsInfo = getBotsInfo()

  if (botsInfo.length === 0) {
    logger.warn('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    return []
  }

  logger.info({
    message: `ü§ñ –ù–∞–π–¥–µ–Ω–æ ${botsInfo.length} –±–æ—Ç–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`,
    description: 'Bots found in environment',
    bots_count: botsInfo.length,
  })

  // –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  logger.debug(
    '–¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤:',
    botsInfo.map(bot => ({
      id: bot.id,
      masked_token: maskToken(bot.token),
    }))
  )

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
  const botInstances = await initBots(botsInfo)

  if (botInstances.length === 0) {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞')
    return []
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
  return await launchBots(botInstances)
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–æ–≤ –∏–∑ Supabase
 * @returns –°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
 */
export async function startBotsFromSupabase(): Promise<BotInstance[]> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏–∑ Supabase
    const botsInfo = await getBotsFromSupabase()

    if (!botsInfo || botsInfo.length === 0) {
      logger.warn('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–æ—Ç—ã –≤ Supabase')
      return []
    }

    logger.info({
      message: `ü§ñ –ù–∞–π–¥–µ–Ω–æ ${botsInfo.length} –±–æ—Ç–æ–≤ –≤ Supabase`,
      description: 'Bots found in Supabase',
      bots_count: botsInfo.length,
    })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤
    const botInstances = await initBots(botsInfo)

    if (botInstances.length === 0) {
      logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞ –∏–∑ Supabase')
      return []
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
    return await launchBots(botInstances)
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error({
      message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤ –∏–∑ Supabase: ${errorMessage}`,
      description: 'Failed to start bots from Supabase',
      error: errorMessage,
    })
    return []
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
 * @returns Promise<boolean> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */
export async function startServer(): Promise<boolean> {
  try {
    logger.info('üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤...')

    const port = process.env.PORT || 3000
    logger.info(`‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)

    return true
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${errorMessage}`)
    return false
  }
}
