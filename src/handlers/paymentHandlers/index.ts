import { isRussian } from '@/helpers'
import { setPayments } from '@/core/supabase/setPayments'
import {
  PaymentStatus,
  Currency,
  PaymentType,
} from '@/interfaces/payments.interface'
import { MyContext } from '@/interfaces'
import { SubscriptionType } from '@/interfaces/subscription.interface'
import { logger } from '@/utils'
import { Message, SuccessfulPayment, Update } from 'telegraf/types'
import { notifyBotOwners } from '@/core/supabase/notifyBotOwners'
// –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MyContext –∏ SessionData —É–¥–∞–ª–µ–Ω—ã

async function sendNotification({
  ctx,
  message,
  username,
  telegram_id,
  outSum,
  stars,
  subscription,
}: {
  ctx: MyContext
  message: string
  username: string
  telegram_id: string
  outSum: number
  stars: number
  subscription: SubscriptionType
}) {
  logger.info(`Notification to send: ${message}`)
  // TODO: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  // await ctx.telegram.sendMessage('@neuro_blogger_pulse', message)
  const bot_name = ctx.botInfo?.username ?? 'unknown_bot'
  await notifyBotOwners(bot_name, {
    username,
    telegram_id: telegram_id.toString(),
    amount: outSum,
    stars,
    subscription: subscription,
  })
}

async function processPayment(
  ctx: MyContext,
  amount: number,
  currency: Currency,
  subscriptionName: string,
  stars: number,
  type: PaymentType,
  subscriptionType: SubscriptionType | null,
  successfulPaymentData: SuccessfulPayment | undefined
) {
  const userId = ctx.from?.id?.toString()
  if (!userId) {
    logger.error('processPayment: User ID not found in context')
    return
  }
  const username = ctx.from?.username ?? 'unknown'
  const botUsername = ctx.botInfo?.username ?? 'unknown_bot'

  let payload: string | undefined = undefined
  let metadata: object = {}

  if (successfulPaymentData) {
    payload = successfulPaymentData.invoice_payload
    metadata = successfulPaymentData
  } else {
    logger.warn('processPayment: Received undefined successfulPaymentData.')
  }

  await sendNotification({
    ctx,
    message: `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${userId}) –∫—É–ø–∏–ª ${subscriptionName}!`,
    username,
    telegram_id: userId,
    outSum: amount,
    stars,
    subscription: subscriptionType,
  })

  await setPayments({
    telegram_id: userId!,
    OutSum: amount.toString(),
    InvId: payload || '',
    currency: currency,
    stars: stars,
    status: PaymentStatus.COMPLETED,
    payment_method: 'Telegram',
    type: type,
    subscription_type: subscriptionType,
    bot_name: botUsername,
    language: ctx.from?.language_code ?? 'en',
    metadata: metadata,
  })
}

async function processSuccessfulPaymentLogic(
  ctx: MyContext,
  successfulPayment: SuccessfulPayment
) {
  logger.info(
    '[processSuccessfulPaymentLogic] Processing payment event.',
    JSON.stringify(successfulPayment, null, 2)
  )

  if (!ctx.from?.id) {
    logger.error(
      '[processSuccessfulPaymentLogic] User ID is missing in context'
    )
    return
  }

  const isRu = isRussian(ctx)
  const userId = ctx.from.id.toString()
  const botUsername = ctx.botInfo?.username ?? 'unknown_bot'
  const username = ctx.from?.username ?? 'unknown'

  const payload = successfulPayment.invoice_payload ?? ''
  let isSubscriptionPurchase = false
  let purchasedSubType: SubscriptionType | null = null
  let purchasedSubName = ''
  const currencyPaid = successfulPayment.currency as Currency
  const amountPaid = successfulPayment.total_amount
  let starsEquivalent = amountPaid

  if (payload.startsWith('buy_subscription_')) {
    const subKey = payload.replace('buy_subscription_', '').toUpperCase()
    if (subKey === SubscriptionType.NEUROPHOTO) {
      purchasedSubType = SubscriptionType.NEUROPHOTO
      purchasedSubName = 'NeuroPhoto'
      starsEquivalent = 476
    } else if (subKey === SubscriptionType.NEUROBASE) {
      purchasedSubType = SubscriptionType.NEUROBASE
      purchasedSubName = 'NeuroBase'
      starsEquivalent = 1303
    } else if (subKey === SubscriptionType.NEUROBLOGGER) {
      purchasedSubType = SubscriptionType.NEUROBLOGGER
      purchasedSubName = 'NeuroBlogger'
    }

    if (purchasedSubType) {
      isSubscriptionPurchase = true
    }
  } else if (payload === 'top_up_stars') {
    isSubscriptionPurchase = false
  }

  logger.info('[processSuccessfulPaymentLogic] Parsed Payload:', {
    userId,
    payload,
    isSubscriptionPurchase,
    purchasedSubType,
    currencyPaid,
    amountPaid,
  })

  if (isSubscriptionPurchase && purchasedSubType) {
    logger.info(
      `[processSuccessfulPaymentLogic] Processing subscription purchase: ${purchasedSubType}`
    )
    await processPayment(
      ctx,
      amountPaid,
      currencyPaid,
      purchasedSubName,
      starsEquivalent,
      PaymentType.SUBSCRIPTION_PURCHASE,
      purchasedSubType,
      successfulPayment
    )
    await ctx.reply(
      isRu
        ? `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ ${purchasedSubName} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!`
        : `‚úÖ Subscription ${purchasedSubName} purchased successfully!`
    )
  } else {
    logger.info(`[processSuccessfulPaymentLogic] Processing as star top-up.`)
    await setPayments({
      telegram_id: userId,
      OutSum: amountPaid.toString(),
      InvId: payload || successfulPayment.telegram_payment_charge_id,
      currency: currencyPaid,
      stars: amountPaid,
      status: PaymentStatus.COMPLETED,
      payment_method: 'Telegram',
      type: PaymentType.MONEY_INCOME,
      subscription_type: null,
      bot_name: botUsername,
      language: ctx.from?.language_code ?? 'en',
      metadata: successfulPayment ?? {},
    })
    await ctx.reply(
      isRu
        ? `üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amountPaid}‚≠êÔ∏è –∑–≤–µ–∑–¥!`
        : `üí´ Your balance has been replenished by ${amountPaid}‚≠êÔ∏è stars!`
    )
    await sendNotification({
      ctx,
      message: `üí´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${username} (ID: ${userId}) –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ ${amountPaid} –∑–≤–µ–∑–¥!`,
      username,
      telegram_id: userId,
      outSum: amountPaid,
      stars: amountPaid,
      subscription: null,
    })
  }
  logger.info('[processSuccessfulPaymentLogic] Finished processing.')
}

// --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø PRE_CHECKOUT_QUERY ---
export async function handlePreCheckoutQuery(ctx: MyContext) {
  const query = ctx.preCheckoutQuery
  if (!query) {
    logger.error(
      '[handlePreCheckoutQuery] Received update without preCheckoutQuery data.'
    )
    // –û—Ç–≤–µ—á–∞—Ç—å –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. —ç—Ç–æ –Ω–µ pre_checkout_query –ø–æ —Ñ–∞–∫—Ç—É
    return
  }

  logger.info('[handlePreCheckoutQuery] Received pre_checkout_query:', {
    query_id: query.id,
    from: query.from,
    currency: query.currency,
    total_amount: query.total_amount,
    invoice_payload: query.invoice_payload,
  })

  // --- –ó–î–ï–°–¨ –ú–û–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –ü–†–û–í–ï–†–ö–ò ---
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å payload, —Å—É–º–º—É, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞/–ø–æ–¥–ø–∏—Å–∫–∏
  const payloadIsValid = true // –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –ª—é–±–æ–π payload –≤–∞–ª–∏–¥–Ω—ã–º
  const amountIsValid = true // –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º –ª—é–±—É—é —Å—É–º–º—É –≤–∞–ª–∏–¥–Ω–æ–π

  if (payloadIsValid && amountIsValid) {
    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂
    logger.info(
      `[handlePreCheckoutQuery] Answering OK for query_id: ${query.id}`
    )
    await ctx.answerPreCheckoutQuery(true)
  } else {
    // –ö–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' // –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.warn(
      `[handlePreCheckoutQuery] Answering FAILED for query_id: ${query.id}. Reason: ${errorMessage}`
    )
    await ctx.answerPreCheckoutQuery(false, errorMessage)
  }
}
// --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
export async function handleSuccessfulPayment(ctx: MyContext) {
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–¥–∏–Ω if) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 'as'
  if (
    ctx.updateType !== 'message' ||
    !(ctx.update as Update.MessageUpdate).message || // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º 'as' –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ message
    !('successful_payment' in (ctx.update as Update.MessageUpdate).message) // <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º 'as' –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ successful_payment
  ) {
    logger.error(
      '[handleSuccessfulPayment] Update is not a message with successful_payment data'
    )
    return
  }

  // 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 'as'
  // –¢–µ–ø–µ—Ä—å, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –º—ã –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–∏–ø–µ
  const successfulPayment = (
    ctx.update as Update.MessageUpdate<Message.SuccessfulPaymentMessage>
  ).message.successful_payment

  // 3. –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
  await processSuccessfulPaymentLogic(ctx, successfulPayment)
}
