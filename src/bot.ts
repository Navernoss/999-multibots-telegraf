import { isDev } from './config'

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

import { Composer, Telegraf, Scenes } from 'telegraf'
// –£–¥–∞–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç composer
// export const composer = new Composer()

import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'
import { setupWebhookHandlers } from './webhookHandler'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Express –¥–ª—è Robokassa –≤–µ–±—Ö—É–∫–æ–≤
import express from 'express'
import fileUpload from 'express-fileupload'
import { handleRobokassaResult } from './webhooks/robokassa/robokassa.handler'
import * as http from 'http'
import util from 'util' // –î–æ–±–∞–≤–ª—è–µ–º util –¥–ª—è promisify

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const botInstances: Telegraf[] = []
let robokassaServer: http.Server | null = null

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
export async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
export async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa –≤–µ–±—Ö—É–∫–æ–≤
export async function startRobokassaWebhookServer(): Promise<http.Server | null> {
  // –ü–æ—Ä—Ç –¥–ª—è Robokassa webhook
  const robokassaPort = process.env.ROBOKASSA_WEBHOOK_PORT || 2999

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä express
  const app = express()

  // Middleware –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ URL-encoded —Ñ–æ—Ä–º—ã
  app.use(express.urlencoded({ extended: true }))

  // Middleware –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ JSON –¥–∞–Ω–Ω—ã—Ö
  app.use(express.json())

  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ multipart/form-data
  app.use(fileUpload())

  // POST –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Robokassa
  app.post('/payment-success', handleRobokassaResult)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  app.get('/health', (req, res) => {
    res.status(200).send('OK')
  })

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  // –£–±–∏—Ä–∞–µ–º setTimeout, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ SIGINT/SIGTERM
  const server = await new Promise<http.Server | null>(resolve => {
    const expressServer = app
      .listen(robokassaPort, () => {
        console.log(
          `[Robokassa] Webhook server running on port ${robokassaPort}`
        )
        resolve(expressServer) // –†–µ–∑–æ–ª–≤–∏–º –ø—Ä–æ–º–∏—Å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞
      })
      .on('error', err => {
        console.error(
          `[Robokassa] Failed to start webhook server: ${err.message}`
        )
        if ((err as NodeJS.ErrnoException).code === 'EADDRINUSE') {
          console.error(
            `[Robokassa] Port ${robokassaPort} is already in use. Maybe another instance is running?`
          )
        }
        resolve(null) // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω–µ–º null
      })
  })
  // –£–±–∏—Ä–∞–µ–º setTimeout

  return server
}

// –î–æ–±–∞–≤–ª—è—é –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–æ—Ç–æ–≤
async function initializeBots() {
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  console.log('üîÑ [SCENE_DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ stage –∏–∑ registerCommands...')
  const { stage } = await import('./registerCommands')
  console.log('‚úÖ [SCENE_DEBUG] Stage –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
  // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ü–µ–Ω—ã –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
  try {
    const stageInfo = (stage as any)._handlers || []
    console.log(
      'üìä [SCENE_DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ü–µ–Ω:',
      stageInfo.length
    )
  } catch (e) {
    console.log(
      '‚ö†Ô∏è [SCENE_DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ü–µ–Ω:',
      e.message
    )
  }

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ TEST_BOT_NAME
    const targetBotUsername = process.env.TEST_BOT_NAME
    if (!targetBotUsername) {
      throw new Error(
        '‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ username –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ development.'
      )
    }

    console.log(`üîß –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å username: ${targetBotUsername}`)

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ env
    const potentialTokens = Object.entries(process.env)
      .filter(([key]) => key.startsWith('BOT_TOKEN'))
      .map(([, value]) => value)
      .filter(Boolean) as string[]

    let bot: Telegraf<MyContext> | null = null
    let foundBotInfo: Awaited<ReturnType<typeof bot.telegram.getMe>> | null =
      null

    for (const token of potentialTokens) {
      try {
        const tempBot = new Telegraf<MyContext>(token)
        const botInfo = await tempBot.telegram.getMe()
        if (botInfo.username === targetBotUsername) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±–æ—Ç ${botInfo.username}`)
          bot = tempBot // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞
          foundBotInfo = botInfo
          break // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –±–æ—Ç –Ω–∞–π–¥–µ–Ω
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
        // console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ ${token.substring(0, 10)}...: ${error.message}`);
      }
    }

    if (!bot || !foundBotInfo) {
      throw new Error(
        `‚ùå –ë–æ—Ç —Å username '${targetBotUsername}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ .env –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω.`
      )
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥
    console.log(
      'üîÑ [SCENE_DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ stage middleware...'
    )

    // –£–±–∏—Ä–∞–µ–º composer –∏–∑ –≤—ã–∑–æ–≤–∞
    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ bot
    registerCommands({ bot })

    console.log('‚úÖ [SCENE_DEBUG] –ö–æ–º–∞–Ω–¥—ã –∏ middleware –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    botInstances.push(bot)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: ['message', 'callback_query'],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${foundBotInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
    ].filter(Boolean)

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Ä—Ç–∞ 3001 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Composer.log() –Ω–∞–ø—Ä—è–º—É—é
        bot.use(Composer.log())

        // –£–±–∏—Ä–∞–µ–º composer –∏–∑ –≤—ã–∑–æ–≤–∞
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ bot
        registerCommands({ bot })

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        try {
          bot.launch({
            webhook: {
              domain: process.env.WEBHOOK_DOMAIN,
              port: currentPort,
              path: `/telegraf/${bot.secretPathComponent()}`,
            },
            allowedUpdates: ['message', 'callback_query'],
          })
          console.log(
            `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
          )
          await new Promise(resolve => setTimeout(resolve, 2000)) // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botInfo.username}:`, error)
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
        currentPort++
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ä—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setupWebhookHandlers(botInstances as Telegraf<MyContext>[])
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa –≤–µ–±—Ö—É–∫–æ–≤
  robokassaServer = await startRobokassaWebhookServer()

  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω...')
  // –ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª—è—é –ª–æ–≥
  console.log('üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω—ã: payment_scene')
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω ...

  // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω –¥–æ–±–∞–≤–ª—è—é –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥:
  console.log('‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
}

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è server.close
const closeServerAsync = robokassaServer
  ? util.promisify(robokassaServer.close.bind(robokassaServer))
  : async () => {
      /* No-op if server is null */
    } // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async function gracefulShutdown(signal: string) {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

  // 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–æ–≤
  console.log(`[${signal}] Stopping ${botInstances.length} bot instance(s)...`)
  const stopPromises = botInstances.map(async (bot, index) => {
    try {
      console.log(
        `[${signal}] Initiating stop for bot instance index ${index}...`
      )
      // bot.stop() –¥–ª—è long polling –æ–±—ã—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å
      // –•–æ—Ç—è Telegraf 4.x stop() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç void –¥–ª—è polling
      bot.stop(signal)
      console.log(
        `[${signal}] Successfully stopped bot instance index ${index}.`
      )
    } catch (error) {
      console.error(
        `[${signal}] Error stopping bot instance index ${index}:`,
        error // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É
      )
    }
  })
  // –ù–µ –Ω—É–∂–Ω–æ Promise.all, —Ç–∞–∫ –∫–∞–∫ bot.stop() —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–ª—è polling
  // await Promise.all(stopPromises) // –£–±–∏—Ä–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ
  console.log(`[${signal}] All bot instances processed for stopping.`)

  // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä Robokassa, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
  if (robokassaServer) {
    console.log(`[${signal}] [Robokassa] Stopping webhook server...`)
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∑–¥–µ—Å—å, –µ—Å–ª–∏ server –Ω–µ null
      await closeServerAsync() // –û–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞
      console.log(
        `[${signal}] [Robokassa] Webhook server stopped successfully.`
      )
      robokassaServer = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    } catch (error) {
      console.error(
        `[${signal}] [Robokassa] Error stopping webhook server:`,
        error
      )
    }
  } else {
    console.log(
      `[${signal}] [Robokassa] Webhook server was not running or already stopped.`
    )
  }

  // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
  console.log(`[${signal}] Adding a short delay before exiting...`)
  await new Promise(resolve => setTimeout(resolve, 1500)) // –ü–∞—É–∑–∞ 1500 –º—Å (–±—ã–ª–æ 500)

  console.log(`[${signal}] Graceful shutdown completed. Exiting.`)
  process.exit(0) // –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º 0 (—É—Å–ø–µ—Ö)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
process.once('SIGINT', () => gracefulShutdown('SIGINT'))
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'))

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
initializeBots()
  .then(() => console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤:', error))
