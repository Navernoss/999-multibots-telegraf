import { isDev } from './config'

console.log(`--- Bot Logic ---`)
console.log(
  `[BOT] Detected mode (via isDev): ${isDev ? 'development' : 'production'}`
)
console.log(`[BOT] process.env.NODE_ENV: ${process.env.NODE_ENV}`)
console.log(`--- End Bot Logic Check ---`)

import { Composer, Telegraf } from 'telegraf'

import { registerCommands } from './registerCommands'
import { MyContext } from './interfaces'
import { setupWebhookHandlers } from './webhookHandler'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Express –¥–ª—è Robokassa –≤–µ–±—Ö—É–∫–æ–≤
import express from 'express'
import fileUpload from 'express-fileupload'
import { handleRobokassaResult } from './webhooks/robokassa/robokassa.handler'
import * as http from 'http'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
const botInstances: Telegraf[] = []
let robokassaServer: http.Server | null = null

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Composer –≥–ª–æ–±–∞–ª—å–Ω–æ
export const composer = new Composer<MyContext>()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
async function validateBotToken(token: string): Promise<boolean> {
  try {
    const bot = new Telegraf(token)
    await bot.telegram.getMe()
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${error.message}`)
    return false
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
async function isPortInUse(port: number): Promise<boolean> {
  try {
    const net = await import('net')
    return new Promise(resolve => {
      const server = net.createServer()
      server.once('error', () => resolve(true))
      server.once('listening', () => {
        server.close()
        resolve(false)
      })
      server.listen(port)
    })
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ ${port}:`, error)
    return true
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa –≤–µ–±—Ö—É–∫–æ–≤
async function startRobokassaWebhookServer(): Promise<http.Server | null> {
  // –ü–æ—Ä—Ç –¥–ª—è Robokassa webhook
  const robokassaPort = process.env.ROBOKASSA_WEBHOOK_PORT || 2999

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä express
  const app = express()

  // Middleware –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ URL-encoded —Ñ–æ—Ä–º—ã
  app.use(express.urlencoded({ extended: true }))

  // Middleware –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ JSON –¥–∞–Ω–Ω—ã—Ö
  app.use(express.json())

  // Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ multipart/form-data
  app.use(fileUpload())

  // POST –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Robokassa
  app.post('/payment-success', handleRobokassaResult)

  // POST –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Robokassa
  app.post('/robokassa-result', handleRobokassaResult)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  app.get('/health', (req, res) => {
    res.status(200).send('OK')
  })

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, —á—Ç–æ–±—ã –ø–æ—Ä—Ç —É—Å–ø–µ–ª –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ts-node-dev
  const server = await new Promise<http.Server | null>(resolve => {
    setTimeout(() => {
      const expressServer = app
        .listen(robokassaPort, () => {
          console.log(
            `[Robokassa] Webhook server running on port ${robokassaPort}`
          )
          resolve(expressServer) // –†–µ–∑–æ–ª–≤–∏–º –ø—Ä–æ–º–∏—Å —Å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        })
        .on('error', err => {
          console.error(
            `[Robokassa] Failed to start webhook server: ${err.message}`
          )
          if ((err as NodeJS.ErrnoException).code === 'EADDRINUSE') {
            console.error(
              `[Robokassa] Port ${robokassaPort} is already in use. Maybe another instance is running?`
            )
          }
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
          // –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å null/undefined,
          // –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–∫, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—ã—à–µ.
          // resolve(null); // –ò–ª–∏ reject(err)
        })
    }, 100) // –ó–∞–¥–µ—Ä–∂–∫–∞ 100 –º—Å
  })

  return server
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
async function initializeBots() {
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', isDev ? 'development' : 'production')
  console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.NODE_ENV)

  if (isDev) {
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    const testBotToken = process.env.BOT_TOKEN_TEST_1
    if (!testBotToken) {
      throw new Error('‚ùå BOT_TOKEN_TEST_1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.development')
    }

    const bot = new Telegraf<MyContext>(testBotToken)
    bot.use(Composer.log())

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π composer
    registerCommands({ bot, composer })

    botInstances.push(bot)
    const botInfo = await bot.telegram.getMe()
    console.log(`ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    bot.launch({
      allowedUpdates: ['message', 'callback_query'],
    })
    console.log(
      `üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏`
    )
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
    const botTokens = [
      process.env.BOT_TOKEN_1,
      process.env.BOT_TOKEN_2,
      process.env.BOT_TOKEN_3,
      process.env.BOT_TOKEN_4,
      process.env.BOT_TOKEN_5,
      process.env.BOT_TOKEN_6,
      process.env.BOT_TOKEN_7,
    ].filter(Boolean)

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Ä—Ç–∞ 3001 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
    let currentPort = 3001

    for (const token of botTokens) {
      if (await validateBotToken(token)) {
        const bot = new Telegraf<MyContext>(token)
        bot.use(Composer.log())

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π composer
        registerCommands({ bot, composer })

        botInstances.push(bot)
        const botInfo = await bot.telegram.getMe()
        console.log(`ü§ñ –ë–æ—Ç ${botInfo.username} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
        while (await isPortInUse(currentPort)) {
          console.log(`‚ö†Ô∏è –ü–æ—Ä—Ç ${currentPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...`)
          currentPort++
        }

        console.log(
          `üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç ${currentPort} –¥–ª—è –±–æ—Ç–∞ ${botInfo.username}`
        )

        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        try {
          bot.launch({
            webhook: {
              domain: process.env.WEBHOOK_DOMAIN,
              port: currentPort,
              path: `/telegraf/${bot.secretPathComponent()}`,
            },
            allowedUpdates: ['message', 'callback_query'],
          })
          console.log(
            `üöÄ –ë–æ—Ç ${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É ${currentPort}`
          )
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ${botInfo.username}:`, error)
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞
        currentPort++
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ä—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setupWebhookHandlers(botInstances as Telegraf<MyContext>[])
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa –≤–µ–±—Ö—É–∫–æ–≤
  robokassaServer = await startRobokassaWebhookServer()
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
  console.log(`[SIGINT] Stopping ${botInstances.length} bot instance(s)...`)
  botInstances.forEach((bot, index) => {
    try {
      bot.stop('SIGINT')
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ botInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
      // const botInfo = bot.telegram ? await bot.telegram.getMe() : null; // –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
      console.log(`[SIGINT] Called stop() for bot instance index ${index}.`)
    } catch (error) {
      console.error(
        `[SIGINT] Error stopping bot instance index ${index}:`,
        error
      )
    }
  })

  if (robokassaServer) {
    console.log('[Robokassa] Stopping webhook server...')
    const server = robokassaServer // Capture server instance
    robokassaServer = null // Prevent multiple close attempts

    const closeTimeout = setTimeout(() => {
      console.warn(
        '[Robokassa] Server close timed out after 2 seconds. Forcing exit.'
      )
      process.exit(1) // Force exit if close hangs
    }, 2000)

    server.close(err => {
      clearTimeout(closeTimeout)
      if (err) {
        console.error('[Robokassa] Error closing webhook server:', err)
        process.exit(1) // Exit with error if close fails
      } else {
        console.log('[Robokassa] Webhook server stopped successfully.')
        // Consider exiting only after all cleanup is done,
        // but for now, let's rely on the fact that bot stop might also exit.
        // process.exit(0); // Might be too early if bot.stop is async internally
      }
    })
  }
  // else {
  // If no server, maybe exit here? Let's rely on bot termination for now.
  // process.exit(0); // Might be too early if bot.stop is async internally
  // }
  // Allow some time for stops to propagate before potentially exiting forcefully elsewhere if needed.
})

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...')
  console.log(`[SIGTERM] Stopping ${botInstances.length} bot instance(s)...`)
  botInstances.forEach((bot, index) => {
    try {
      bot.stop('SIGTERM')
      console.log(`[SIGTERM] Called stop() for bot instance index ${index}.`)
    } catch (error) {
      console.error(
        `[SIGTERM] Error stopping bot instance index ${index}:`,
        error
      )
    }
  })

  if (robokassaServer) {
    console.log('[Robokassa] Stopping webhook server...')
    const server = robokassaServer // Capture server instance
    robokassaServer = null // Prevent multiple close attempts

    const closeTimeout = setTimeout(() => {
      console.warn(
        '[Robokassa] Server close timed out after 2 seconds. Forcing exit.'
      )
      process.exit(1) // Force exit if close hangs
    }, 2000)

    server.close(err => {
      clearTimeout(closeTimeout)
      if (err) {
        console.error('[Robokassa] Error closing webhook server:', err)
        process.exit(1) // Exit with error if close fails
      } else {
        console.log('[Robokassa] Webhook server stopped successfully.')
        // process.exit(0); // See SIGINT comments
      }
    })
  }
  // else {
  // process.exit(0); // See SIGINT comments
  // }
})

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
initializeBots()
  .then(() => console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤:', error))
