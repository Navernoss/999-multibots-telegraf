import dotenv from 'dotenv'
dotenv.config()

import { Composer } from 'telegraf'
import { MyContext } from '@/interfaces'
import { NODE_ENV } from './config'

import { development, production } from '@/utils/launch'
import express from 'express'
import { registerCallbackActions } from './handlers/—ÅallbackActions'
import { registerPaymentActions } from './handlers/paymentActions'
import { registerHearsActions } from './handlers/hearsActions'
import { registerCommands } from './registerCommands'
import { setBotCommands } from './setCommands'
import { getBotNameByToken } from './core/bot'
import { bots, BOT_TOKENS } from './core/bot'
import { logger } from './utils/logger'
import { setupErrorHandler } from './helpers/error/errorHandler'

dotenv.config()

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üìÇ bot.ts –∑–∞–≥—Ä—É–∂–µ–Ω', { NODE_ENV, cwd: process.cwd() })
console.log('üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
  TEST_BOT_NAME: process.env.TEST_BOT_NAME,
  NODE_ENV: process.env.NODE_ENV,
})

export const composer = new Composer<MyContext>()

type NextFunction = (err?: Error) => void

export const createBots = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ createBots()')
  if (!process.env.TEST_BOT_NAME) {
    logger.error('‚ùå TEST_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {
      description: 'TEST_BOT_NAME is not set',
    })
    throw new Error('TEST_BOT_NAME is required')
  }

  console.log('üìä –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', NODE_ENV)
  console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:', bots.length)

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
  const testBot =
    NODE_ENV === 'development'
      ? bots.find(bot => {
          const { bot_name } = getBotNameByToken(bot.telegram.token)
          return bot_name === process.env.TEST_BOT_NAME
        })
      : null

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  const activeBots =
    NODE_ENV === 'development'
      ? testBot
        ? [testBot]
        : []
      : bots.filter(bot => BOT_TOKENS.includes(bot.telegram.token)) // –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKENS –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

  if (NODE_ENV === 'development' && activeBots.length === 0) {
    logger.error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
      description: 'Test bot not found',
      environment: NODE_ENV,
    })
    throw new Error('Test bot not found')
  }

  console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:', activeBots.length)

  activeBots.forEach((bot, index) => {
    try {
      const app = express()

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–∫–µ–Ω–∞–º–∏
      setupErrorHandler(bot)

      const port = 3001 + index
      logger.info('üîå –ü–æ—Ä—Ç –¥–ª—è –±–æ—Ç–∞:', {
        description: 'Bot port',
        port,
      })

      // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –≤ try-catch
      try {
        setBotCommands(bot)
      } catch (commandError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', {
          description: 'Command setup error',
          bot_name: bot.botInfo?.username || 'unknown',
          error:
            commandError instanceof Error
              ? commandError.message
              : String(commandError),
        })
      }

      try {
        registerCommands({ bot, composer })
      } catch (registerError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', {
          description: 'Command registration error',
          bot_name: bot.botInfo?.username || 'unknown',
          error:
            registerError instanceof Error
              ? registerError.message
              : String(registerError),
        })
      }

      try {
        registerCallbackActions(bot)
        registerPaymentActions(bot)
        registerHearsActions(bot)
      } catch (actionsError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:', {
          description: 'Action registration error',
          bot_name: bot.botInfo?.username || 'unknown',
          error:
            actionsError instanceof Error
              ? actionsError.message
              : String(actionsError),
        })
      }

      const telegramToken = bot.telegram.token
      const { bot_name } = getBotNameByToken(telegramToken)
      logger.info('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç:', {
        description: 'Starting bot',
        bot_name,
        environment: NODE_ENV,
      })

      const webhookPath = `/${bot_name}`
      const webhookUrl = `https://999-multibots-telegraf-u14194.vm.elestio.app${webhookPath}`

      try {
        if (NODE_ENV === 'development') {
          development(bot)
        } else {
          production(bot, port, webhookUrl, webhookPath)
        }
      } catch (launchError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', {
          description: 'Bot launch error',
          bot_name,
          error:
            launchError instanceof Error
              ? launchError.message
              : String(launchError),
        })
      }

      bot.use((ctx: MyContext, next: NextFunction) => {
        logger.info('üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ/–∫–æ–º–∞–Ω–¥–∞:', {
          description: 'Message/command received',
          text:
            ctx.message && 'text' in ctx.message ? ctx.message.text : undefined,
          from: ctx.from?.id,
          chat: ctx.chat?.id,
          bot: ctx.botInfo?.username,
          timestamp: new Date().toISOString(),
        })
        return next()
      })

      app.use(webhookPath, express.json(), (req, res) => {
        logger.info('üì® –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', {
          description: 'Webhook received',
          query: req.query,
        })

        const token = req.query.token as string
        const bot = activeBots.find(b => b.telegram.token === token)

        if (bot) {
          bot.handleUpdate(req.body, res)
        } else {
          res.status(404).send('Bot not found')
        }
      })
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', {
        description: 'Critical bot initialization error',
        index,
        error: error instanceof Error ? error.message : String(error),
      })
    }
  })
}

console.log('üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
createBots()
  .then(() => console.log('‚úÖ –ë–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã'))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–æ–≤:', error))
