import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { handleSelectRubAmount } from '@/handlers'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, PASSWORD1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

export const rublePaymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.RublePaymentScene
)

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
rublePaymentScene.enter(async ctx => {
  logger.info('### rublePaymentScene ENTERED ###', {
    scene: ModeEnum.RublePaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
  })
  const isRu = isRussian(ctx)
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  await handleSelectRubAmount({ ctx, isRu })
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
rublePaymentScene.action(/top_up_rub_(\d+)/, async ctx => {
  const isRu = isRussian(ctx)
  try {
    await ctx.answerCbQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    const amountRub = parseInt(ctx.match[1], 10)
    logger.info(
      `[${ModeEnum.RublePaymentScene}] Processing callback top_up_rub: ${amountRub} ‚ÇΩ`,
      {
        telegram_id: ctx.from?.id,
        amount: amountRub,
      }
    )

    const selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)
    if (!selectedOption) {
      logger.error(
        `‚ùå [${ModeEnum.RublePaymentScene}] Invalid top-up option selected: ${amountRub} RUB`,
        {
          telegram_id: ctx.from?.id,
          amount: amountRub,
        }
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
          : 'An error occurred: invalid top-up amount.'
      )
      return ctx.scene.leave()
    }

    const stars = selectedOption.stars
    const userId = ctx.from?.id
    if (!userId) {
      logger.error(`‚ùå [${ModeEnum.RublePaymentScene}] User ID is missing!`, {
        callback_data: ctx.match[0],
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.'
          : 'An error occurred: could not identify your account.'
      )
      return ctx.scene.leave()
    }

    const invId = Math.floor(Math.random() * 1000000) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å—á–µ—Ç–∞
    const description = isRu
      ? `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥`
      : `Balance top-up for ${stars} stars`

    logger.info(
      `[${ModeEnum.RublePaymentScene}] Generating Robokassa URL for ${amountRub} RUB (${stars} stars)`,
      {
        telegram_id: userId,
        amount: amountRub,
        stars: stars,
        invId: invId,
      }
    )

    const invoiceURL = await getInvoiceId(
      MERCHANT_LOGIN,
      amountRub,
      invId,
      description,
      PASSWORD1
    )

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
    await setPayments({
      telegram_id: userId.toString(),
      OutSum: amountRub.toString(),
      InvId: invId.toString(),
      currency: 'RUB',
      stars: stars,
      status: 'PENDING',
      payment_method: 'Robokassa',
      subscription: 'stars', // –¢–∏–ø - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥
      bot_name,
      language: ctx.from?.language_code,
    })

    logger.info(
      `[${ModeEnum.RublePaymentScene}] PENDING payment saved for InvId: ${invId}`,
      {
        telegram_id: userId,
        invId: invId,
      }
    )

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    const inlineKeyboard = [
      [
        {
          text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amountRub} ‚ÇΩ` : `Pay ${amountRub} RUB`,
          url: invoiceURL,
        },
      ],
    ]

    await ctx.reply(
      isRu
        ? `‚úÖ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω</b>\n–°—É–º–º–∞: ${amountRub} ‚ÇΩ (${stars} ‚≠êÔ∏è)\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Robokassa.`
        : `‚úÖ <b>Invoice created</b>\nAmount: ${amountRub} RUB (${stars} ‚≠êÔ∏è)\n\nClick the button below to proceed with payment via Robokassa.`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
        parse_mode: 'HTML',
      }
    )
    logger.info(
      `[${ModeEnum.RublePaymentScene}] Robokassa invoice message sent to user ${userId}`
    )
    return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
  } catch (error: any) {
    logger.error(
      `‚ùå [${ModeEnum.RublePaymentScene}] Error processing callback top_up_rub:`,
      {
        error: error.message,
        stack: error.stack,
        telegram_id: ctx.from?.id,
        callback_data: ctx.match ? ctx.match[0] : 'N/A',
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Robokassa.'
        : 'An error occurred while creating the Robokassa invoice.'
    )
    return ctx.scene.leave()
  }
})

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
rublePaymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(
    `[${ModeEnum.RublePaymentScene}] Leaving scene via Main Menu button`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  await ctx.scene.enter(ModeEnum.MenuScene) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω—É—é —Å—Ü–µ–Ω—É –º–µ–Ω—é
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
rublePaymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.RublePaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore
    message_text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
      : 'Please select a top-up amount or return to the main menu.'
  )
  // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å
})
