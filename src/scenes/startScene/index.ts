import { MyContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import { getTranslation } from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    logger.info({
      message: 'üöÄ [StartScene] –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º',
      telegramId,
      function: 'startScene',
      username: ctx.from?.username,
      language: ctx.from?.language_code,
      sessionData: JSON.stringify(ctx.session || {}),
    })

    const isRu = ctx.from?.language_code === 'ru'
    const botName = ctx.botInfo.username

    logger.info({
      message: 'üì° [StartScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      telegramId,
      function: 'startScene',
      bot_name: botName,
      step: 'fetching_translation',
    })

    const { translation, url } = await getTranslation({
      key: 'start',
      ctx,
      bot_name: botName,
    })

    logger.info({
      message: '‚úÖ [StartScene] –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω',
      telegramId,
      function: 'startScene',
      translationReceived: !!translation,
      imageUrlReceived: !!url,
      step: 'translation_received',
    })

    if (url && url.trim() !== '') {
      logger.info({
        message:
          'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
        telegramId,
        function: 'startScene',
        url,
        step: 'sending_welcome_image',
      })

      await ctx.replyWithPhoto(url, {
        caption: translation,
        parse_mode: 'Markdown',
      })
    } else {
      logger.info({
        message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        telegramId,
        function: 'startScene',
        step: 'sending_welcome_text',
      })

      await ctx.reply(translation, {
        parse_mode: 'Markdown',
      })
    }

    const tutorialUrl = BOT_URLS[botName]
    let replyKeyboard

    if (tutorialUrl) {
      logger.info({
        message: `üé¨ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName}`,
        telegramId,
        function: 'startScene',
        tutorialUrl,
        step: 'sending_tutorial',
      })

      const tutorialText = isRu
        ? `üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](${tutorialUrl}), –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å (–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞), —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å prompt –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏—Å—å.`
        : `üé¨ Watch this [tutorial video](${tutorialUrl}) on how to create neurophotos in this bot.\n\nIn this video, you will learn how to train your model (Digital avatar body), create photos, and get a prompt from any photo that inspires you.`

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π`,
        telegramId,
        function: 'startScene',
        step: 'sending_tutorial_text_with_keyboard',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(tutorialText, {
        parse_mode: 'Markdown',
        reply_markup: replyKeyboard.reply_markup,
      })
    } else {
      logger.info({
        message: `‚ÑπÔ∏è [StartScene] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        telegramId,
        function: 'startScene',
        step: 'tutorial_url_not_found',
      })

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è`,
        telegramId,
        function: 'startScene',
        step: 'sending_basic_menu',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
        reply_markup: replyKeyboard.reply_markup,
      })
    }

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å—Ç–∞—Ä—Ç–∞`,
      telegramId,
      function: 'startScene',
      step: 'scene_leave',
    })

    return ctx.scene.leave()
  }
)
