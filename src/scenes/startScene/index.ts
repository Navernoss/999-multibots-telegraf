import { MyContext, MyTextMessageContext } from '@/interfaces'
import { Markup, Scenes } from 'telegraf'
import {
  getTranslation,
  getUserDetails,
  createUser,
  getReferalsCountAndUserData,
} from '@/core/supabase'
import { BOT_URLS } from '@/core/bot'
import { logger } from '@/utils/logger'
import { levels } from '@/menu/mainMenu'
import { ModeEnum } from '@/interfaces/modes'
import { getPhotoUrl } from '@/handlers/getPhotoUrl'
import { isRussian } from '@/helpers/language'

export const startScene = new Scenes.WizardScene<MyContext>(
  ModeEnum.StartScene,
  async ctx => {
    console.log('[TEST_DEBUG] Entered startScene handler')
    const telegramId = ctx.from?.id?.toString() || 'unknown'
    const isRu = ctx.from?.language_code === 'ru'
    const botName = ctx.botInfo.username

    logger.info({
      message: `[StartScene ENTRY] User: ${telegramId}, Lang: ${
        isRu ? 'ru' : 'en'
      }`,
      telegramId,
      function: 'startScene',
      step: 'entry',
      session: JSON.stringify(ctx.session || {}),
    })

    // --- –ù–ê–ß–ê–õ–û: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    try {
      logger.info({
        message: `[StartScene] Checking user existence...`,
        telegramId,
        function: 'startScene',
        step: 'check_user',
      })
      const userDetails = await getUserDetails(telegramId)
      logger.info({
        message: `[StartScene] User check result: Exists=${userDetails.isExist}`,
        telegramId,
        function: 'startScene',
        step: 'check_user_result',
        exists: userDetails.isExist,
      })

      if (!userDetails.isExist) {
        logger.info({
          message: `[StartScene] User ${telegramId} is NEW. Starting creation process...`,
          telegramId,
          function: 'startScene',
          step: 'new_user_start',
        })
        // --- –õ–æ–≥–∏–∫–∞ –∏–∑ createUserStep ---
        const {
          username,
          id: telegram_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∏–∑ ctx.from
          first_name,
          last_name,
          is_bot,
          language_code,
        } = ctx.from! // –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ ctx.from –µ—Å—Ç—å

        const finalUsername = username || first_name || telegram_id.toString()
        const photo_url = getPhotoUrl(ctx, 1)
        const currentBotName = ctx.botInfo.username // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞

        let refCount = 0
        let referrerData: { user_id?: string; username?: string } = {}

        try {
          if (ctx.session.inviteCode) {
            logger.info({
              message: `[StartScene/CreateLogic] Found invite code: ${ctx.session.inviteCode}. Fetching referrer...`,
              telegramId,
              function: 'startScene',
              step: 'fetch_referrer',
            })
            const { count, userData } = await getReferalsCountAndUserData(
              ctx.session.inviteCode.toString()
            )
            refCount = count
            referrerData = userData || {}
            ctx.session.inviter = referrerData.user_id // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–∞–π—Ç–µ—Ä–∞
            logger.info({
              message: `[StartScene/CreateLogic] Referrer data fetched.`,
              telegramId,
              function: 'startScene',
              step: 'referrer_fetched',
              refCount,
              referrerUserId: referrerData.user_id,
              referrerUsername: referrerData.username,
            })

            if (ctx.session.inviter) {
              logger.info({
                message: `[StartScene/CreateLogic] Notifying referrer ${ctx.session.inviter}...`,
                telegramId,
                function: 'startScene',
                step: 'notify_referrer',
              })
              try {
                await ctx.telegram.sendMessage(
                  ctx.session.inviteCode,
                  isRussian(ctx)
                    ? `üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.\nüÜî –£—Ä–æ–≤–µ–Ω—å: ${refCount}`
                    : `üîó New user @${finalUsername} registered via your link.\nüÜî Level: ${refCount}`
                )
                logger.info({
                  message: `[StartScene/CreateLogic] Referrer notified.`,
                  telegramId,
                  function: 'startScene',
                  step: 'notify_referrer_success',
                })
              } catch (err) {
                logger.error({
                  message: `[StartScene/CreateLogic] FAILED to notify referrer ${ctx.session.inviter}`,
                  telegramId,
                  function: 'startScene',
                  error: err instanceof Error ? err.message : String(err),
                })
              }

              // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É (—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º) --- MUST HAVE
              try {
                await ctx.telegram.sendMessage(
                  '@neuro_blogger_pulse', // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—é–¥–∞
                  `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} (ID: ${telegram_id}) –ø–æ —Ä–µ—Ñ. –æ—Ç @${referrerData.username}`
                )
                logger.info({
                  message: `[StartScene/CreateLogic] General admin channel notified (@neuro_blogger_pulse, with ref).`,
                  telegramId,
                  function: 'startScene',
                  step: 'notify_general_admin_ref_success',
                })
              } catch (pulseErr) {
                logger.error({
                  message: `[StartScene/CreateLogic] FAILED to notify general admin channel @neuro_blogger_pulse (with ref)`,
                  telegramId,
                  function: 'startScene',
                  error:
                    pulseErr instanceof Error
                      ? pulseErr.message
                      : String(pulseErr),
                })
              }
              // --- –ö–û–ù–ï–¶ –û—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É ---
            }
          } else {
            logger.info({
              message: `[StartScene/CreateLogic] No invite code. Fetching user count...`,
              telegramId,
              function: 'startScene',
              step: 'fetch_user_count',
            })
            const { count } = await getReferalsCountAndUserData(
              telegram_id.toString()
            )
            refCount = count

            // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞) --- MUST HAVE
            try {
              await ctx.telegram.sendMessage(
                '@neuro_blogger_pulse', // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—é–¥–∞
                `[${currentBotName}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${finalUsername} (ID: ${telegram_id})`
              )
              logger.info({
                message: `[StartScene/CreateLogic] General admin channel notified (@neuro_blogger_pulse).`,
                telegramId,
                function: 'startScene',
                step: 'notify_general_admin_success',
              })
            } catch (pulseErr) {
              logger.error({
                message: `[StartScene/CreateLogic] FAILED to notify general admin channel @neuro_blogger_pulse`,
                telegramId,
                function: 'startScene',
                error:
                  pulseErr instanceof Error
                    ? pulseErr.message
                    : String(pulseErr),
              })
            }
            // --- –ö–û–ù–ï–¶ –û—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É ---
          }
        } catch (error) {
          logger.error({
            message: `[StartScene/CreateLogic] Error during notification/referrer check`,
            telegramId,
            function: 'startScene',
            error: error instanceof Error ? error.message : String(error),
          })
        }

        const userDataToCreate = {
          username: finalUsername,
          telegram_id: telegram_id.toString(),
          first_name: first_name || null,
          last_name: last_name || null,
          is_bot: is_bot || false,
          language_code: language_code || 'en',
          photo_url,
          chat_id: ctx.chat?.id || null,
          mode: 'clean',
          model: 'gpt-4-turbo',
          count: 0,
          aspect_ratio: '9:16',
          balance: 0,
          inviter: ctx.session.inviter || null,
          bot_name: currentBotName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
        }

        logger.info({
          message: `[StartScene/CreateLogic] Preparing to create user...`,
          telegramId,
          function: 'startScene',
          step: 'create_user_start',
          userData: JSON.stringify(userDataToCreate),
        })

        try {
          await createUser(userDataToCreate)
          logger.info({
            message: `[StartScene/CreateLogic] User created successfully.`,
            telegramId,
            function: 'startScene',
            step: 'create_user_success',
          })
          // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å–æ–∑–¥–∞–Ω–∏—è?
          // await ctx.reply(isRu ? '‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!' : '‚úÖ Your profile has been created!');
        } catch (error) {
          logger.error({
            message: `[StartScene/CreateLogic] FAILED to create user`,
            telegramId,
            function: 'startScene',
            error: error instanceof Error ? error.message : String(error),
          })
          await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
          )
          return ctx.scene.leave() // –í–´–•–û–î–ò–ú –∏–∑ —Å—Ü–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
        }
        logger.info({
          message: `[StartScene] User ${telegramId} created. Proceeding to welcome message...`,
          telegramId,
          function: 'startScene',
          step: 'new_user_created_continue',
        })
      } else {
        logger.info({
          message: `[StartScene] User ${telegramId} exists. Proceeding directly to welcome message...`,
          telegramId,
          function: 'startScene',
          step: 'existing_user_continue',
        })
      }
    } catch (error) {
      logger.error({
        message: `[StartScene] Error during user check/creation block`,
        telegramId,
        function: 'startScene',
        error: error instanceof Error ? error.message : String(error),
      })
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
      )
      return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    }
    // --- –ö–û–ù–ï–¶: –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

    // --- –ù–ê–ß–ê–õ–û: –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ StartScene (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ç—É—Ç–æ—Ä–∏–∞–ª) ---
    // –≠—Ç–∞ —á–∞—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–°–ï–ì–î–ê (–∏ –¥–ª—è –Ω–æ–≤—ã—Ö, –∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö)
    logger.info({
      message: 'üì° [StartScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      telegramId,
      function: 'startScene',
      bot_name: botName,
      step: 'fetching_translation',
    })

    const { translation, url } = await getTranslation({
      key: 'start',
      ctx,
      bot_name: botName,
    })

    logger.info({
      message: '‚úÖ [StartScene] –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω',
      telegramId,
      function: 'startScene',
      translationReceived: !!translation,
      imageUrlReceived: !!url,
      step: 'translation_received',
    })

    if (url && url.trim() !== '') {
      logger.info({
        message:
          'üñºÔ∏è [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é',
        telegramId,
        function: 'startScene',
        url,
        step: 'sending_welcome_image',
      })

      await ctx.replyWithPhoto(url, {
        caption: translation,
      })
    } else {
      logger.info({
        message: 'üìù [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        telegramId,
        function: 'startScene',
        step: 'sending_welcome_text',
      })

      await ctx.reply(translation, {
        parse_mode: 'Markdown',
      })
    }

    const tutorialUrl = BOT_URLS[botName]
    let replyKeyboard

    if (tutorialUrl) {
      logger.info({
        message: `üé¨ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName}`,
        telegramId,
        function: 'startScene',
        tutorialUrl,
        step: 'sending_tutorial',
      })

      const tutorialText = isRu
        ? `üé¨ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](${tutorialUrl}), –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å (–¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞), —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å prompt –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏—Å—å.`
        : `üé¨ Watch this [tutorial video](${tutorialUrl}) on how to create neurophotos in this bot.\n\nIn this video, you will learn how to train your model (Digital avatar body), create photos, and get a prompt from any photo that inspires you.`

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π`,
        telegramId,
        function: 'startScene',
        step: 'sending_tutorial_text_with_keyboard',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(tutorialText, {
        parse_mode: 'Markdown',
        reply_markup: replyKeyboard.reply_markup,
      })
    } else {
      logger.info({
        message: `‚ÑπÔ∏è [StartScene] –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª –¥–ª—è ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
        telegramId,
        function: 'startScene',
        step: 'tutorial_url_not_found',
      })

      replyKeyboard = Markup.keyboard([
        Markup.button.text(isRu ? levels[105].title_ru : levels[105].title_en),
        Markup.button.text(isRu ? levels[103].title_ru : levels[103].title_en),
      ]).resize()

      logger.info({
        message: `üì§ [StartScene] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è`,
        telegramId,
        function: 'startScene',
        step: 'sending_basic_menu',
        buttons: [
          isRu ? levels[105].title_ru : levels[105].title_en,
          isRu ? levels[103].title_ru : levels[103].title_en,
        ],
      })

      await ctx.reply(isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:' : 'Choose an action:', {
        reply_markup: replyKeyboard.reply_markup,
      })
    }

    logger.info({
      message: `üèÅ [StartScene] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Å—Ç–∞—Ä—Ç–∞`,
      telegramId,
      function: 'startScene',
      step: 'scene_leave',
    })

    return ctx.scene.leave()
  }
)
