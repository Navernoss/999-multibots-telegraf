import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import {
  handleSelectStars,
  handleBuySubscription,
  handleSelectRubAmount,
} from '@/handlers'
import { starAmounts } from '@/price/helpers/starAmounts'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, PASSWORD1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –°—Ç–∞—Ä–∞—è —Å—Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 * –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ó–≤–µ–∑–¥—ã –∏–ª–∏ –†—É–±–ª–∏).
 */
export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  logger.info('### paymentScene ROUTER ENTERED ###', {
    scene: ModeEnum.PaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
    session_subscription: ctx.session.subscription, // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å–µ—Å—Å–∏–∏
  })
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' : 'Select payment method:'

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–≤–µ–∑–¥–∞–º
    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'), // –ò–∑–º–µ–Ω–∏–ª —ç–º–æ–¥–∑–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      ],
      [
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    ]).resize()

    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
      // reply_markup: { remove_keyboard: true },
    })
  } catch (error: any) {
    logger.error(`‚ùå [${ModeEnum.PaymentScene}] Error in enter:`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
        : 'An error occurred. Please try entering again via the menu.'
    )
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    await ctx.scene.leave()
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –ó–≤–µ–∑–¥–∞–º–∏
paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Stars. Entering ${ModeEnum.StarPaymentScene}`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–π
  // ctx.session.subscription –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ)
  await ctx.scene.enter(ModeEnum.StarPaymentScene)
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏
paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ Rubles'], async ctx => {
  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Rubles. Entering ${ModeEnum.RublePaymentScene}`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
  // ctx.session.subscription –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
  await ctx.scene.enter(ModeEnum.RublePaymentScene)
})

// –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(`[${ModeEnum.PaymentScene}] Leaving scene via Main Menu button`, {
    telegram_id: ctx.from?.id,
  })
  await ctx.scene.enter(ModeEnum.MenuScene)
})

// –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ action (top_up_*, buy_sub_*), —Ç.–∫. –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ö

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
paymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.PaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore
    message_text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
      : 'Please select a payment method (‚≠êÔ∏è or üí≥) or return to the main menu.'
  )
  // –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–π —Å—Ü–µ–Ω–µ-—Ä–æ—É—Ç–µ—Ä–µ
})
