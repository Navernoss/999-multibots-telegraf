import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import {
  handleSelectStars,
  handleBuySubscription,
  handleSelectRubAmount,
} from '@/handlers'
import { starAmounts } from '@/price/helpers/starAmounts'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, PASSWORD1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –°—Ç–∞—Ä–∞—è —Å—Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 * –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ó–≤–µ–∑–¥—ã –∏–ª–∏ –†—É–±–ª–∏).
 */
export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  console.log(`[PaymentScene LOG] === ENTER Scene === (User: ${ctx.from?.id})`)
  logger.info('### paymentScene ENTERED ###', {
    scene: ModeEnum.PaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
    session_subscription: ctx.session.subscription, // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å–µ—Å—Å–∏–∏
  })
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' : 'Select payment method:'

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–≤–µ–∑–¥–∞–º
    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'), // –ò–∑–º–µ–Ω–∏–ª —ç–º–æ–¥–∑–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      ],
      [
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    ]).resize()

    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
      // reply_markup: { remove_keyboard: true },
    })
  } catch (error: any) {
    logger.error(`‚ùå [${ModeEnum.PaymentScene}] Error in enter:`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
        : 'An error occurred. Please try entering again via the menu.'
    )
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    await ctx.scene.leave()
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –ó–≤–µ–∑–¥–∞–º–∏
paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log(
    `[PaymentScene LOG] --- HEARS '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' --- (User: ${ctx.from?.id})`
  )
  console.log('[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏ triggered')
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription?.toLowerCase()
  console.log(
    '[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏. Session subscription:',
    subscription
  )
  try {
    if (subscription) {
      if (
        [
          'neurobase',
          'neuromeeting',
          'neuroblogger',
          'neurophoto',
          'neuromentor',
        ].includes(subscription)
      ) {
        console.log(
          `[PaymentScene LOG] Calling handleBuySubscription for known subscription: ${subscription}`
        )
        await handleBuySubscription({ ctx, isRu })
        await ctx.scene.leave()
        return
      } else if (subscription === 'stars') {
        console.log(
          `[PaymentScene LOG] Calling handleSelectStars for 'stars' subscription.`
        )
        await handleSelectStars({ ctx, isRu, starAmounts })
        await ctx.scene.leave()
        return
      }
    } else {
      console.log(
        `[PaymentScene LOG] Calling handleSelectStars (no subscription in session).`
      )
      await handleSelectStars({ ctx, isRu, starAmounts })
      await ctx.scene.leave()
      return
    }
  )
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ–π
  // ctx.session.subscription –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ)
  await ctx.scene.enter(ModeEnum.StarPaymentScene)
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏
paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ Rubles'], async ctx => {
  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Rubles. Entering ${ModeEnum.RublePaymentScene}`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—É—é —Å—Ü–µ–Ω—É
  // ctx.session.subscription –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
  await ctx.scene.enter(ModeEnum.RublePaymentScene)
})

// –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(`[${ModeEnum.PaymentScene}] Leaving scene via Main Menu button`, {
    telegram_id: ctx.from?.id,
  })
  await ctx.scene.enter(ModeEnum.MenuScene)
})

// –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ action (top_up_*, buy_sub_*), —Ç.–∫. –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ö

    try {
      await ctx.answerCbQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    } catch (e) {
      console.error('[PaymentScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback rub:', e)
    }

    // –ò—â–µ–º –æ–ø—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥
    const selectedOption = rubTopUpOptions.find(o => o.amountRub === amountRub)
    if (!selectedOption) {
      console.error(
        `[PaymentScene] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è ${amountRub} —Ä—É–±`
      )
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
          : 'An error occurred: invalid top-up amount.'
      )
      return ctx.scene.leave()
    }

    const stars = selectedOption.stars
    const userId = ctx.from?.id
    const invId = Math.floor(Math.random() * 1000000) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å—á–µ—Ç–∞
    const description = isRu
      ? `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${stars} –∑–≤–µ–∑–¥`
      : `Balance top-up for ${stars} stars`

    console.log(
      `[PaymentScene] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Robokassa URL –¥–ª—è ${amountRub} —Ä—É–± (${stars} –∑–≤–µ–∑–¥)`
    )
    const invoiceURL = await getInvoiceId(
      MERCHANT_LOGIN,
      amountRub,
      invId,
      description,
      PASSWORD1
    )

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING (–∏—Å–ø–æ–ª—å–∑—É–µ–º payments_v2)
    await setPayments({
      telegram_id: userId.toString(),
      OutSum: amountRub.toString(),
      InvId: invId.toString(),
      currency: 'RUB', // –í–∞–ª—é—Ç–∞ - –†—É–±–ª–∏
      stars: stars, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
      status: 'PENDING',
      payment_method: 'Robokassa',
      subscription: 'stars', // –¢–∏–ø - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–µ–∑–¥ (–∏–ª–∏ BALANCE_TOPUP?)
      bot_name,
      language: ctx.from?.language_code,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    const inlineKeyboard = [
      [
        {
          text: isRu ? `–û–ø–ª–∞—Ç–∏—Ç—å ${amountRub} ‚ÇΩ` : `Pay ${amountRub} RUB`,
          url: invoiceURL,
        },
      ],
    ]

    await ctx.reply(
      isRu
        ? `‚úÖ <b>–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω</b>\n–°—É–º–º–∞: ${amountRub} ‚ÇΩ (${stars} ‚≠êÔ∏è)\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Robokassa.`
        : `‚úÖ <b>Invoice created</b>\nAmount: ${amountRub} RUB (${stars} ‚≠êÔ∏è)\n\nClick the button below to proceed with payment via Robokassa.`,
      {
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
        parse_mode: 'HTML',
      }
    )
    console.log('[PaymentScene] Robokassa invoice message sent to user')
    return ctx.scene.leave()
  } catch (error) {
    console.error('[PaymentScene] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback top_up_rub:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ Robokassa.'
        : 'An error occurred while creating the Robokassa invoice.'
    )
    return ctx.scene.leave()
  }
})
