import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import {
  handleSelectStars,
  handleBuySubscription,
  handleSelectRubAmount,
} from '@/handlers'
import { starAmounts } from '@/price/helpers/starAmounts'
import { getInvoiceId } from '@/scenes/getRuBillWizard/helper'
import { MERCHANT_LOGIN, PASSWORD1 } from '@/config'
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { rubTopUpOptions } from '@/price/helpers/rubTopUpOptions'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

/**
 * –°—Ç–∞—Ä–∞—è —Å—Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
 * –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–ó–≤–µ–∑–¥—ã –∏–ª–∏ –†—É–±–ª–∏).
 */
export const paymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.PaymentScene
)

paymentScene.enter(async ctx => {
  console.log(`[PaymentScene LOG] === ENTER Scene === (User: ${ctx.from?.id})`)
  logger.info('### paymentScene ENTERED ###', {
    scene: ModeEnum.PaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
    session_subscription: ctx.session.subscription, // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ —Å–µ—Å—Å–∏–∏
  })
  const isRu = isRussian(ctx)
  try {
    const message = isRu ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:' : 'Select payment method:'

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∑–≤–µ–∑–¥–∞–º
    const keyboard = Markup.keyboard([
      [
        Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
        Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'), // –ò–∑–º–µ–Ω–∏–ª —ç–º–æ–¥–∑–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      ],
      [
        {
          text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
          web_app: {
            url: `https://telegram.org/blog/telegram-stars/${
              isRu ? 'ru' : 'en'
            }?ln=a`,
          },
        },
      ],
      [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')], // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    ]).resize()

    await ctx.reply(message, {
      reply_markup: keyboard.reply_markup,
      // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
      // reply_markup: { remove_keyboard: true },
    })
  } catch (error: any) {
    logger.error(`‚ùå [${ModeEnum.PaymentScene}] Error in enter:`, {
      error: error.message,
      stack: error.stack,
      telegram_id: ctx.from?.id,
    })
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
        : 'An error occurred. Please try entering again via the menu.'
    )
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
    await ctx.scene.leave()
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –ó–≤–µ–∑–¥–∞–º–∏
paymentScene.hears(['‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏', '‚≠êÔ∏è Stars'], async ctx => {
  console.log(
    `[PaymentScene LOG] --- HEARS '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' --- (User: ${ctx.from?.id})`
  )
  console.log('[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏ triggered')
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription?.toLowerCase()
  console.log(
    '[PaymentScene] Hears: ‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏. Session subscription:',
    subscription
  )
  try {
    if (subscription) {
      if (
        [
          'neurobase',
          'neuromeeting',
          'neuroblogger',
          'neurophoto',
          'neuromentor',
        ].includes(subscription)
      ) {
        console.log(
          `[PaymentScene LOG] Calling handleBuySubscription for known subscription: ${subscription}`
        )
        await handleBuySubscription({ ctx, isRu })
        return
      } else if (subscription === 'stars') {
        console.log(
          `[PaymentScene LOG] Calling handleSelectStars for 'stars' subscription.`
        )
        await handleSelectStars({ ctx, isRu, starAmounts })
        return
      }
    } else {
      console.log(
        `[PaymentScene LOG] Calling handleSelectStars (no subscription in session).`
      )
      await handleSelectStars({ ctx, isRu, starAmounts })
      return
    }
    logger.warn(
      `[${ModeEnum.PaymentScene}] Unknown or unhandled subscription type in 'Stars' handler: ${subscription}`,
      {
        telegram_id: ctx.from?.id,
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.'
        : 'An unexpected error occurred.'
    )
  } catch (error) {
    logger.error(
      `‚ùå [${ModeEnum.PaymentScene}] Error in Hears '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏':`,
      {
        error: error instanceof Error ? error.message : String(error),
        telegram_id: ctx.from?.id,
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–≤–µ–∑–¥.'
        : 'An error occurred while processing stars.'
    )
  }
})

// –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏
paymentScene.hears(['üí≥ –†—É–±–ª—è–º–∏', 'üí≥ Rubles'], async ctx => {
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º
  logger.info(
    `[${ModeEnum.PaymentScene}] User chose Rubles. Checking session before entering ${ModeEnum.RublePaymentScene}`,
    {
      telegram_id: ctx.from?.id,
      session_subscription: ctx.session.subscription, // –ß—Ç–æ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ
      session_selectedPayment: ctx.session.selectedPayment, // –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è rublePaymentScene
    }
  )
  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Ä—É–±–ª–µ–π. –õ–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ rublePaymentScene.enter –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.
  await ctx.scene.enter(ModeEnum.RublePaymentScene)
})

// –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
paymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(`[${ModeEnum.PaymentScene}] Leaving scene via Main Menu button`, {
    telegram_id: ctx.from?.id,
  })
  await ctx.scene.enter(ModeEnum.MainMenu)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
paymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.PaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore - –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ TextMessage
    text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
      : 'Please select a payment method (‚≠êÔ∏è or üí≥) or return to the main menu.',
    {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ –∏ –≤ enter
      reply_markup: Markup.keyboard([
        [
          Markup.button.text(isRu ? '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' : '‚≠êÔ∏è Stars'),
          Markup.button.text(isRu ? 'üí≥ –†—É–±–ª—è–º–∏' : 'üí≥ Rubles'),
        ],
        [
          {
            text: isRu ? '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' : 'What are stars‚ùì',
            web_app: {
              url: `https://telegram.org/blog/telegram-stars/${
                isRu ? 'ru' : 'en'
              }?ln=a`,
            },
          },
        ],
        [Markup.button.text(isRu ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu')],
      ]).resize().reply_markup,
    }
  )
})
