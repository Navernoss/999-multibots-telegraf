import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { getUserBalance } from '@/core/supabase'
import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
  calculateCostInStars,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
enum Mode {
  NeuroPhoto = 'neuro_photo',
  ImageToPrompt = 'image_to_prompt',
  ImageToVideo = 'image_to_video',
  TextToVideo = 'text_to_video',
  Speech = 'speech',
  TextToSpeech = 'text_to_speech',
  TextToImage = 'text_to_image',
  Voice = 'voice',
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–π
interface ConversionRates {
  costPerStarInDollars: number
  costPerStepInStars: number
  rublesToDollarsRate: number
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
export const conversionRates: ConversionRates = {
  costPerStarInDollars: 0.016,
  costPerStepInStars: 0.5,
  rublesToDollarsRate: 100,
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
const modeCosts: Record<Mode, number> = {
  [Mode.NeuroPhoto]: calculateCostInStars(0.12),
  [Mode.ImageToPrompt]: calculateCostInStars(0.03),
  [Mode.ImageToVideo]: calculateCostInStars(0.99),
  [Mode.TextToVideo]: calculateCostInStars(0.99),
  [Mode.Speech]: calculateCostInStars(0.12),
  [Mode.TextToSpeech]: calculateCostInStars(0.12),
  [Mode.TextToImage]: calculateCostInStars(0.048),
  [Mode.Voice]: calculateCostInStars(0.12),
}

export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  'checkBalanceScene'
)

checkBalanceScene.enter(async ctx => {
  console.log('üíµ CASE: checkBalanceScene')
  const isRu = ctx.from?.language_code === 'ru'
  const { userId } = getUserInfo(ctx)
  const currentBalance = await getUserBalance(userId)
  const mode = ctx.session.mode as Mode
  const cost = modeCosts[mode] || 0 // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  console.log('‚≠êÔ∏è cost:', cost)

  await sendBalanceMessage(ctx, currentBalance, cost, isRu)

  if (currentBalance < cost) {
    await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
    return ctx.scene.leave()
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  switch (mode) {
    case Mode.NeuroPhoto:
      return ctx.scene.enter('neuroPhotoWizard')
    case Mode.TextToImage:
      return ctx.scene.enter('textToImageWizard')
    case Mode.Voice:
      return ctx.scene.enter('voiceAvatarWizard')
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    default:
      return ctx.scene.leave()
  }
})
