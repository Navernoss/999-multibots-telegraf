import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'

import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import {
  ModeEnum,
  CostCalculationParams,
  CostCalculationResult,
} from '@/interfaces/modes'
import { starCost, SYSTEM_CONFIG } from '@/price/constants'
import { logger } from '@/utils/logger'
import { getUserDetails } from '@/core/supabase'
import { SubscriptionType } from '@/interfaces/subscription.interface'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export interface UserStatus {
  stars: number // –ë–∞–ª–∞–Ω—Å
  level: number
  subscriptionType: SubscriptionType | null // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (null –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
  isSubscriptionActive: boolean // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  isExist: boolean // –ù–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}

export function calculateCostInStars(costInDollars: number): number {
  return costInDollars / starCost
}

export type CostCalculationParamsInternal = CostCalculationParams

type BaseCosts = {
  [key in ModeEnum | 'neuro_photo_2']?: number
}

export const BASE_COSTS: BaseCosts = {
  [ModeEnum.NeuroPhoto]: 0.08,
  [ModeEnum.NeuroPhotoV2]: 0.14,
  [ModeEnum.NeuroAudio]: 0.12,
  [ModeEnum.ImageToPrompt]: 0.03,
  [ModeEnum.Avatar]: 0,
  [ModeEnum.ChatWithAvatar]: 0,
  [ModeEnum.SelectModel]: 0,
  [ModeEnum.SelectAiTextModel]: 0,
  [ModeEnum.Voice]: 0.9,
  [ModeEnum.TextToSpeech]: 0.12,
  [ModeEnum.ImageToVideo]: 0,
  [ModeEnum.TextToVideo]: 0,
  [ModeEnum.TextToImage]: 0.08,
  [ModeEnum.LipSync]: 0.9,
  [ModeEnum.VoiceToText]: 0.08,
  [ModeEnum.DigitalAvatarBody]: 0.5,
  [ModeEnum.DigitalAvatarBodyV2]: 0.7,
}

export type CostValue = number | ((steps: number) => number)
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞

export function calculateModeCost(
  params: CostCalculationParams
): CostCalculationResult {
  const { mode, steps, numImages = 1 } = params

  try {
    let stars = 0

    let normalizedMode = mode
    if (mode === 'neuro_photo_2') {
      normalizedMode = ModeEnum.NeuroPhotoV2
      logger.info({
        message: 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–∏–∞—Å —Ä–µ–∂–∏–º–∞',
        description: 'Mode alias used',
        originalMode: mode,
        normalizedMode,
      })
    }

    const baseCostInDollars = BASE_COSTS[normalizedMode as keyof BaseCosts]

    if (baseCostInDollars === undefined) {
      logger.error({
        message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º',
        description: 'Unknown mode in cost calculation',
        mode,
        normalizedMode,
      })
      stars = 0
    } else {
      // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å —à–∞–≥–∞–º–∏
      if (
        (normalizedMode === ModeEnum.DigitalAvatarBody ||
          normalizedMode === ModeEnum.DigitalAvatarBodyV2) &&
        steps
      ) {
        // –ü—Ä–∏–º–µ—Ä: —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∞–≥–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É)
        // –î–æ–ø—É—Å—Ç–∏–º, –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞ 1 —à–∞–≥
        stars = (baseCostInDollars / starCost) * steps * numImages
      } else {
        stars = (baseCostInDollars / starCost) * numImages
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    if (mode === ModeEnum.VoiceToText) {
      stars = 5
    }

    stars = parseFloat(stars.toFixed(2))
    const dollars = parseFloat((stars * starCost).toFixed(2))
    const rubles = parseFloat((dollars * SYSTEM_CONFIG.interestRate).toFixed(2))

    return { stars, dollars, rubles }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Error during cost calculation',
      error: error instanceof Error ? error.message : 'Unknown error',
      mode,
      steps,
      numImages,
    })
    throw error
  }
}

export const modeCosts: Record<string, number | ((param?: any) => number)> = {
  [ModeEnum.DigitalAvatarBody]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBody, steps }).stars,
  [ModeEnum.DigitalAvatarBodyV2]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBodyV2, steps }).stars,
  [ModeEnum.NeuroPhoto]: calculateModeCost({ mode: ModeEnum.NeuroPhoto }).stars,
  [ModeEnum.NeuroPhotoV2]: calculateModeCost({ mode: ModeEnum.NeuroPhotoV2 })
    .stars,
  [ModeEnum.NeuroAudio]: calculateModeCost({ mode: ModeEnum.NeuroAudio }).stars,
  neuro_photo_2: calculateModeCost({ mode: 'neuro_photo_2' }).stars,
  [ModeEnum.ImageToPrompt]: calculateModeCost({ mode: ModeEnum.ImageToPrompt })
    .stars,
  [ModeEnum.Avatar]: calculateModeCost({ mode: ModeEnum.Avatar }).stars,
  [ModeEnum.ChatWithAvatar]: calculateModeCost({
    mode: ModeEnum.ChatWithAvatar,
  }).stars,
  [ModeEnum.SelectModel]: calculateModeCost({ mode: ModeEnum.SelectModel })
    .stars,
  [ModeEnum.SelectAiTextModel]: calculateModeCost({
    mode: ModeEnum.SelectAiTextModel,
  }).stars,
  [ModeEnum.Voice]: calculateModeCost({ mode: ModeEnum.Voice }).stars,
  [ModeEnum.TextToSpeech]: calculateModeCost({ mode: ModeEnum.TextToSpeech })
    .stars,
  [ModeEnum.ImageToVideo]: calculateModeCost({ mode: ModeEnum.ImageToVideo })
    .stars,
  [ModeEnum.TextToVideo]: calculateModeCost({ mode: ModeEnum.TextToVideo })
    .stars,
  [ModeEnum.TextToImage]: calculateModeCost({ mode: ModeEnum.TextToImage })
    .stars,
  [ModeEnum.LipSync]: calculateModeCost({ mode: ModeEnum.LipSync }).stars,
  [ModeEnum.VoiceToText]: calculateModeCost({ mode: ModeEnum.VoiceToText })
    .stars,
}
// –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
export const minCost = Math.min(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const maxCost = Math.max(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.CheckBalanceScene
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function getCostValue(cost: number | ((param?: any) => number)): number {
  return typeof cost === 'function' ? cost() : cost
}

// ==================================================================
// ================== –í–ê–ñ–ù–´–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô! –û–ü–ò–°–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ô –õ–û–ì–ò–ö–ò! ===
// ==================================================================
// –°—Ü–µ–Ω–∞ `checkBalanceScene` - –®–õ–Æ–ó –î–û–°–¢–£–ü–ê –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
// –û–Ω–∞ –í–´–ó–´–í–ê–ï–¢–°–Ø –ü–ï–†–ï–î –õ–Æ–ë–û–ô —Ñ—É–Ω–∫—Ü–∏–µ–π, —Ç—Ä–µ–±—É—é—â–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
// –ê–¥–º–∏–Ω—ã –ù–ï –ò–ú–ï–Æ–¢ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ –æ–±—â–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö.
//
// –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –í–ù–£–¢–†–ò –°–¶–ï–ù–´ (–í–µ—Ä—Å–∏—è "–ü–æ–¥–ø–∏—Å–∫–∞ –ò –ë–∞–ª–∞–Ω—Å –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"):
// –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (`telegramId`) –∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (`mode`).
// –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –í—ã–∑–≤–∞—Ç—å `getUserDetails(telegramId)`.
// –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (`!userDetails.isExist`) -> –°–æ–æ–±—â–µ–Ω–∏–µ, –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–û–î–ü–ò–°–ö–ò: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ (`!userDetails.isSubscriptionActive`) -> –õ–æ–≥ (–í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ–∫—É—â–∏–π –ª–æ–≥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!), –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// --- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ï–°–õ–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–¢–¨ –ê–ö–¢–ò–í–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê ---
// –®–ê–ì 5: –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ò –ë–ê–õ–ê–ù–°–ê: –ü–æ–ª—É—á–∏—Ç—å `currentBalance` –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å `costValue` –¥–ª—è `mode`.
// –®–ê–ì 6: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `costValue > 0`, –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å (`sendBalanceMessage`). (–í–ù–ò–ú–ê–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ).
// –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `–±–∞–ª–∞–Ω—Å < costValue` -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥ (`sendInsufficientStarsMessage`), –í–´–•–û–î –∏–∑ —Å—Ü–µ–Ω—ã (`ctx.scene.leave()`).
// –®–ê–ì 8: –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù –ò –ü–ï–†–ï–•–û–î: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ò –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –ò –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å -> –õ–æ–≥ —É—Å–ø–µ—Ö–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (`enterTargetScene`).
// –®–ê–ì 9: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–∞—Ö 2-8 –≤–µ–¥–µ—Ç –∫ –≤—ã—Ö–æ–¥—É –∏–∑ —Å—Ü–µ–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (`ctx.scene.leave()`).
//
// –í–´–í–û–î: –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –Ω–∞–ª–∏—á–∏—è –ê–ö–¢–ò–í–ù–û–ô –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –î–û–°–¢–ê–¢–û–ß–ù–û–ì–û –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
// ==================================================================
// ==================================================================

checkBalanceScene.enter(async ctx => {
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [CheckBalanceScene] –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
    telegramId,
    function: 'checkBalanceScene.enter',
    sessionMode: ctx.session?.mode,
    sessionData: JSON.stringify(ctx.session || {}),
  })

  console.log('üíµ CASE: checkBalanceScene')
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–µ–∂–∏–º
  const { telegramId: userId } = getUserInfo(ctx)
  const mode = ctx.session.mode as ModeEnum
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: `[CheckBalanceScene] –ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ–∂–∏–º: ${mode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`,
    telegramId: userId,
    mode,
    language: isRu ? 'ru' : 'other',
    function: 'checkBalanceScene.enter',
    step: 'identifying_user_and_mode',
  })

  try {
    // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    logger.info({
      message: `[CheckBalanceScene] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'fetching_user_data',
    })

    const userDetails = await getUserDetails(telegramId)

    logger.info({
      message: `[CheckBalanceScene] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'user_data_fetched',
      userExists: userDetails.isExist,
      subscriptionActive: userDetails.isSubscriptionActive,
      subscriptionType: userDetails.subscriptionType,
      stars: userDetails.stars,
    })

    // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
    if (!userDetails.isExist) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'user_not_found',
        result: 'redirect_to_start',
      })
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.'
          : '‚ùå Could not find your profile. Please restart the bot with /start.'
      )
      return ctx.scene.enter(ModeEnum.StartScene) // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    if (!userDetails.isSubscriptionActive) {
      logger.warn({
        message: `[CheckBalanceScene] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ù–ï –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ StartScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_failed',
        subscriptionType: userDetails.subscriptionType,
        mode,
        result: 'redirect_to_start',
      })
      return ctx.scene.enter(ModeEnum.StartScene)
    } else {
      logger.info({
        message: `[CheckBalanceScene] –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}. –¢–∏–ø: ${userDetails.subscriptionType}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'subscription_check_passed',
        subscriptionType: userDetails.subscriptionType,
        mode,
      })
    }

    // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
    const currentBalance = userDetails.stars
    const cost = modeCosts[mode] || 0
    const costValue = getCostValue(cost)

    logger.info({
      message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'balance_check',
      mode,
      cost: costValue,
      balance: currentBalance,
      hasEnoughBalance: currentBalance >= costValue,
    })

    // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
    if (costValue > 0) {
      logger.info({
        message: `[CheckBalanceScene] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'displaying_balance_info',
        mode,
        cost: costValue,
        balance: currentBalance,
      })

      // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ userDetails
      await sendBalanceMessage(
        ctx,
        currentBalance,
        costValue,
        isRu,
        ctx.botInfo.username
      )
    }

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
    if (currentBalance < costValue) {
      logger.warn({
        message: `[CheckBalanceScene] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'insufficient_balance',
        mode,
        cost: costValue,
        balance: currentBalance,
        deficit: costValue - currentBalance,
        result: 'access_denied',
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥
      await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      logger.info({
        message: `[CheckBalanceScene] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'scene_leave',
        reason: 'insufficient_balance',
      })
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
    logger.info({
      message: `[CheckBalanceScene] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'all_checks_passed',
      mode,
      cost: costValue,
      balance: currentBalance,
      result: 'access_granted',
    })

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–ö–õ–ê (–ü–û–ü–´–¢–ö–ê 3 - —Å console.log) ---
    const targetMode = mode // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–≥–æ–≤
    const comparisonMode = ModeEnum.SubscriptionScene
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const areModesEqual = String(targetMode) === String(comparisonMode)

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    console.log(
      `[DEBUG CheckBalanceScene Enter] CHECKING LOOP: targetMode='${targetMode}' (type: ${typeof targetMode}), comparisonMode='${comparisonMode}' (type: ${typeof comparisonMode}), areEqual=${areModesEqual}`
    )
    logger.info({
      message: `[CheckBalanceScene] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Ü–∏–∫–ª–∞: mode === ModeEnum.SubscriptionScene`,
      telegramId,
      function: 'checkBalanceScene.enter',
      step: 'loop_condition_check',
      modeValue: targetMode,
      modeEnumType: typeof comparisonMode,
      modeEnumValue: comparisonMode,
      comparisonResult: areModesEqual,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å—Ü–µ–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (areModesEqual) {
      // –ï—Å–ª–∏ –î–ê, –≤—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é
      console.log(
        `[DEBUG CheckBalanceScene Enter] Condition TRUE. Entering SubscriptionScene directly.`
      )
      logger.info({
        message: `[CheckBalanceScene] –£—Å–ª–æ–≤–∏–µ —Ü–∏–∫–ª–∞ –ò–°–¢–ò–ù–ù–û. –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ SubscriptionScene, –º–∏–Ω—É—è enterTargetScene`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'direct_enter_subscription',
        targetScene: targetMode,
      })
      return ctx.scene.enter(ModeEnum.SubscriptionScene) // <--- –ü—Ä—è–º–æ–π –≤—Ö–æ–¥
    } else {
      // –ï—Å–ª–∏ –ù–ï–¢, –≤—ã–∑—ã–≤–∞–µ–º enterTargetScene
      console.log(
        `[DEBUG CheckBalanceScene Enter] Condition FALSE. Calling enterTargetScene for mode: ${targetMode}`
      )
      logger.info({
        message: `[CheckBalanceScene] –£—Å–ª–æ–≤–∏–µ —Ü–∏–∫–ª–∞ –õ–û–ñ–ù–û. –í—ã–∑–æ–≤ enterTargetScene.`,
        telegramId,
        function: 'checkBalanceScene.enter',
        step: 'entering_target_scene_fallback',
        targetScene: targetMode,
      })
      return enterTargetScene(ctx, targetMode) // <--- –í—ã–∑–æ–≤ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }
  } catch (error) {
    console.error('[DEBUG CheckBalanceScene Enter] Error caught:', error) // –î–æ–±–∞–≤–ª–µ–Ω–æ
    logger.error({
      message: `[CheckBalanceScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞`,
      telegramId,
      function: 'checkBalanceScene.enter',
      mode: ctx.session?.mode,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    return ctx.scene.leave()
  }
})

/**
 * @function enterTargetScene
 * @description –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ (`ctx.session.mode`).
 *              –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ `checkBalanceScene`.
 * @param {MyContext} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf.
 * @param {ModeEnum} mode - –†–µ–∂–∏–º, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É.
 */
export async function enterTargetScene(ctx: MyContext, mode: ModeEnum) {
  const telegramId = ctx.from?.id.toString()
  let targetScene: ModeEnum | undefined // <--- –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–û–ô
  let result: any // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ctx.scene.enter

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (String(mode) === String(ModeEnum.SubscriptionScene)) {
      console.log(
        `[DEBUG enterTargetScene] Explicitly handling SubscriptionScene. Entering...`
      )
      logger.info({
        message: `[enterTargetScene] –Ø–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SubscriptionScene`,
        telegramId,
        function: 'enterTargetScene',
        targetScene: mode,
        step: 'explicit_handle_subscription',
      })
      await ctx.scene.enter(ModeEnum.SubscriptionScene)
      return // –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    logger.info({
      message: `[enterTargetScene] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ —Å—Ü–µ–Ω—É: ${mode}`,
      telegramId,
      function: 'enterTargetScene',
      targetScene: mode, // –ò—Å–ø–æ–ª—å–∑—É–µ–º mode –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É
      step: 'prepare_switch',
    })

    // TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ ModeEnum –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    switch (mode) {
      case ModeEnum.NeuroPhoto:
        targetScene = ModeEnum.NeuroPhoto
        break
      case ModeEnum.NeuroPhotoV2:
        targetScene = ModeEnum.NeuroPhotoV2
        break
      case ModeEnum.NeuroAudio:
        targetScene = ModeEnum.NeuroAudio
        break
      case ModeEnum.ImageToPrompt:
        targetScene = ModeEnum.ImageToPrompt
        break
      case ModeEnum.Avatar:
        targetScene = ModeEnum.Avatar
        break
      case ModeEnum.ChatWithAvatar:
        targetScene = ModeEnum.ChatWithAvatar
        break
      case ModeEnum.SelectModel:
        targetScene = ModeEnum.SelectModel
        break
      case ModeEnum.SelectAiTextModel:
        targetScene = ModeEnum.SelectAiTextModel
        break
      case ModeEnum.Voice:
        targetScene = ModeEnum.Voice
        break
      case ModeEnum.TextToSpeech:
        targetScene = ModeEnum.TextToSpeech
        break
      case ModeEnum.ImageToVideo:
        targetScene = ModeEnum.ImageToVideo
        break
      case ModeEnum.TextToVideo:
        targetScene = ModeEnum.TextToVideo
        break
      case ModeEnum.TextToImage:
        targetScene = ModeEnum.TextToImage
        break
      case ModeEnum.LipSync:
        targetScene = ModeEnum.LipSync
        break
      case ModeEnum.VoiceToText:
        targetScene = ModeEnum.VoiceToText
        break
      case ModeEnum.DigitalAvatarBody:
        targetScene = ModeEnum.DigitalAvatarBody
        break
      case ModeEnum.DigitalAvatarBodyV2:
        targetScene = ModeEnum.DigitalAvatarBodyV2
        break
      // –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –†–ï–ñ–ò–ú–ê –ü–û–î–ü–ò–°–ö–ò/–û–ü–õ–ê–¢–´
      case ModeEnum.Subscribe: // –∏–ª–∏ 'subscribe', –µ—Å–ª–∏ ModeEnum –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      case ModeEnum.PaymentScene:
        targetScene = ModeEnum.PaymentScene // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã
        break
      case ModeEnum.Help:
        logger.info({
          message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –ø–æ–º–æ—â–∏`,
          telegramId,
          function: 'enterTargetScene',
          fromMode: mode,
          toScene: 'helpScene',
        })
        result = await ctx.scene.enter('helpScene')
        break
      case ModeEnum.MainMenu:
        logger.info({
          message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é`,
          telegramId,
          function: 'enterTargetScene',
          fromMode: mode,
          toScene: ModeEnum.MainMenu,
        })
        result = await ctx.scene.enter(ModeEnum.MainMenu)
        break
      case ModeEnum.StartScene:
        logger.info({
          message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —Å—Ç–∞—Ä—Ç–∞`,
          telegramId,
          function: 'enterTargetScene',
          fromMode: mode,
          toScene: ModeEnum.StartScene,
        })
        result = await ctx.scene.enter(ModeEnum.StartScene)
        break
      case ModeEnum.SubscriptionScene:
        logger.info({
          message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏`,
          telegramId,
          function: 'enterTargetScene',
          fromMode: mode,
          toScene: ModeEnum.SubscriptionScene,
        })
        result = await ctx.scene.enter(ModeEnum.SubscriptionScene)
        break
      default:
        logger.error({
          message: `[enterTargetScene] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${mode}. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`,
          telegramId,
          function: 'enterTargetScene',
          mode,
          step: 'unknown_mode_error',
          result: 'fallback_to_start',
        })
        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        //await ctx.scene.enter(ModeEnum.MenuScene)
        await ctx.scene.enter(ModeEnum.StartScene) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
        return // –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    }

    if (targetScene) {
      logger.info({
        message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É ${targetScene}`,
        telegramId,
        function: 'enterTargetScene',
        targetScene,
        step: 'entering_scene',
      })
      await ctx.scene.enter(targetScene)
    } else {
      // –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ switch,
      // –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      logger.error({
        message: `[enterTargetScene] –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: ${mode}. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`,
        telegramId,
        function: 'enterTargetScene',
        mode,
        step: 'target_scene_undefined_error',
        result: 'fallback_to_start',
      })
      //await ctx.scene.enter(ModeEnum.MenuScene)
      await ctx.scene.enter(ModeEnum.StartScene) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
    }

    logger.info({
      message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É ${mode} –∑–∞–≤–µ—Ä—à–µ–Ω`,
      telegramId,
      function: 'enterTargetScene',
      targetScene: mode, // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      step: 'switch_completed',
      result: 'completed',
    })
  } catch (error) {
    console.error('[DEBUG enterTargetScene] Error caught:', error) // –î–æ–±–∞–≤–ª–µ–Ω–æ
    logger.error({
      message: `[enterTargetScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É ${mode}`,
      telegramId,
      function: 'enterTargetScene',
      mode,
      step: 'transition_error',
      error: error instanceof Error ? error.message : String(error),
    })
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try {
      //await ctx.scene.enter(ModeEnum.MenuScene)
      await ctx.scene.enter(ModeEnum.StartScene) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ
    } catch (fallbackError) {
      logger.error({
        message: `[enterTargetScene] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–∞—Ç–∞ –≤ StartScene`,
        telegramId,
        function: 'enterTargetScene',
        mode,
        step: 'fallback_scene_error',
        error:
          fallbackError instanceof Error
            ? fallbackError.message
            : String(fallbackError),
      })
      return ctx.scene.leave() // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ - –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤—Å–µ—Ö —Å—Ü–µ–Ω
    } finally {
      console.log(
        `[DEBUG enterTargetScene] <=== Function finished for mode: ${mode}`
      ) // –î–æ–±–∞–≤–ª–µ–Ω–æ
      logger.info({
        message: `[enterTargetScene] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É ${mode} –∑–∞–≤–µ—Ä—à–µ–Ω`,
        telegramId,
        function: 'enterTargetScene',
        targetScene: mode,
        step: 'switch_completed',
        result: 'success',
      })
    }
  }
}
