import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'

import {
  sendInsufficientStarsMessage,
  sendBalanceMessage,
} from '@/price/helpers'
import { getUserInfo } from '@/handlers/getUserInfo'
import {
  ModeEnum,
  CostCalculationParams,
  CostCalculationResult,
} from '@/interfaces/modes'
import { starCost, SYSTEM_CONFIG } from '@/price/constants'
import { logger } from '@/utils/logger'
import { getUserDetails } from '@/core/supabase'
import { SubscriptionType } from '@/interfaces/subscription.interface'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
export interface UserStatus {
  stars: number // –ë–∞–ª–∞–Ω—Å
  level: number
  subscriptionType: SubscriptionType | null // –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (null –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)
  isSubscriptionActive: boolean // –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
  isExist: boolean // –ù–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
}

export function calculateCostInStars(costInDollars: number): number {
  return costInDollars / starCost
}

export type CostCalculationParamsInternal = CostCalculationParams

type BaseCosts = {
  [key in ModeEnum | 'neuro_photo_2']?: number
}

export const BASE_COSTS: BaseCosts = {
  [ModeEnum.NeuroPhoto]: 0.08,
  [ModeEnum.NeuroPhotoV2]: 0.14,
  [ModeEnum.NeuroAudio]: 0.12,
  [ModeEnum.ImageToPrompt]: 0.03,
  [ModeEnum.Avatar]: 0,
  [ModeEnum.ChatWithAvatar]: 0,
  [ModeEnum.SelectModel]: 0,
  [ModeEnum.SelectAiTextModel]: 0,
  [ModeEnum.Voice]: 0.9,
  [ModeEnum.TextToSpeech]: 0.12,
  [ModeEnum.ImageToVideo]: 0,
  [ModeEnum.TextToVideo]: 0,
  [ModeEnum.TextToImage]: 0.08,
  [ModeEnum.LipSync]: 0.9,
  [ModeEnum.VoiceToText]: 0.08,
  [ModeEnum.DigitalAvatarBody]: 0.5,
  [ModeEnum.DigitalAvatarBodyV2]: 0.7,
}

export type CostValue = number | ((steps: number) => number)
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞

export function calculateModeCost(
  params: CostCalculationParams
): CostCalculationResult {
  const { mode, steps, numImages = 1 } = params

  try {
    let stars = 0

    let normalizedMode = mode
    if (mode === 'neuro_photo_2') {
      normalizedMode = ModeEnum.NeuroPhotoV2
      logger.info({
        message: 'üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–∏–∞—Å —Ä–µ–∂–∏–º–∞',
        description: 'Mode alias used',
        originalMode: mode,
        normalizedMode,
      })
    }

    const baseCostInDollars = BASE_COSTS[normalizedMode as keyof BaseCosts]

    if (baseCostInDollars === undefined) {
      logger.error({
        message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º',
        description: 'Unknown mode in cost calculation',
        mode,
        normalizedMode,
      })
      stars = 0
    } else {
      // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å —à–∞–≥–∞–º–∏
      if (
        (normalizedMode === ModeEnum.DigitalAvatarBody ||
          normalizedMode === ModeEnum.DigitalAvatarBodyV2) &&
        steps
      ) {
        // –ü—Ä–∏–º–µ—Ä: —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∞–≥–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É)
        // –î–æ–ø—É—Å—Ç–∏–º, –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞ 1 —à–∞–≥
        stars = (baseCostInDollars / starCost) * steps * numImages
      } else {
        stars = (baseCostInDollars / starCost) * numImages
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
    if (mode === ModeEnum.VoiceToText) {
      stars = 5
    }

    stars = parseFloat(stars.toFixed(2))
    const dollars = parseFloat((stars * starCost).toFixed(2))
    const rubles = parseFloat((dollars * SYSTEM_CONFIG.interestRate).toFixed(2))

    return { stars, dollars, rubles }
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
      description: 'Error during cost calculation',
      error: error instanceof Error ? error.message : 'Unknown error',
      mode,
      steps,
      numImages,
    })
    throw error
  }
}

export const modeCosts: Record<string, number | ((param?: any) => number)> = {
  [ModeEnum.DigitalAvatarBody]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBody, steps }).stars,
  [ModeEnum.DigitalAvatarBodyV2]: (steps: number) =>
    calculateModeCost({ mode: ModeEnum.DigitalAvatarBodyV2, steps }).stars,
  [ModeEnum.NeuroPhoto]: calculateModeCost({ mode: ModeEnum.NeuroPhoto }).stars,
  [ModeEnum.NeuroPhotoV2]: calculateModeCost({ mode: ModeEnum.NeuroPhotoV2 })
    .stars,
  [ModeEnum.NeuroAudio]: calculateModeCost({ mode: ModeEnum.NeuroAudio }).stars,
  neuro_photo_2: calculateModeCost({ mode: 'neuro_photo_2' }).stars,
  [ModeEnum.ImageToPrompt]: calculateModeCost({ mode: ModeEnum.ImageToPrompt })
    .stars,
  [ModeEnum.Avatar]: calculateModeCost({ mode: ModeEnum.Avatar }).stars,
  [ModeEnum.ChatWithAvatar]: calculateModeCost({
    mode: ModeEnum.ChatWithAvatar,
  }).stars,
  [ModeEnum.SelectModel]: calculateModeCost({ mode: ModeEnum.SelectModel })
    .stars,
  [ModeEnum.SelectAiTextModel]: calculateModeCost({
    mode: ModeEnum.SelectAiTextModel,
  }).stars,
  [ModeEnum.Voice]: calculateModeCost({ mode: ModeEnum.Voice }).stars,
  [ModeEnum.TextToSpeech]: calculateModeCost({ mode: ModeEnum.TextToSpeech })
    .stars,
  [ModeEnum.ImageToVideo]: calculateModeCost({ mode: ModeEnum.ImageToVideo })
    .stars,
  [ModeEnum.TextToVideo]: calculateModeCost({ mode: ModeEnum.TextToVideo })
    .stars,
  [ModeEnum.TextToImage]: calculateModeCost({ mode: ModeEnum.TextToImage })
    .stars,
  [ModeEnum.LipSync]: calculateModeCost({ mode: ModeEnum.LipSync }).stars,
  [ModeEnum.VoiceToText]: calculateModeCost({ mode: ModeEnum.VoiceToText })
    .stars,
}
// –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
export const minCost = Math.min(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const maxCost = Math.max(
  ...Object.values(modeCosts).map(cost =>
    typeof cost === 'function' ? cost() : cost
  )
)
export const checkBalanceScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.CheckBalanceScene
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function getCostValue(cost: number | ((param?: any) => number)): number {
  return typeof cost === 'function' ? cost() : cost
}

// ==================================================================
// ================== –í–ê–ñ–ù–´–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô! –û–ü–ò–°–ê–ù–ò–ï –¢–ï–ö–£–©–ï–ô –õ–û–ì–ò–ö–ò! ===
// ==================================================================
// –°—Ü–µ–Ω–∞ `checkBalanceScene` - –®–õ–Æ–ó –î–û–°–¢–£–ü–ê –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.
// –û–Ω–∞ –í–´–ó–´–í–ê–ï–¢–°–Ø –ü–ï–†–ï–î –õ–Æ–ë–û–ô —Ñ—É–Ω–∫—Ü–∏–µ–π, —Ç—Ä–µ–±—É—é—â–µ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
// –ê–¥–º–∏–Ω—ã –ù–ï –ò–ú–ï–Æ–¢ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ –æ–±—â–∏—Ö –æ—Å–Ω–æ–≤–∞–Ω–∏—è—Ö.
//
// –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –í–ù–£–¢–†–ò –°–¶–ï–ù–´ (–í–µ—Ä—Å–∏—è "–ü–æ–¥–ø–∏—Å–∫–∞ –ò –ë–∞–ª–∞–Ω—Å –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"):
// –®–ê–ì 1: –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (`telegramId`) –∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (`mode`).
// –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –í—ã–∑–≤–∞—Ç—å `getUserDetails(telegramId)`.
// –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (`!userDetails.isExist`) -> –°–æ–æ–±—â–µ–Ω–∏–µ, –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–û–î–ü–ò–°–ö–ò: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ (`!userDetails.isSubscriptionActive`) -> –õ–æ–≥ (–í–ù–ò–ú–ê–ù–ò–ï: —Ç–µ–∫—É—â–∏–π –ª–æ–≥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!), –í–´–•–û–î (–ø–µ—Ä–µ—Ö–æ–¥ –≤ `StartScene`).
// --- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ï–°–õ–ò –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ï–°–¢–¨ –ê–ö–¢–ò–í–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê ---
// –®–ê–ì 5: –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –ò –ë–ê–õ–ê–ù–°–ê: –ü–æ–ª—É—á–∏—Ç—å `currentBalance` –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å `costValue` –¥–ª—è `mode`.
// –®–ê–ì 6: –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `costValue > 0`, –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å (`sendBalanceMessage`). (–í–ù–ò–ú–ê–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ).
// –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–ê–¢–û–ß–ù–û–°–¢–ò –ë–ê–õ–ê–ù–°–ê: –ï—Å–ª–∏ `–±–∞–ª–∞–Ω—Å < costValue` -> –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥ (`sendInsufficientStarsMessage`), –í–´–•–û–î –∏–∑ —Å—Ü–µ–Ω—ã (`ctx.scene.leave()`).
// –®–ê–ì 8: –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù –ò –ü–ï–†–ï–•–û–î: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ò –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –ò –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å -> –õ–æ–≥ —É—Å–ø–µ—Ö–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ (`enterTargetScene`).
// –®–ê–ì 9: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –õ—é–±–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–∞—Ö 2-8 –≤–µ–¥–µ—Ç –∫ –≤—ã—Ö–æ–¥—É –∏–∑ —Å—Ü–µ–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (`ctx.scene.leave()`).
//
// –í–´–í–û–î: –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –Ω–∞–ª–∏—á–∏—è –ê–ö–¢–ò–í–ù–û–ô –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –î–û–°–¢–ê–¢–û–ß–ù–û–ì–û –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏.
// ==================================================================
// ==================================================================

checkBalanceScene.enter(async ctx => {
  console.log('üíµ CASE: checkBalanceScene')
  // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –∏ —Ä–µ–∂–∏–º
  const { telegramId } = getUserInfo(ctx)
  const mode = ctx.session.mode as ModeEnum
  const isRu = ctx.from?.language_code === 'ru'

  logger.info({
    message: `[CheckBalanceScene Enter] User: ${telegramId}, Mode: ${mode}`,
    telegramId,
    mode,
  })

  try {
    // --- –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    const userDetails = await getUserDetails(telegramId)

    // --- –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø ---
    if (!userDetails.isExist) {
      logger.warn({
        message: `[CheckBalanceScene Exit] User ${telegramId} not found in DB. Redirecting to StartScene.`,
        telegramId,
      })
      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.'
          : '‚ùå Could not find your profile. Please restart the bot with /start.'
      )
      return ctx.scene.enter(ModeEnum.StartScene) // –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }

    // –®–∞–≥ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    if (!userDetails.isSubscriptionActive) {
      logger.info({
        message: `[Subscription Bypass] User ${telegramId} has active subscription (${userDetails.subscriptionType}). Entering scene for mode: ${mode}`,
        telegramId,
        subscriptionType: userDetails.subscriptionType,
        mode,
      })
      return ctx.scene.enter(ModeEnum.StartScene)
    }

    // –®–∞–≥ 5: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏)
    const currentBalance = userDetails.stars
    const cost = modeCosts[mode] || 0
    const costValue = getCostValue(cost)

    logger.info({
      message: `[Balance Check] User: ${telegramId}, Mode: ${mode}, Cost: ${costValue}, Balance: ${currentBalance}`,
      telegramId,
      mode,
      cost: costValue,
      balance: currentBalance,
    })

    // –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω–∞—è
    if (costValue > 0) {
      // –ü–µ—Ä–µ–¥–∞–µ–º –∏ –±–∞–ª–∞–Ω—Å –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ userDetails
      await sendBalanceMessage(
        ctx,
        currentBalance,
        costValue,
        isRu,
        ctx.botInfo.username
      )
    }

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
    if (currentBalance < costValue) {
      logger.warn({
        message: `[Insufficient Balance] User ${telegramId} denied access to mode ${mode}. Cost: ${costValue}, Balance: ${currentBalance}`,
        telegramId,
        mode,
        cost: costValue,
        balance: currentBalance,
      })
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∑–≤–µ–∑–¥
      await sendInsufficientStarsMessage(ctx, currentBalance, isRu)
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, —Ç.–∫. –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
      return ctx.scene.leave()
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
    logger.info({
      message: `[Balance Check OK] User ${telegramId} granted access to mode: ${mode}. Cost: ${costValue}, Balance: ${currentBalance}`,
      telegramId,
      mode,
      cost: costValue,
      balance: currentBalance,
    })

    // –®–∞–≥ 8: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return enterTargetScene(ctx, mode)
  } catch (error) {
    logger.error({
      message: `[CheckBalanceScene Error] User: ${telegramId}, Mode: ${mode}, Error: ${error}`,
      telegramId,
      mode,
      error,
    })
    return ctx.scene.leave()
  }
})

/**
 * @function enterTargetScene
 * @description –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞ (`ctx.session.mode`).
 *              –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ `checkBalanceScene`.
 * @param {MyContext} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf.
 * @param {ModeEnum} mode - –†–µ–∂–∏–º, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É.
 */
async function enterTargetScene(ctx: MyContext, mode: ModeEnum) {
  logger.info({
    message: `[Entering Target Scene] User: ${ctx.from?.id}, Mode: ${mode}`,
    telegramId: ctx.from?.id,
    mode,
  })
  const isRu = ctx.from?.language_code === 'ru'
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ü–µ–Ω–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  switch (mode) {
    case ModeEnum.DigitalAvatarBody:
      return ctx.scene.enter(ModeEnum.DigitalAvatarBody)
    case ModeEnum.DigitalAvatarBodyV2:
      return ctx.scene.enter(ModeEnum.DigitalAvatarBodyV2)
    case ModeEnum.NeuroPhoto:
      return ctx.scene.enter(ModeEnum.NeuroPhoto)
    case ModeEnum.NeuroPhotoV2:
      return ctx.scene.enter(ModeEnum.NeuroPhotoV2)
    case ModeEnum.ImageToPrompt:
      return ctx.scene.enter(ModeEnum.ImageToPrompt)
    case ModeEnum.Avatar:
      return ctx.scene.enter(ModeEnum.Avatar)
    case ModeEnum.ChatWithAvatar:
      return ctx.scene.enter(ModeEnum.ChatWithAvatar)
    case ModeEnum.SelectModel:
      return ctx.scene.enter(ModeEnum.SelectModel)
    case ModeEnum.Voice:
      return ctx.scene.enter(ModeEnum.Voice)
    case ModeEnum.TextToSpeech:
      return ctx.scene.enter(ModeEnum.TextToSpeech)
    case ModeEnum.ImageToVideo:
      return ctx.scene.enter(ModeEnum.ImageToVideo)
    case ModeEnum.TextToVideo:
      return ctx.scene.enter(ModeEnum.TextToVideo)
    case ModeEnum.TextToImage:
      return ctx.scene.enter(ModeEnum.TextToImage)
    case ModeEnum.LipSync:
      return ctx.scene.enter(ModeEnum.LipSync)
    case ModeEnum.VideoInUrl:
      return ctx.scene.enter(ModeEnum.VideoInUrl)
    // --- –î–æ–±–∞–≤—å —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã/—Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å ---
    case ModeEnum.TopUpBalance: // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º (—Ö–æ—Ç—è –æ–±—ã—á–Ω–æ –Ω–µ—Ç)
      return ctx.scene.enter('paymentScene')
    case ModeEnum.Invite:
      return ctx.scene.enter('inviteScene')
    case ModeEnum.Balance:
      return ctx.scene.enter('balanceScene')
    case ModeEnum.Help:
      return ctx.scene.enter('helpScene')
    // -------------------------------------------------------
    default:
      // –≠—Ç–æ—Ç default –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –≤—Å–µ —Ä–µ–∂–∏–º—ã,
      // –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø–µ—Ä–µ–¥ checkBalanceScene, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤—ã—à–µ.
      logger.error({
        message: `[enterTargetScene] Unknown or unhandled mode: ${mode}. Returning to main menu.`,
        telegramId: ctx.from?.id,
        mode,
      })

      await ctx.reply(
        isRu
          ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
          : 'Unknown mode. Returning to main menu.'
      )
      return ctx.scene.enter(ModeEnum.StartScene) // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
  }
}
