import { Markup, Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { isRussian } from '@/helpers'
import { handleSelectStars, handleBuySubscription } from '@/handlers'
import { starAmounts } from '@/price/helpers/starAmounts' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
import { setPayments } from '@/core/supabase'
import { getBotNameByToken } from '@/core'
import { logger } from '@/utils/logger'
import { ModeEnum } from '@/interfaces/modes'

export const starPaymentScene = new Scenes.BaseScene<MyContext>(
  ModeEnum.StarPaymentScene
)

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –∏–ª–∏ –æ–ø—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
starPaymentScene.enter(async ctx => {
  logger.info('### starPaymentScene ENTERED ###', {
    scene: ModeEnum.StarPaymentScene,
    step: 'enter',
    telegram_id: ctx.from?.id,
  })
  const isRu = isRussian(ctx)
  const subscription = ctx.session.subscription?.toLowerCase()

  // –ï—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–Ω–µ 'stars'), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –µ–µ –∑–∞ –∑–≤–µ–∑–¥—ã
  if (
    subscription &&
    subscription !== 'stars' &&
    [
      'neurobase',
      'neuromeeting',
      'neuroblogger',
      'neurophoto',
      'neuromentor',
    ].includes(subscription)
  ) {
    logger.info(
      `[${ModeEnum.StarPaymentScene}] Offering subscription buy with stars: ${subscription}`,
      {
        telegram_id: ctx.from?.id,
      }
    )
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await handleBuySubscription({ ctx, isRu })
    // –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –¥–∞–ª—å—à–µ
  } else {
    logger.info(
      `[${ModeEnum.StarPaymentScene}] Offering star package selection`,
      {
        telegram_id: ctx.from?.id,
      }
    )
    // –ò–Ω–∞—á–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    await handleSelectStars({ ctx, isRu, starAmounts })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∑–≤–µ–∑–¥
starPaymentScene.action(/top_up_(\d+)/, async ctx => {
  const isRu = isRussian(ctx)
  try {
    await ctx.answerCbQuery() // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    const amount = parseInt(ctx.match[1], 10)
    logger.info(
      `[${ModeEnum.StarPaymentScene}] Processing callback top_up: ${amount} ‚≠êÔ∏è`,
      {
        telegram_id: ctx.from?.id,
        amount: amount,
      }
    )

    const userId = ctx.from?.id
    if (!userId) {
      logger.error(`‚ùå [${ModeEnum.StarPaymentScene}] User ID is missing!`, {
        callback_data: ctx.match[0],
      })
      await ctx.reply(
        isRu
          ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.'
          : 'An error occurred: could not identify your account.'
      )
      return ctx.scene.leave()
    }

    const { bot_name } = getBotNameByToken(ctx.telegram.token)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º SUCCESS
    await setPayments({
      telegram_id: userId.toString(),
      OutSum: amount.toString(),
      InvId: Math.floor(Math.random() * 1000000).toString(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏
      currency: 'STARS',
      stars: amount,
      status: 'SUCCESS',
      payment_method: 'TelegramStars',
      subscription: 'stars',
      bot_name,
      language: ctx.from?.language_code,
    })

    logger.info(
      `[${ModeEnum.StarPaymentScene}] SUCCESS payment saved for ${amount} stars`,
      {
        telegram_id: userId,
        amount: amount,
      }
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
      isRu
        ? `‚úÖ <b>–û–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n–°–ø–∏—Å–∞–Ω–æ: ${amount} ‚≠êÔ∏è\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! –ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`
        : `‚úÖ <b>Payment completed</b>\nDebited: ${amount} ‚≠êÔ∏è\n\nThank you for your purchase! Stars will be credited to your balance.`,
      { parse_mode: 'HTML' }
    )
    logger.info(
      `[${ModeEnum.StarPaymentScene}] Star payment confirmation sent to user ${userId}`
    )
    return ctx.scene.leave() // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  } catch (error: any) {
    logger.error(
      `‚ùå [${ModeEnum.StarPaymentScene}] Error processing callback top_up:`,
      {
        error: error.message,
        stack: error.stack,
        telegram_id: ctx.from?.id,
        callback_data: ctx.match ? ctx.match[0] : 'N/A',
      }
    )
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏.'
        : 'An error occurred while processing the star payment.'
    )
    return ctx.scene.leave()
  }
})

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
starPaymentScene.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üè† Main menu'], async ctx => {
  logger.info(
    `[${ModeEnum.StarPaymentScene}] Leaving scene via Main Menu button`,
    {
      telegram_id: ctx.from?.id,
    }
  )
  await ctx.scene.enter(ModeEnum.MainMenu)
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
starPaymentScene.on('message', async ctx => {
  const isRu = isRussian(ctx)
  logger.warn(`[${ModeEnum.StarPaymentScene}] Received unexpected message`, {
    telegram_id: ctx.from?.id,
    // @ts-ignore
    message_text: ctx.message?.text,
  })
  await ctx.reply(
    isRu
      ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
      : 'Please select a star package or return to the main menu.'
  )
  // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
})
