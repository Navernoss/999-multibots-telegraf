import { MyContext } from '@/interfaces'
import { ModelUrl, UserModel } from '../../interfaces'

import { generateNeuroImage } from '@/services/generateNeuroImage'
import {
  getLatestUserModel,
  getReferalsCountAndUserData,
} from '@/core/supabase'
import {
  levels,
  mainMenu,
  sendGenericErrorMessage,
  sendPhotoDescriptionRequest,
} from '@/menu'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { WizardScene } from 'telegraf/scenes'
import { getUserInfo } from '@/handlers/getUserInfo'
import { handleMenu } from '@/handlers'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'

const neuroPhotoConversationStep = async (ctx: MyContext) => {
  const isRu = ctx.from?.language_code === 'ru'
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoConversationStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'conversation',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  try {
    console.log('CASE 1: neuroPhotoConversation')

    const { telegramId } = getUserInfo(ctx)
    logger.info({
      message: 'üîç [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      telegramId,
      step: 'getting_user_model',
    })

    const userModel = await getLatestUserModel(Number(telegramId), 'replicate')
    logger.info({
      message: 'üìã [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      telegramId,
      hasUserModel: !!userModel,
      modelUrl: userModel?.model_url || 'none',
    })

    const { count, subscriptionType, level } =
      await getReferalsCountAndUserData(telegramId)

    logger.info({
      message: 'üìä [NeuroPhoto] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã',
      telegramId,
      referralCount: count,
      subscriptionType,
      level,
    })

    if (!userModel || !userModel.model_url) {
      logger.warn({
        message: '‚ùå [NeuroPhoto] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
        telegramId,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞", –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ò–ò –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –≤–∞—à–∏–º –ª–∏—Ü–æ–º. '
          : "‚ùå You don't have any trained models.\n\nUse the 'ü§ñ  Digital avatar body' command in the main menu to create your AI model for generating neurophotos with your face.",
        {
          reply_markup: {
            keyboard: (
              await mainMenu({
                isRu,
                inviteCount: count,
                subscription: subscriptionType,
                ctx,
                level,
              })
            ).reply_markup.keyboard,
          },
        }
      )

      logger.info({
        message: 'üîÑ [NeuroPhoto] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ—Ç –º–æ–¥–µ–ª–µ–π)',
        telegramId,
        action: 'leaving_scene',
      })

      return ctx.scene.leave()
    }

    ctx.session.userModel = userModel as UserModel
    logger.info({
      message: 'üíæ [NeuroPhoto] –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏',
      telegramId,
      modelUrl: userModel.model_url,
      triggerWord: userModel.trigger_word,
    })

    await sendPhotoDescriptionRequest(ctx, isRu, ModeEnum.NeuroPhoto)
    const isCancel = await handleHelpCancel(ctx)
    logger.info({
      message: `üîÑ [NeuroPhoto] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã: ${
        isCancel ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ'
      }`,
      telegramId,
      isCancel,
    })

    console.log('isCancel', isCancel)
    if (isCancel) {
      logger.info({
        message: 'üõë [NeuroPhoto] –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        telegramId,
        action: 'leaving_scene',
      })
      return ctx.scene.leave()
    }
    console.log('CASE: neuroPhotoConversation next')
    logger.info({
      message: '‚è≠Ô∏è [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
      telegramId,
      nextStep: 'neuroPhotoPromptStep',
    })
    ctx.wizard.next()
    return
  } catch (error) {
    console.error('Error in neuroPhotoConversationStep:', error)
    logger.error({
      message: '‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –≤ neuroPhotoConversationStep',
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    await sendGenericErrorMessage(ctx, isRu, error)
    throw error
  }
}

const neuroPhotoPromptStep = async (ctx: MyContext) => {
  console.log('CASE 2: neuroPhotoPromptStep')
  const isRu = ctx.from?.language_code === 'ru'
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoPromptStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'prompt',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!ctx.message) {
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        telegramId,
        result: 'empty_message',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå No prompt text received. Please enter a description for image generation.'
      )

      return // –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }

    const promptMsg = ctx.message
    console.log(promptMsg, 'promptMsg')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–µ
    const messageType =
      'text' in promptMsg ? 'text' : 'photo' in promptMsg ? 'photo' : 'unknown'

    logger.info({
      message: `üìù [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${messageType}`,
      telegramId,
      messageType,
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageType !== 'text') {
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        telegramId,
        messageType,
        result: 'wrong_message_type',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.'
          : '‚ùå Please send a text description for image generation.'
      )

      return // –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    }

    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ 'text'
    const textMessage = promptMsg as { text: string }
    const promptText = textMessage.text || ''

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π –ª–∏ –ø—Ä–æ–º–ø—Ç
    if (promptText.trim() === '') {
      logger.warn({
        message: '‚ö†Ô∏è [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        result: 'empty_prompt',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.'
          : '‚ùå Prompt cannot be empty. Please describe the image you want to generate.'
      )

      return // –û–∂–∏–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    }

    logger.info({
      message: 'üìã [NeuroPhoto] –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
      telegramId,
      promptLength: promptText.length,
      promptPreview:
        promptText.substring(0, 50) + (promptText.length > 50 ? '...' : ''),
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    const isCancel = await handleHelpCancel(ctx)
    logger.info({
      message: `üîÑ [NeuroPhoto] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É: ${
        isCancel ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ'
      }`,
      telegramId,
      isCancel,
    })

    if (isCancel) {
      logger.info({
        message: 'üõë [NeuroPhoto] –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        telegramId,
        action: 'leaving_scene',
      })
      return ctx.scene.leave()
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (
      !ctx.session.userModel ||
      !ctx.session.userModel.model_url ||
      !ctx.session.userModel.trigger_word
    ) {
      logger.error({
        message: '‚ùå [NeuroPhoto] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏',
        telegramId,
        userModel: ctx.session.userModel ? 'exists_but_incomplete' : 'missing',
        modelUrl: ctx.session.userModel?.model_url || 'missing',
        triggerWord: ctx.session.userModel?.trigger_word || 'missing',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
          : '‚ùå An error occurred: model data not found. Please return to the main menu and try again.'
      )

      return ctx.scene.leave()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.prompt = promptText
    const model_url = ctx.session.userModel.model_url as ModelUrl
    const trigger_word = ctx.session.userModel.trigger_word as string

    logger.info({
      message: 'üíæ [NeuroPhoto] –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
      telegramId,
      prompt: promptText,
      hasModelUrl: !!model_url,
      hasTriggerWord: !!trigger_word,
    })

    const userId = ctx.from?.id
    if (!userId) {
      logger.error({
        message: '‚ùå [NeuroPhoto] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
        telegramId: 'unknown',
        result: 'missing_user_id',
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
          : '‚ùå An error occurred: could not determine user ID.'
      )

      return ctx.scene.leave()
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å trigger_word
    const fullPrompt = `Fashionable ${trigger_word}, ${promptText}`
    logger.info({
      message: 'üé® [NeuroPhoto] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      telegramId,
      fullPrompt,
      userId: userId.toString(),
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const processingMessage = await ctx.reply(
      isRu
        ? '‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...'
        : '‚è≥ Starting image generation. This may take some time...'
    )

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    const progressInterval = setInterval(async () => {
      try {
        await ctx.telegram.editMessageText(
          ctx.chat?.id,
          processingMessage.message_id,
          undefined,
          isRu
            ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
            : '‚è≥ Image generation in progress... Please wait.'
        )
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        logger.warn({
          message: '‚ö†Ô∏è [NeuroPhoto] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ',
          telegramId,
          error: e instanceof Error ? e.message : String(e),
        })
      }
    }, 10000) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      const generatePromise = generateNeuroImage(
        fullPrompt,
        model_url,
        1,
        userId.toString(),
        ctx,
        ctx.botInfo?.username
      )

      // –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await generatePromise

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
      clearInterval(progressInterval)

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      try {
        await ctx.telegram.deleteMessage(
          ctx.chat?.id,
          processingMessage.message_id
        )
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      logger.info({
        message:
          '‚úÖ [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
        telegramId,
        nextStep: 'neuroPhotoButtonStep',
        result: 'success',
      })

      ctx.wizard.next()
      return
    } catch (generateError) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearInterval(progressInterval)

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      try {
        await ctx.telegram.deleteMessage(
          ctx.chat?.id,
          processingMessage.message_id
        )
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      logger.error({
        message: '‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        telegramId,
        error:
          generateError instanceof Error
            ? generateError.message
            : String(generateError),
        stack: generateError instanceof Error ? generateError.stack : undefined,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.'
          : '‚ùå An error occurred during image generation. Please try a different prompt or try again later.'
      )

      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      return
    }
  } catch (error) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    logger.error({
      message: '‚ùå [NeuroPhoto] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ neuroPhotoPromptStep',
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })

    await ctx.reply(
      isRu
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        : '‚ùå An unexpected error occurred. Please return to the main menu and try again.'
    )

    return ctx.scene.leave()
  }
}

const neuroPhotoButtonStep = async (ctx: MyContext) => {
  console.log('CASE 3: neuroPhotoButtonStep')
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoButtonStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'button',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  if (ctx.message && 'text' in ctx.message) {
    const text = ctx.message.text
    logger.info({
      message: `üîò [NeuroPhoto] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: "${text}"`,
      telegramId,
      buttonText: text,
    })

    console.log(`CASE: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${text}`)
    const isRu = ctx.from?.language_code === 'ru'

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä"
    if (text === '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' || text === '‚¨ÜÔ∏è Improve prompt') {
      console.log('CASE: –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        nextScene: 'improvePromptWizard',
      })
      await ctx.scene.enter('improvePromptWizard')
      return
    }

    if (text === 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' || text === 'üìê Change size') {
      console.log('CASE: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞',
        telegramId,
        nextScene: 'sizeWizard',
      })
      await ctx.scene.enter('sizeWizard')
      return
    }

    if (text === levels[104].title_ru || text === levels[104].title_en) {
      console.log('CASE: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
      logger.info({
        message: 'üè† [NeuroPhoto] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        telegramId,
        buttonText: text,
      })
      await handleMenu(ctx)
      return
    }

    await handleMenu(ctx)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —á–∏—Å–ª–∞–º–∏
    const numImages = parseInt(text[0])
    const prompt = ctx.session.prompt
    const userId = ctx.from?.id

    const generate = async (num: number) => {
      logger.info({
        message: `üñºÔ∏è [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
        telegramId,
        numberOfImages: num,
        prompt: prompt,
      })

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const processingMessage = await ctx.reply(
          isRu
            ? `‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...`
            : `‚è≥ Starting generation of ${num} images. This may take some time...`
        )

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await generateNeuroImage(
          prompt,
          ctx.session.userModel.model_url,
          num,
          userId.toString(),
          ctx,
          ctx.botInfo?.username
        )

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try {
          await ctx.telegram.deleteMessage(
            ctx.chat?.id,
            processingMessage.message_id
          )
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }

        logger.info({
          message: `‚úÖ [NeuroPhoto] –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
          telegramId,
          result: 'success',
        })
      } catch (error) {
        logger.error({
          message: `‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
          telegramId,
          error: error instanceof Error ? error.message : String(error),
        })

        await ctx.reply(
          isRu
            ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.'
            : '‚ùå An error occurred during image generation. Please try a different prompt or try again later.'
        )
      }
    }

    if (numImages >= 1 && numImages <= 4) {
      logger.info({
        message: `üî¢ [NeuroPhoto] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${numImages}`,
        telegramId,
        numImages,
      })
      await generate(numImages)
    } else {
      logger.info({
        message: 'üîÑ [NeuroPhoto] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)',
        telegramId,
        buttonText: text,
      })
      const { count, subscriptionType, level } =
        await getReferalsCountAndUserData(ctx.from?.id?.toString() || '')
      await mainMenu({
        isRu,
        inviteCount: count,
        subscription: subscriptionType,
        ctx,
        level,
      })
    }
  }
}

export const neuroPhotoWizard = new WizardScene<MyContext>(
  ModeEnum.NeuroPhoto,
  neuroPhotoConversationStep,
  neuroPhotoPromptStep,
  neuroPhotoButtonStep
)
