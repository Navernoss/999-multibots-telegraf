import { MyContext } from '@/interfaces'
import { ModelUrl, UserModel } from '../../interfaces'

import { generateNeuroImage } from '@/services/generateNeuroImage'
import {
  getLatestUserModel,
  getReferalsCountAndUserData,
} from '@/core/supabase'
import {
  levels,
  mainMenu,
  sendGenericErrorMessage,
  sendPhotoDescriptionRequest,
} from '@/menu'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { WizardScene } from 'telegraf/scenes'
import { getUserInfo } from '@/handlers/getUserInfo'
import { handleMenu } from '@/handlers'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'

const neuroPhotoConversationStep = async (ctx: MyContext) => {
  const isRu = ctx.from?.language_code === 'ru'
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoConversationStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'conversation',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  try {
    console.log('CASE 1: neuroPhotoConversation')

    const { telegramId } = getUserInfo(ctx)
    logger.info({
      message: 'üîç [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      telegramId,
      step: 'getting_user_model',
    })

    const userModel = await getLatestUserModel(Number(telegramId), 'replicate')
    logger.info({
      message: 'üìã [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      telegramId,
      hasUserModel: !!userModel,
      modelUrl: userModel?.model_url || 'none',
    })

    const { count, subscriptionType, level } =
      await getReferalsCountAndUserData(telegramId)

    logger.info({
      message: 'üìä [NeuroPhoto] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã',
      telegramId,
      referralCount: count,
      subscriptionType,
      level,
    })

    if (!userModel || !userModel.model_url) {
      logger.warn({
        message: '‚ùå [NeuroPhoto] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
        telegramId,
      })

      await ctx.reply(
        isRu
          ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –∞–≤–∞—Ç–∞—Ä–∞", –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ò–ò –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –≤–∞—à–∏–º –ª–∏—Ü–æ–º. '
          : "‚ùå You don't have any trained models.\n\nUse the 'ü§ñ  Digital avatar body' command in the main menu to create your AI model for generating neurophotos with your face.",
        {
          reply_markup: {
            keyboard: (
              await mainMenu({
                isRu,
                inviteCount: count,
                subscription: subscriptionType,
                ctx,
                level,
              })
            ).reply_markup.keyboard,
          },
        }
      )

      logger.info({
        message: 'üîÑ [NeuroPhoto] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ—Ç –º–æ–¥–µ–ª–µ–π)',
        telegramId,
        action: 'leaving_scene',
      })

      return ctx.scene.leave()
    }

    ctx.session.userModel = userModel as UserModel
    logger.info({
      message: 'üíæ [NeuroPhoto] –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏',
      telegramId,
      modelUrl: userModel.model_url,
      triggerWord: userModel.trigger_word,
    })

    await sendPhotoDescriptionRequest(ctx, isRu, ModeEnum.NeuroPhoto)
    const isCancel = await handleHelpCancel(ctx)
    logger.info({
      message: `üîÑ [NeuroPhoto] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã: ${
        isCancel ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ'
      }`,
      telegramId,
      isCancel,
    })

    console.log('isCancel', isCancel)
    if (isCancel) {
      logger.info({
        message: 'üõë [NeuroPhoto] –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        telegramId,
        action: 'leaving_scene',
      })
      return ctx.scene.leave()
    }
    console.log('CASE: neuroPhotoConversation next')
    logger.info({
      message: '‚è≠Ô∏è [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
      telegramId,
      nextStep: 'neuroPhotoPromptStep',
    })
    ctx.wizard.next()
    return
  } catch (error) {
    console.error('Error in neuroPhotoConversationStep:', error)
    logger.error({
      message: '‚ùå [NeuroPhoto] –û—à–∏–±–∫–∞ –≤ neuroPhotoConversationStep',
      telegramId,
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
    })
    await sendGenericErrorMessage(ctx, isRu, error)
    throw error
  }
}

const neuroPhotoPromptStep = async (ctx: MyContext) => {
  console.log('CASE 2: neuroPhotoPromptStep')
  const isRu = ctx.from?.language_code === 'ru'
  const telegramId = ctx.from?.id?.toString() || 'unknown'

  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoPromptStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'prompt',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  const promptMsg = ctx.message
  console.log(promptMsg, 'promptMsg')
  logger.info({
    message: 'üìù [NeuroPhoto] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º',
    telegramId,
    messageType: promptMsg
      ? 'text' in promptMsg
        ? 'text'
        : 'non-text'
      : 'none',
  })

  if (promptMsg && 'text' in promptMsg) {
    const promptText = promptMsg.text
    logger.info({
      message: 'üìã [NeuroPhoto] –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω',
      telegramId,
      promptLength: promptText.length,
    })

    const isCancel = await handleHelpCancel(ctx)
    logger.info({
      message: `üîÑ [NeuroPhoto] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É: ${
        isCancel ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ'
      }`,
      telegramId,
      isCancel,
    })

    if (isCancel) {
      logger.info({
        message: 'üõë [NeuroPhoto] –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
        telegramId,
        action: 'leaving_scene',
      })
      return ctx.scene.leave()
    } else {
      ctx.session.prompt = promptText
      const model_url = ctx.session.userModel.model_url as ModelUrl
      const trigger_word = ctx.session.userModel.trigger_word as string
      logger.info({
        message:
          'üíæ [NeuroPhoto] –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã',
        telegramId,
        prompt: promptText,
        hasModelUrl: !!model_url,
        hasTriggerWord: !!trigger_word,
      })

      const userId = ctx.from?.id

      if (model_url && trigger_word) {
        const fullPrompt = `Fashionable ${trigger_word}, ${promptText}`
        logger.info({
          message: 'üé® [NeuroPhoto] –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          telegramId,
          fullPrompt,
          userId: userId?.toString(),
        })

        await generateNeuroImage(
          fullPrompt,
          model_url,
          1,
          userId.toString(),
          ctx,
          ctx.botInfo?.username
        )

        logger.info({
          message:
            '‚úÖ [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
          telegramId,
          nextStep: 'neuroPhotoButtonStep',
        })
        ctx.wizard.next()
        return
      } else {
        logger.error({
          message: '‚ùå [NeuroPhoto] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ',
          telegramId,
          model_url,
          trigger_word,
        })
        await ctx.reply(isRu ? '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç' : '‚ùå Invalid prompt')
        logger.info({
          message: 'üîÑ [NeuroPhoto] –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
          telegramId,
          action: 'leaving_scene',
        })
        ctx.scene.leave()
        return
      }
    }
  }
}

const neuroPhotoButtonStep = async (ctx: MyContext) => {
  console.log('CASE 3: neuroPhotoButtonStep')
  const telegramId = ctx.from?.id?.toString() || 'unknown'
  logger.info({
    message: 'üöÄ [NeuroPhoto] –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã neuroPhotoButtonStep',
    telegramId,
    currentScene: ModeEnum.NeuroPhoto,
    step: 'button',
    sessionData: JSON.stringify(ctx.session || {}),
  })

  if (ctx.message && 'text' in ctx.message) {
    const text = ctx.message.text
    logger.info({
      message: `üîò [NeuroPhoto] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: "${text}"`,
      telegramId,
      buttonText: text,
    })

    console.log(`CASE: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ${text}`)
    const isRu = ctx.from?.language_code === 'ru'

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä"
    if (text === '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' || text === '‚¨ÜÔ∏è Improve prompt') {
      console.log('CASE: –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞',
        telegramId,
        nextScene: 'improvePromptWizard',
      })
      await ctx.scene.enter('improvePromptWizard')
      return
    }

    if (text === 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' || text === 'üìê Change size') {
      console.log('CASE: –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä')
      logger.info({
        message: 'üîÑ [NeuroPhoto] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞',
        telegramId,
        nextScene: 'sizeWizard',
      })
      await ctx.scene.enter('sizeWizard')
      return
    }

    if (text === levels[104].title_ru || text === levels[104].title_en) {
      console.log('CASE: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
      logger.info({
        message: 'üè† [NeuroPhoto] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        telegramId,
        buttonText: text,
      })
      await handleMenu(ctx)
      return
    }

    await handleMenu(ctx)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —á–∏—Å–ª–∞–º–∏
    const numImages = parseInt(text[0])
    const prompt = ctx.session.prompt
    const userId = ctx.from?.id

    const generate = async (num: number) => {
      logger.info({
        message: `üñºÔ∏è [NeuroPhoto] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${num} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`,
        telegramId,
        numberOfImages: num,
        prompt: prompt,
      })
      await generateNeuroImage(
        prompt,
        ctx.session.userModel.model_url,
        num,
        userId.toString(),
        ctx,
        ctx.botInfo?.username
      )
    }

    if (numImages >= 1 && numImages <= 4) {
      logger.info({
        message: `üî¢ [NeuroPhoto] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${numImages}`,
        telegramId,
        numImages,
      })
      await generate(numImages)
    } else {
      logger.info({
        message: 'üîÑ [NeuroPhoto] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)',
        telegramId,
        buttonText: text,
      })
      const { count, subscriptionType, level } =
        await getReferalsCountAndUserData(ctx.from?.id?.toString() || '')
      await mainMenu({
        isRu,
        inviteCount: count,
        subscription: subscriptionType,
        ctx,
        level,
      })
    }
  }
}

export const neuroPhotoWizard = new WizardScene<MyContext>(
  ModeEnum.NeuroPhoto,
  neuroPhotoConversationStep,
  neuroPhotoPromptStep,
  neuroPhotoButtonStep
)
