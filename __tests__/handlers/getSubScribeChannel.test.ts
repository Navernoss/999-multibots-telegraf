// Mock logger methods
jest.mock('@/utils/logger', () => ({
  warn: jest.fn(),
  debug: jest.fn(),
  info: jest.fn(),
}))
const logger = require('@/utils/logger')

import { getSubScribeChannel } from '@/handlers/getSubScribeChannel'

describe('handlers/getSubScribeChannel', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('returns default channel and logs warning when ctx is falsy', () => {
    const channel = getSubScribeChannel(null as any)
    expect(channel).toBe('neuro_blogger_group')
    expect(logger.warn).toHaveBeenCalledWith(
      '‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ ID –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    )
  })

  it('returns default channel and logs warning when botId is missing', () => {
    const channel = getSubScribeChannel({} as any)
    expect(channel).toBe('neuro_blogger_group')
    expect(logger.warn).toHaveBeenCalled()
  })

  it('returns correct channel and logs debug for known botId bot2', () => {
    const ctx: any = { botId: 'bot2' }
    const channel = getSubScribeChannel(ctx)
    expect(channel).toBe('MetaMuse_AI_Influencer')
    expect(logger.debug).toHaveBeenCalledWith(
      'üîç –î–ª—è –±–æ—Ç–∞ bot2 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–Ω–∞–ª: MetaMuse_AI_Influencer'
    )
  })

  it('returns correct channel and logs debug for known botId bot3', () => {
    const ctx: any = { botId: 'bot3' }
    const channel = getSubScribeChannel(ctx)
    expect(channel).toBe('motionly_tech')
    expect(logger.debug).toHaveBeenCalledWith(
      'üîç –î–ª—è –±–æ—Ç–∞ bot3 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–Ω–∞–ª: motionly_tech'
    )
  })

  it('returns default channel and logs info when botId unknown', () => {
    const ctx: any = { botId: 'unknownBot' }
    const channel = getSubScribeChannel(ctx)
    expect(channel).toBe('neuro_blogger_group')
    expect(logger.info).toHaveBeenCalledWith(
      '‚ÑπÔ∏è –î–ª—è –±–æ—Ç–∞ unknownBot –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    )
  })
})