/* eslint-disable sonarjs/no-duplicate-string */
import { jest, describe, it, expect, beforeEach } from '@jest/globals'
import { Scenes } from 'telegraf'
import { paymentScene } from '../../src/scenes/paymentScene' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import {
  MyContext,
  MySession,
  SubscriptionType,
  ModeEnum,
  UserModel,
  ModelUrl,
} from '../../src/interfaces' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨, –¥–æ–±–∞–≤–ª—è–µ–º UserModel, ModelUrl
import { Update, Message } from 'telegraf/types' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Message
import { makeMockContext } from '../utils/makeMockContext'
import { isRussian } from '../../src/helpers' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import * as handlers from '../../src/handlers' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import * as supabase from '../../src/core/supabase' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import * as priceHelpers from '../../src/price/helpers' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import * as config from '../../src/config' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import * as botCore from '../../src/core/bot' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import { logger } from '../../src/utils/logger' // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
import { setPaymentsSuccessResponse } from '../utils/mocks/supabaseMocks'

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../../src/helpers') // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
jest.mock('../../src/handlers') // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
jest.mock('../../src/core/supabase') // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
jest.mock('../../src/price/helpers', () => ({
  // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
  __esModule: true,
  // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º jest.requireActual –∏ —Å–ø—Ä–µ–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TS2698
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —ç–∫—Å–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ paymentScene –∏–ª–∏ –µ–≥–æ —Ç–µ—Å—Ç–∞—Ö
  // (–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –¥–ª—è paymentScene.test.ts —ç—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ starAmounts –∏ rubTopUpOptions,
  // –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ —Å–∞–º–æ–π —Å—Ü–µ–Ω—ã paymentScene/index.ts)

  // –ü—Ä–∏–º–µ—Ä (–Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ):
  starAmounts: [
    { stars: 100, id: '1' },
    { stars: 200, id: '2' },
  ],
  rubTopUpOptions: [{ amountRub: 100, stars: 50, description: '' }],
  // –ú–æ–∫–∞–µ–º getInvoiceId, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å,
  // –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞ (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–∫–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ) –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
  getInvoiceId: jest.fn(),
  // –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –º–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ price/helpers, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è
  // –Ω–∞–ø—Ä–∏–º–µ—Ä: calculateCostInStars: jest.fn(),
}))
jest.mock('../../src/config', () => ({
  // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
  MERCHANT_LOGIN: 'test_login',
  PASSWORD1: 'test_password1',
}))
jest.mock('../../src/core/bot') // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨
jest.mock('../../src/utils/logger') // –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ô –ü–£–¢–¨

// –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –º–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
const mockedIsRussian = jest.mocked(isRussian)
const mockedBotCore = jest.mocked(botCore)
const mockedLogger = jest.mocked(logger)

describe('Payment Scene', () => {
  let ctx: MyContext
  let replyMock: jest.Mock // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –º–æ–∫–∞ reply

  beforeEach(() => {
    jest.clearAllMocks()
    // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π –º–æ–∫ Update
    const mockUpdate: Update.CallbackQueryUpdate | Update.MessageUpdate = {
      update_id: 1,
      // –ù–∞—á–Ω–µ–º —Å message –¥–ª—è —Ç–µ—Å—Ç–∞ enter
      message: {
        message_id: 1,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: '',
      },
    }
    ctx = makeMockContext(mockUpdate) // –ü–µ—Ä–µ–¥–∞–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π Update
    mockedIsRussian.mockReturnValue(true)
    mockedBotCore.getBotNameByToken.mockReturnValue({ bot_name: 'test_bot' })

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    // @ts-ignore
    ctx.scene = {
      enter: jest.fn(),
      leave: jest.fn(),
      reenter: jest.fn(),
      // @ts-ignore
      session: ctx.session,
      state: {},
      // @ts-ignore
      current: paymentScene,
      // @ts-ignore
      ctx: ctx,
    } as Scenes.SceneContextScene<MyContext, Scenes.WizardSessionData>

    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –°–ï–°–°–ò–Æ
    ctx.session = {
      subscription: undefined,
      mode: undefined,
      cursor: 0,
      images: [],
      targetUserId: 'default-target-id',
      userModel: {
        model_name: 'default_model',
        trigger_word: 'default_trigger',
        model_url: 'org/repo:version' as ModelUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç –∫ —Ç–∏–ø—É ModelUrl
      },
      email: undefined,
      steps: undefined,
    } as MySession
    // @ts-ignore
    ctx.scene.session = ctx.session

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫ reply –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–∞—Ö
    replyMock = jest.fn() as jest.Mock
    ctx.reply = replyMock as jest.MockedFunction<typeof ctx.reply>
  })

  it('should enter the scene and show payment options for RU user', async () => {
    // @ts-ignore - next –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ BaseScene enter
    await paymentScene.enterMiddleware()(ctx, jest.fn())

    expect(ctx.reply).toHaveBeenCalledTimes(1)
    expect(ctx.reply).toHaveBeenCalledWith(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          keyboard: expect.arrayContaining([
            expect.arrayContaining([
              expect.objectContaining({ text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' }),
              expect.objectContaining({ text: 'üí≥ –†—É–±–ª—è–º–∏' }),
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' }),
            ]),
            expect.arrayContaining([
              // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
              expect.objectContaining({ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }),
            ]),
          ]),
          resize_keyboard: true,
        }),
      })
    )
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('paymentScene ROUTER ENTERED'),
      expect.any(Object)
    )
  })

  it('should enter the scene and show payment options for EN user', async () => {
    mockedIsRussian.mockReturnValue(false) // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    // @ts-ignore
    await paymentScene.enterMiddleware()(ctx, jest.fn())

    expect(ctx.reply).toHaveBeenCalledTimes(1)
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è EN
    expect(ctx.reply).toHaveBeenCalledWith(
      'Select payment method:',
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          keyboard: expect.arrayContaining([
            expect.arrayContaining([
              expect.objectContaining({ text: '‚≠êÔ∏è Stars' }),
              expect.objectContaining({ text: 'üí≥ Rubles' }), // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: 'What are stars‚ùì' }),
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: 'üè† Main menu' }), // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ]),
          ]),
          resize_keyboard: true,
        }),
      })
    )
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è hears ---

  it('should handle "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏" and enter StarPaymentScene', async () => {
    // –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hears
    // @ts-ignore –ù–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ listeners
    const hearsHandler = paymentScene.listeners.find(
      listener =>
        Array.isArray(listener.triggers) &&
        listener.triggers.includes('‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏')
    )
    if (!hearsHandler || !hearsHandler.middleware) {
      throw new Error('Hears handler for "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏" not found')
    }

    await hearsHandler.middleware(ctx, jest.fn() as any)

    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.StarPaymentScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('User chose Stars. Entering'),
      expect.any(Object)
    )
  })

  it('should handle "üí≥ –†—É–±–ª—è–º–∏" and enter RublePaymentScene', async () => {
    // –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hears
    // @ts-ignore
    const hearsHandler = paymentScene.listeners.find(
      listener =>
        Array.isArray(listener.triggers) &&
        listener.triggers.includes('üí≥ –†—É–±–ª—è–º–∏')
    )
    if (!hearsHandler || !hearsHandler.middleware) {
      throw new Error('Hears handler for "üí≥ –†—É–±–ª—è–º–∏" not found')
    }

    await hearsHandler.middleware(ctx, jest.fn() as any)

    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.RublePaymentScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('User chose Rubles. Entering'),
      expect.any(Object)
    )
  })

  it('should handle "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and enter MenuScene', async () => {
    // @ts-ignore
    const hearsHandler = paymentScene.listeners.find(
      listener =>
        Array.isArray(listener.triggers) &&
        listener.triggers.includes('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    )
    if (!hearsHandler || !hearsHandler.middleware) {
      throw new Error('Hears handler for "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" not found')
    }
    await hearsHandler.middleware(ctx, jest.fn() as any)
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MenuScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('Leaving scene via Main Menu button'),
      expect.any(Object)
    )
  })

  // --- –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è action, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ü–µ–Ω—ã ---

  it('should handle unexpected message', async () => {
    // @ts-ignore - message —Ç–æ—á–Ω–æ –µ—Å—Ç—å
    ctx.update.message.text = '–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç'
    // @ts-ignore - –î–æ—Å—Ç—É–ø –∫ listeners
    const messageHandler = paymentScene.listeners.find(
      listener => listener.type === 'message' && !listener.triggers // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    if (!messageHandler || !messageHandler.middleware) {
      throw new Error('Default message handler not found')
    }
    await messageHandler.middleware(ctx, jest.fn() as any)

    expect(ctx.reply).toHaveBeenCalledWith(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'
    )
    expect(mockedLogger.warn).toHaveBeenCalledWith(
      expect.stringContaining('Received unexpected message'),
      expect.any(Object)
    )
    expect(ctx.scene.enter).not.toHaveBeenCalled() // –î–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω–µ
    expect(ctx.scene.leave).not.toHaveBeenCalled()
  })

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
  it('should handle error during enterMiddleware and leave scene', async () => {
    const enterError = new Error('Enter failed')
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ ctx.reply –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    replyMock.mockImplementation(
      async (text: string, extra?: any): Promise<Message.TextMessage> => {
        if (text === '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:') {
          throw enterError
        }
        if (!ctx.chat || !ctx.from) {
          throw new Error('Chat or From context missing')
        }
        return {
          message_id: 2,
          date: Math.floor(Date.now() / 1000),
          chat: ctx.chat,
          from: ctx.from,
          text: text,
        }
      }
    )

    // @ts-ignore
    await paymentScene.enterMiddleware()(ctx, jest.fn())

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reply –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã
    expect(replyMock).toHaveBeenCalledTimes(2)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(replyMock).toHaveBeenNthCalledWith(
      2,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
      expect.anything()
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞)
    expect(mockedLogger.error).toHaveBeenCalledWith(
      expect.stringContaining('Error in enter:'),
      expect.objectContaining({ error: enterError.message })
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
    expect(ctx.scene.leave).toHaveBeenCalledTimes(1)
  })
})
