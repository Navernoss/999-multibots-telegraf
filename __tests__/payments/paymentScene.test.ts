// import { jest, describe, it, expect, beforeEach } from '@jest/globals' // –£–î–ê–õ–ò–¢–¨
import { Scenes } from 'telegraf'
import {
  MyContext,
  MySession,
  SubscriptionType,
  ModeEnum,
  UserModel,
  ModelUrl,
} from '@/interfaces' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import { Update, Message } from 'telegraf/types' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Message
import { makeMockContext } from '../utils/makeMockContext' // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
import { isRussian } from '@/helpers' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import * as handlers from '@/handlers' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import * as supabase from '@/core/supabase' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import * as priceHelpers from '@/price/helpers' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import * as config from '@/config' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import * as botCore from '@/core/bot' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import { logger } from '@/utils/logger' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å
import { setPaymentsSuccessResponse } from '../utils/mocks/supabaseMocks' // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
import { paymentScene } from '@/scenes/paymentScene' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–∏–∞—Å

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –î–û –∏–º–ø–æ—Ä—Ç–∞ —Å—Ü–µ–Ω—ã —Å –ê–õ–ò–ê–°–ê–ú–ò
jest.mock('@/helpers')
jest.mock('@/handlers')
jest.mock('@/core/supabase')
jest.mock('@/price/helpers', () => ({
  __esModule: true,
  starAmounts: [
    { stars: 100, id: '1' },
    { stars: 200, id: '2' },
  ],
  rubTopUpOptions: [{ amountRub: 100, stars: 50, description: '' }],
  getInvoiceId: jest.fn(),
}))
jest.mock('@/config', () => ({
  MERCHANT_LOGIN: 'test_login',
  PASSWORD1: 'test_password1',
  SUPABASE_URL: 'http://mock-supabase.co',
  SUPABASE_SERVICE_KEY: 'mock-key',
  SUPABASE_SERVICE_ROLE_KEY: 'mock-service-role-key',
}))
jest.mock('@/core/bot')
jest.mock('@/utils/logger')

// –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –º–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
const mockedIsRussian = jest.mocked(isRussian)
const mockedBotCore = jest.mocked(botCore)
const mockedLogger = jest.mocked(logger)

describe('Payment Scene', () => {
  let ctx: MyContext
  let replyMock: jest.Mock

  beforeEach(() => {
    jest.clearAllMocks()
    ctx = makeMockContext({ update_id: 1 } as Update) // Use basic update for enter tests
    mockedIsRussian.mockReturnValue(true)
    mockedBotCore.getBotNameByToken.mockReturnValue({ bot_name: 'test_bot' })
    replyMock = jest.fn()
    ctx.reply = replyMock as jest.MockedFunction<typeof ctx.reply>

    // We rely on makeMockContext to provide a valid ctx.scene mock
    // No need to manually mock ctx.scene here
  })

  it('should enter the scene and show payment options for RU user', async () => {
    await paymentScene.enterMiddleware()(ctx, jest.fn())

    expect(replyMock).toHaveBeenCalledTimes(1)
    expect(replyMock).toHaveBeenCalledWith(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          keyboard: expect.arrayContaining([
            expect.arrayContaining([
              expect.objectContaining({ text: '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏' }),
              expect.objectContaining({ text: 'üí≥ –†—É–±–ª—è–º–∏' }),
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–≤–µ–∑–¥—ã‚ùì' }),
            ]),
            expect.arrayContaining([
              // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
              expect.objectContaining({ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }),
            ]),
          ]),
          resize_keyboard: true,
        }),
      })
    )
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('### paymentScene ENTERED ###'),
      expect.any(Object)
    )
  })

  it('should enter the scene and show payment options for EN user', async () => {
    mockedIsRussian.mockReturnValue(false)
    await paymentScene.enterMiddleware()(ctx, jest.fn())

    expect(replyMock).toHaveBeenCalledTimes(1)
    expect(replyMock).toHaveBeenCalledWith(
      'Select payment method:',
      expect.objectContaining({
        reply_markup: expect.objectContaining({
          keyboard: expect.arrayContaining([
            expect.arrayContaining([
              expect.objectContaining({ text: '‚≠êÔ∏è Stars' }),
              expect.objectContaining({ text: 'üí≥ Rubles' }), // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: 'What are stars‚ùì' }),
            ]),
            expect.arrayContaining([
              expect.objectContaining({ text: 'üè† Main menu' }), // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            ]),
          ]),
          resize_keyboard: true,
        }),
      })
    )
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è hears ---
  it('should handle "‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏" and enter StarPaymentScene', async () => {
    const text = '‚≠êÔ∏è –ó–≤–µ–∑–¥–∞–º–∏'
    const messageUpdate: Update.MessageUpdate = {
      update_id: 2,
      message: {
        message_id: 2,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: text,
      },
    }
    // Create context specific for this message update
    ctx = makeMockContext(messageUpdate)
    // We rely on makeMockContext to provide ctx.scene

    await paymentScene.middleware()(ctx, jest.fn())
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.StarPaymentScene)
  })

  it('should handle "üí≥ –†—É–±–ª—è–º–∏" and enter RublePaymentScene', async () => {
    const text = 'üí≥ –†—É–±–ª—è–º–∏'
    const messageUpdate: Update.MessageUpdate = {
      update_id: 3,
      message: {
        message_id: 3,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: text,
      },
    }
    // Create context specific for this message update
    ctx = makeMockContext(messageUpdate)
    // We rely on makeMockContext to provide ctx.scene

    await paymentScene.middleware()(ctx, jest.fn())
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.RublePaymentScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('User chose Rubles. Entering'),
      expect.any(Object)
    )
  })

  it('should handle "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" and enter MenuScene', async () => {
    const text = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    const messageUpdate: Update.MessageUpdate = {
      update_id: 4,
      message: {
        message_id: 4,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: text,
      },
    }
    // Create context specific for this message update
    ctx = makeMockContext(messageUpdate)
    // We rely on makeMockContext to provide ctx.scene

    await paymentScene.middleware()(ctx, jest.fn())
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MenuScene)
    expect(mockedLogger.info).toHaveBeenCalledWith(
      expect.stringContaining('Leaving scene via Main Menu button'),
      expect.any(Object)
    )
  })

  // --- –¢–µ—Å—Ç –¥–ª—è on('message') ---
  it('should handle unexpected message', async () => {
    const text = '–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç'
    const messageUpdate: Update.MessageUpdate = {
      update_id: 5,
      message: {
        message_id: 5,
        date: Date.now(),
        from: {
          id: 123,
          is_bot: false,
          first_name: 'Test',
          language_code: 'ru',
        },
        chat: { id: 123, type: 'private', first_name: 'Test' },
        text: text,
      },
    }
    // Create context specific for this message update
    ctx = makeMockContext(messageUpdate)
    replyMock = jest.fn() // Re-assign mockReply as ctx is new
    ctx.reply = replyMock as jest.MockedFunction<typeof ctx.reply>
    // We rely on makeMockContext to provide ctx.scene

    await paymentScene.middleware()(ctx, jest.fn())
    expect(replyMock).toHaveBeenCalledWith(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (‚≠êÔ∏è –∏–ª–∏ üí≥) –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
      expect.any(Object)
    )
    expect(mockedLogger.warn).toHaveBeenCalledWith(
      expect.stringContaining('Received unexpected message'),
      expect.any(Object)
    )
    expect(ctx.scene.enter).not.toHaveBeenCalled()
  })

  // --- –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞ ---
  it('should handle error during enterMiddleware and leave scene', async () => {
    const enterError = new Error('Enter failed')
    // Re-create context for this specific test setup
    ctx = makeMockContext({ update_id: 6 } as Update)
    replyMock = jest.fn()
    ctx.reply = replyMock as jest.MockedFunction<typeof ctx.reply>
    // We rely on makeMockContext to provide ctx.scene
    const leaveMock = jest.fn()
    ctx.scene.leave = leaveMock // Assign the leave mock to the scene from makeMockContext

    replyMock.mockImplementationOnce(async () => {
      throw enterError
    })

    await paymentScene.enterMiddleware()(ctx, jest.fn())

    expect(replyMock).toHaveBeenCalledTimes(2)
    expect(replyMock).toHaveBeenNthCalledWith(
      2,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.'
    )
    expect(mockedLogger.error).toHaveBeenCalledWith(
      expect.stringContaining('Error in enter:'),
      expect.objectContaining({ error: enterError.message })
    )
    expect(leaveMock).toHaveBeenCalledTimes(1) // Check if the specific leave mock was called
  })
})
