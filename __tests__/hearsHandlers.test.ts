import { Telegraf } from 'telegraf'
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
import { MyContext } from '../src/interfaces'
// –£–¥–∞–ª—è–µ–º –º–æ–∫ –¥–ª—è composer
// jest.mock('@/bot', () => ({ composer: { hears: jest.fn() } }))

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è jest.mock
jest.mock('../src/menu', () => ({ imageModelMenu: jest.fn(), levels: jest.fn() })) // –ú–æ–∫–∏—Ä—É–µ–º –∏ levels
jest.mock('../src/services/generateTextToImage', () => ({
  generateTextToImage: jest.fn(),
}))
jest.mock('../src/services/generateNeuroImage', () => ({
  generateNeuroImage: jest.fn(),
}))
jest.mock('../src/handlers', () => ({ handleSizeSelection: jest.fn() }))
jest.mock('../src/core/supabase', () => ({
  getReferalsCountAndUserData: jest.fn().mockResolvedValue({
    count: 0,
    level: 1,
    subscriptionType: 'free',
  }),
}))

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
import { setupHearsHandlers } from '../src/hearsHandlers'
import { levels } from '../src/menu' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º levels

describe('Hears Handlers Setup', () => {
  let bot: any

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è bot
    bot = {
      hears: jest.fn(),
      // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ setupHearsHandlers
      telegram: {
        sendMessage: jest.fn(),
      },
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–∫ –¥–ª—è context, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      context: {
        session: {},
        scene: { enter: jest.fn(), leave: jest.fn() },
        reply: jest.fn(),
        from: { id: 123, language_code: 'ru' },
        botInfo: { username: 'testbot' },
        message: { text: '' }, // –î–æ–±–∞–≤–ª—è–µ–º message.text –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      },
    } as unknown as Telegraf<MyContext>

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    setupHearsHandlers(bot)
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  it('should register hears handler for Help', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ bot.hears –≤–º–µ—Å—Ç–æ composer.hears
    expect(bot.hears).toHaveBeenCalledWith(
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π levels, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
      // –ò–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ levels –Ω–µ –≤–∞–∂–µ–Ω –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      expect.any(Array), // –ü–æ–∫–∞ —á—Ç–æ —Ç–∞–∫, –∏–ª–∏ [levels[103].title_ru, levels[103].title_en]
      expect.any(Function)
    )
  })

  it('should register hears handler for number buttons', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ bot.hears –≤–º–µ—Å—Ç–æ composer.hears
    expect(bot.hears).toHaveBeenCalledWith(
      ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£'],
      expect.any(Function)
    )
  })

  it('should register hears handler for Improve Prompt', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ bot.hears –≤–º–µ—Å—Ç–æ composer.hears
    expect(bot.hears).toHaveBeenCalledWith(
      ['‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç', '‚¨ÜÔ∏è Improve prompt'],
      expect.any(Function)
    )
  })

  it('should register hears handler for Change Size', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ bot.hears –≤–º–µ—Å—Ç–æ composer.hears
    expect(bot.hears).toHaveBeenCalledWith(
      ['üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä', 'üìê Change size'],
      expect.any(Function)
    )
  })

  it('should register hears handler for Main Menu', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ bot.hears –≤–º–µ—Å—Ç–æ composer.hears
    expect(bot.hears).toHaveBeenCalledWith(
      // [levels[104].title_ru, levels[104].title_en],
      expect.any(Array),
      expect.any(Function)
    )
  })

  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö bot.hears –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...

  // –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  // it('should call scene.enter when Help is triggered', async () => {
  //   // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–±—ç–∫ –¥–ª—è Help
  //   const helpCallback = bot.hears.mock.calls.find(
  //     (call: any) => call[0][0] === levels[103].title_ru
  //   )[1]

  //   const mockCtx = {
  //     session: {},
  //     scene: { enter: jest.fn() },
  //     from: { id: 123 },
  //     // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  //   } as unknown as MyContext

  //   await helpCallback(mockCtx)
  //   expect(mockCtx.scene.enter).toHaveBeenCalledWith('helpScene')
  // })
})