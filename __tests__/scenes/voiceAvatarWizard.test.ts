/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω—ã voiceAvatarWizard
 */
import { jest, describe, it, expect, beforeEach } from '@jest/globals'
import { Context, MiddlewareFn } from 'telegraf'
import { Scenes } from 'telegraf' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Scenes –¥–ª—è WizardScene
import { Update, Message, CallbackQuery, InlineQuery, PreCheckoutQuery, User, Chat, File, Voice, UserFromGetMe } from 'telegraf/typings/core/types/typegram'
import makeMockContext from '../utils/mockTelegrafContext'
import { voiceAvatarWizard } from '../../src/scenes/voiceAvatarWizard/index' // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–∑–∞—Ä–¥—É
import { MyContext, MySession, UserModel } from '../../src/interfaces'
import { createHelpCancelKeyboard } from '../../src/menu/createHelpCancelKeyboard/createHelpCancelKeyboard'
import { isRussian } from '@/helpers/language' // –ú–æ–∫
import { getUserBalance } from '@/core/supabase' // –ú–æ–∫
import { sendInsufficientStarsMessage, sendBalanceMessage, voiceConversationCost } from '@/price/helpers' // –ú–æ–∫
import { handleHelpCancel } from '@/handlers' // –ú–æ–∫
import { generateVoiceAvatar } from '@/services/generateVoiceAvatar' // –ú–æ–∫

// --- –ú–æ–∫–∏ ---
jest.mock('../../src/menu/createHelpCancelKeyboard/createHelpCancelKeyboard')
jest.mock('@/helpers/language')
jest.mock('@/core/supabase')
jest.mock('@/price/helpers')
jest.mock('@/handlers')
jest.mock('@/services/generateVoiceAvatar')

const mockedCreateHelpCancelKeyboard = jest.mocked(createHelpCancelKeyboard)
const mockedIsRussian = jest.mocked(isRussian)
const mockedGetUserBalance = jest.mocked(getUserBalance)
const mockedSendInsufficientStarsMessage = jest.mocked(sendInsufficientStarsMessage)
const mockedSendBalanceMessage = jest.mocked(sendBalanceMessage)
const mockedHandleHelpCancel = jest.mocked(handleHelpCancel)
const mockedGenerateVoiceAvatar = jest.mocked(generateVoiceAvatar)

const mockUserModel: UserModel = {
  model_name: 'test-model',
  trigger_word: 'test',
  model_url: 'org/repo:version'
}

const createMockSession = (overrides: Partial<MySession> = {}): MySession => ({
  userModel: mockUserModel,
  targetUserId: '12345',
  images: [],
  cursor: 0,
  // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è MySession, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  // ...
  ...overrides
});
// -------------

describe('voiceAvatarWizard', () => {
  let ctx: MyContext

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Voice, –¥–æ–±–∞–≤–ª—è–µ–º duration
  const mockGetFile = jest.fn<() => Promise<Voice>>()

  // –ú–æ–∫ –¥–ª—è next() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise<void>
  const mockNext = jest.fn<() => Promise<void>>().mockResolvedValue()

  beforeEach(() => {
    jest.clearAllMocks()

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    mockedIsRussian.mockReturnValue(true) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    mockedGetUserBalance.mockResolvedValue(100) // –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    mockedHandleHelpCancel.mockResolvedValue(false) // –ù–µ –æ—Ç–º–µ–Ω–∞/–ø–æ–º–æ—â—å
    // –î–æ–±–∞–≤–ª—è–µ–º duration –≤ –º–æ–∫ Voice
    mockGetFile.mockResolvedValue({ file_id: 'file_id', file_unique_id: 'unique_id', file_path: 'path/to/file', duration: 10 } as Voice)

    mockedCreateHelpCancelKeyboard.mockImplementation((isRu: boolean) => ({
      reply_markup: {
        keyboard: [[{ text: isRu ? '–ü–æ–º–æ—â—å' : 'Help' }], [{ text: isRu ? '–û—Ç–º–µ–Ω–∞' : 'Cancel' }]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    } as any))
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è –®–∞–≥–∞ 0 ---
  it('step 0: should leave if no user ID', async () => {
    const session = createMockSession()
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ ctx.from
    ctx = makeMockContext({ message: {} } as Update, session)
    delete (ctx as any).from // –£–¥–∞–ª—è–µ–º from –¥–ª—è —Ç–µ—Å—Ç–∞

    const step0 = voiceAvatarWizard.steps[0]
    // –ü–µ—Ä–µ–¥–∞–µ–º mockNext –≤–º–µ—Å—Ç–æ jest.fn()
    await (step0 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(ctx.reply).toHaveBeenCalledWith('–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(mockedGetUserBalance).not.toHaveBeenCalled()
    expect(ctx.wizard.next).not.toHaveBeenCalled()
  })

  it('step 0: should leave if balance is insufficient', async () => {
    const session = createMockSession()
    ctx = makeMockContext({ message: { text: 'start', from: { id: 123 } as User } } as Update, session)
    mockedGetUserBalance.mockResolvedValueOnce(voiceConversationCost - 1) // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å

    const step0 = voiceAvatarWizard.steps[0]
    await (step0 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedGetUserBalance).toHaveBeenCalledWith('123')
    expect(mockedSendInsufficientStarsMessage).toHaveBeenCalledWith(ctx, voiceConversationCost - 1, true)
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(ctx.reply).not.toHaveBeenCalledWith(expect.stringContaining('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ'))
    expect(ctx.wizard.next).not.toHaveBeenCalled()
  })

  it('step 0: should prompt for voice, send balance and advance if balance sufficient', async () => {
    const session = createMockSession()
    const fromUser = { id: 123, is_bot: false, first_name: 'Tester', username: 'testuser', language_code: 'ru' }
    const botInfo = { id: 1, is_bot: true, username: 'test_bot', first_name: 'Bot', can_join_groups: false, can_read_all_group_messages: false, supports_inline_queries: false } as UserFromGetMe
    ctx = makeMockContext({ message: { text: 'start', from: fromUser } } as Update, session, { botInfo })

    const step0 = voiceAvatarWizard.steps[0]
    await (step0 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedGetUserBalance).toHaveBeenCalledWith('123')
    expect(mockedSendBalanceMessage).toHaveBeenCalledWith(ctx, 100, voiceConversationCost, true, 'test_bot')
    expect(ctx.reply).toHaveBeenCalledWith(
      'üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      mockedCreateHelpCancelKeyboard(true)
    )
    expect(mockedCreateHelpCancelKeyboard).toHaveBeenCalledWith(true)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ ctx.wizard.next(), –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–¥–µ–ª–∞–Ω –≤–Ω—É—Ç—Ä–∏ —à–∞–≥–∞
    expect(ctx.wizard.next).toHaveBeenCalled()
    expect(ctx.scene.leave).not.toHaveBeenCalled()
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è –®–∞–≥–∞ 1 ---
  it('step 1: should prompt if message is invalid (no voice/audio/text)', async () => {
    const session = createMockSession()
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å update –±–µ–∑ message –∏–ª–∏ —Å message –±–µ–∑ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    ctx = makeMockContext({ update_id: 1 }, session)

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(ctx.reply).toHaveBeenCalledWith('üéôÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    expect(mockedHandleHelpCancel).not.toHaveBeenCalled()
    expect(ctx.scene.leave).not.toHaveBeenCalled()
  })

  it('step 1: should leave if handleHelpCancel returns true', async () => {
    const session = createMockSession()
    ctx = makeMockContext({ message: { text: '–û—Ç–º–µ–Ω–∞' } } as Update, session)
    mockedHandleHelpCancel.mockResolvedValueOnce(true)

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(mockGetFile).not.toHaveBeenCalled()
    expect(mockedGenerateVoiceAvatar).not.toHaveBeenCalled()
  })

  it('step 1: should handle voice message, generate avatar and leave', async () => {
    const session = createMockSession()
    const fromUser = { id: 123, is_bot: false, first_name: 'Tester', username: 'testuser', language_code: 'ru' }
    const botInfo = { id: 1, is_bot: true, username: 'test_bot', first_name: 'Bot', can_join_groups: false, can_read_all_group_messages: false, supports_inline_queries: false } as UserFromGetMe
    const voiceMessage = { message: { voice: { file_id: 'voice_file_id' }, from: fromUser } }
    ctx = makeMockContext(voiceMessage as Update, session, { botInfo })

    ctx.telegram.getFile = mockGetFile

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(mockGetFile).toHaveBeenCalledWith('voice_file_id')
    expect(mockedGenerateVoiceAvatar).toHaveBeenCalledWith(
      `https://api.telegram.org/file/bot${ctx.telegram.token}/path/to/file`,
      'No text provided',
      '123',
      ctx,
      true,
      'test_bot'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(ctx.reply).not.toHaveBeenCalledWith(expect.stringContaining('–û—à–∏–±–∫–∞'))
  })

  it('step 1: should handle audio message, generate avatar and leave', async () => {
    const session = createMockSession()
    const fromUser = { id: 123, is_bot: false, first_name: 'Tester', username: 'testuser', language_code: 'ru' }
    const botInfo = { id: 1, is_bot: true, username: 'test_bot', first_name: 'Bot', can_join_groups: false, can_read_all_group_messages: false, supports_inline_queries: false } as UserFromGetMe
    const audioMessage = { message: { audio: { file_id: 'audio_file_id' }, from: fromUser } }
    ctx = makeMockContext(audioMessage as Update, session, { botInfo })
    ctx.telegram.getFile = mockGetFile

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(mockGetFile).toHaveBeenCalledWith('audio_file_id')
    expect(mockedGenerateVoiceAvatar).toHaveBeenCalledWith(
      `https://api.telegram.org/file/bot${ctx.telegram.token}/path/to/file`,
      'No text provided',
      '123',
      ctx,
      true,
      'test_bot'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(ctx.reply).not.toHaveBeenCalledWith(expect.stringContaining('–û—à–∏–±–∫–∞'))
  })

  it('step 1: should reply with error and leave if text message is not help/cancel', async () => {
    const session = createMockSession()
    ctx = makeMockContext({ message: { text: 'some random text' } } as Update, session)

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(ctx.reply).toHaveBeenCalledWith('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞')
    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(mockGetFile).not.toHaveBeenCalled()
    expect(mockedGenerateVoiceAvatar).not.toHaveBeenCalled()
  })

  it('step 1: should handle getFile error', async () => {
    const session = createMockSession()
    const voiceMessage = { message: { voice: { file_id: 'voice_file_id' } } }
    ctx = makeMockContext(voiceMessage as Update, session)
    ctx.telegram.getFile = mockGetFile
    const getFileError = new Error('Failed to get file')
    mockGetFile.mockRejectedValueOnce(getFileError)

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(mockGetFile).toHaveBeenCalledWith('voice_file_id')
    expect(ctx.reply).toHaveBeenCalledWith('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    expect(mockedGenerateVoiceAvatar).not.toHaveBeenCalled()
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  it('step 1: should handle generateVoiceAvatar error', async () => {
    const session = createMockSession()
    const voiceMessage = { message: { voice: { file_id: 'voice_file_id' } } }
    ctx = makeMockContext(voiceMessage as Update, session)
    ctx.telegram.getFile = mockGetFile
    const generateError = new Error('Generation failed')
    mockedGenerateVoiceAvatar.mockRejectedValueOnce(generateError)

    const step1 = voiceAvatarWizard.steps[1]
    await (step1 as MiddlewareFn<MyContext>)(ctx, mockNext)

    expect(mockedHandleHelpCancel).toHaveBeenCalledWith(ctx)
    expect(mockGetFile).toHaveBeenCalledWith('voice_file_id')
    expect(mockedGenerateVoiceAvatar).toHaveBeenCalled()
    expect(ctx.reply).toHaveBeenCalledWith('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    expect(ctx.scene.leave).toHaveBeenCalled()
  })
})