// –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ –∏–º–ø–æ—Ä—Ç–æ–≤
// –ú–æ–∫–∞–µ–º getAvailableModels –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
jest.mock('../../src/commands/selectModelCommand/getAvailableModels', () => ({
  getAvailableModels: jest.fn(),
}))
jest.mock('../../src/core/supabase', () => ({
  setModel: jest.fn(),
  getUserByTelegramId: jest.fn(),
  updateUserLevelPlusOne: jest.fn(),
}))
jest.mock('../../src/handlers/handleHelpCancel', () => ({
  handleHelpCancel: jest.fn(),
}))
jest.mock('../../src/helpers/language', () => ({ isRussian: jest.fn() }))
jest.mock('../../src/menu', () => ({ sendGenericErrorMessage: jest.fn() }))

import { selectModelWizard } from '../../src/scenes/selectModelWizard'
import makeMockContext from '../utils/mockTelegrafContext'
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–∫–æ–≤
import { getAvailableModels } from '@/commands/selectModelCommand/getAvailableModels'
import {
  updateUserModel,
  getUserByTelegramId,
  updateUserLevelPlusOne,
} from '@/core/supabase'
import { handleHelpCancel } from '@/handlers/handleHelpCancel'
import { isRussian } from '@/helpers/language'
import { sendGenericErrorMessage } from '@/menu'
import { Composer } from 'telegraf'
import { jest, describe, it, expect, beforeEach } from '@jest/globals'
import { MySession } from '@/interfaces'
import { User } from 'telegraf/typings/core/types/typegram'
import { Markup } from 'telegraf'

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('@/commands/selectModelCommand/getAvailableModels')
jest.mock('@/core/supabase')
jest.mock('@/handlers/handleHelpCancel')
jest.mock('@/helpers/language')
jest.mock('@/menu')

// –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –º–æ–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ)
const mockedGetAvailableModels = getAvailableModels as jest.Mock<
  () => Promise<string[]>
>
const mockedUpdateUserModel = updateUserModel as jest.Mock<
  (...args: any[]) => Promise<any>
>
const mockedGetUserByTelegramId = getUserByTelegramId as jest.Mock<
  (...args: any[]) => Promise<any>
>
const mockedUpdateUserLevelPlusOne = updateUserLevelPlusOne as jest.Mock<
  (...args: any[]) => Promise<any>
>
const mockedHandleHelpCancel = handleHelpCancel as jest.Mock<
  (...args: any[]) => Promise<boolean>
>
const mockedIsRussian = isRussian as jest.Mock<() => boolean>
const mockedSendGenericError = sendGenericErrorMessage as jest.Mock

describe('selectModelWizard', () => {
  let ctx: ReturnType<typeof makeMockContext>
  // –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏
  const steps = Composer.unwrap(selectModelWizard.middleware())
  const step0 = steps[0]
  const step1 = steps[1]
  const mockNext = (): Promise<void> => Promise.resolve()
  const mockFrom: User = {
    id: 123,
    is_bot: false,
    first_name: 'Test',
    language_code: 'ru',
  }

  // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ createMockSession
  const createMockSession = (
    overrides: Partial<MySession> = {}
  ): MySession => ({
    activeWizard: true, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–∏–∑–∞—Ä–¥ –∞–∫—Ç–∏–≤–µ–Ω
    wizards: {},
    scene: { current: 'selectModelWizard', state: {} }, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
    selectedPayment: null,
    userProfile: null,
    cursor: 0,
    images: [],
    targetUserId: 0,
    userModel: null,
    email: null,
    mode: null,
    prompt: null,
    imageURL: null,
    imageDescription: null,
    videoModel: null,
    paymentAmount: null,
    ...overrides,
  })

  beforeEach(() => {
    jest.clearAllMocks()
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–π
  })

  it('step 0: fetches models and displays keyboard', async () => {
    const sessionData = createMockSession()
    ctx = makeMockContext({ message: { from: mockFrom } }, sessionData)
    mockedIsRussian.mockReturnValue(true)
    mockedGetAvailableModels.mockResolvedValueOnce(['m1', 'm2', 'm3', 'm4'])

    await step0(ctx, mockNext)

    expect(mockedGetAvailableModels).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
    expect(ctx.reply).toHaveBeenCalledWith(
      'üß† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
      expect.objectContaining({
        reply_markup: {
          keyboard: [
            [{ text: 'm1' }],
            [{ text: 'm2' }],
            [{ text: 'm3' }],
            [{ text: 'm4' }],
            expect.any(Object),
          ],
        },
      })
    )
    // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º mockNext
  })

  it('step 1: leaves on cancellation', async () => {
    const sessionData = createMockSession()
    // –ü–µ—Ä–µ–¥–∞–µ–º message –≤ –ø–µ—Ä–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ
    ctx = makeMockContext(
      { message: { from: mockFrom, text: 'm1' } },
      sessionData
    )
    mockedHandleHelpCancel.mockResolvedValueOnce(true)

    await step1(ctx, mockNext)

    expect(ctx.scene.leave).toHaveBeenCalled()
    expect(mockedUpdateUserModel).not.toHaveBeenCalled()
  })

  it('step 1: sets model and leaves', async () => {
    const sessionData = createMockSession()
    // –ü–µ—Ä–µ–¥–∞–µ–º message –≤ –ø–µ—Ä–≤–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–µ
    ctx = makeMockContext(
      { message: { from: mockFrom, text: 'm2' } },
      sessionData
    )
    mockedIsRussian.mockReturnValue(false)
    mockedHandleHelpCancel.mockResolvedValueOnce(false)
    mockedGetAvailableModels.mockResolvedValue(['m2', 'm3'])
    mockedGetUserByTelegramId.mockResolvedValue({ data: { level: 5 } })

    await step1(ctx, mockNext)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ updateUserModel
    expect(mockedUpdateUserModel).toHaveBeenCalledWith(
      mockFrom.id.toString(),
      'm2'
    )
    expect(ctx.reply).toHaveBeenCalledWith(
      `‚úÖ Model successfully changed to m2`,
      { reply_markup: { remove_keyboard: true } }
    )
    expect(mockedUpdateUserLevelPlusOne).toHaveBeenCalledWith(
      mockFrom.id.toString(),
      5
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })
})
