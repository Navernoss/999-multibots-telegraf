// –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
jest.mock('@/core/supabase', () => ({ getReferalsCountAndUserData: jest.fn() }))

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è,
// –Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–µ–º —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
import { inviteScene } from '@/scenes/inviteScene'
import makeMockContext from '../utils/mockTelegrafContext'
import { getReferalsCountAndUserData } from '@/core/supabase'
import { User } from 'telegraf/typings/core/types/typegram'
import { UserFromGetMe } from 'telegraf/types'
import { jest, describe, it, expect, beforeEach } from '@jest/globals'
import { SubscriptionType, UserType, MyContext, ModeEnum } from '@/interfaces' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∏–ø—ã –∏ MyContext, ModeEnum

// –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –º–æ–∫ –¥–ª—è getReferalsCountAndUserData
const mockedGetReferals = getReferalsCountAndUserData as jest.Mock<
  (telegram_id: string) => Promise<{
    count: number
    level: number
    subscriptionType: SubscriptionType
    userData: UserType | null
    isExist: boolean
  } | null>
>

// --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞/–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ inviteScene.enter) ---
// –ú—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ —á–µ—Ä–µ–∑ enterMiddleware
const inviteSceneEnterHandler = async (ctx: MyContext) => {
  const isRu = ctx.from?.language_code === 'ru'
  const botUsername = ctx.botInfo?.username // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined
  const telegram_id = ctx.from?.id?.toString() || ''

  if (!botUsername) {
    console.error('Bot username is undefined in context')
    await ctx.reply('Internal error: bot username not found.')
    return // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
  }
  if (!telegram_id) {
    console.error('User telegram_id is undefined in context')
    await ctx.reply('Internal error: user ID not found.')
    return // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }

  try {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å count –∏–ª–∏ null/–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    const result = await mockedGetReferals(telegram_id)
    const count = result?.count ?? 0 // –ò—Å–ø–æ–ª—å–∑—É–µ–º ?? –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    const introText = isRu
      ? `üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É, –∏ –ø—É—Å—Ç—å –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É. 
      \n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ?
      - –ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ.
      - –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º.
      - –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
      \n<b>–†–µ—Ñ–∞—Ä–∞–ª—ã:</b> ${count}`
      : `üéÅ Invite a friend and unlock new opportunities! Send them this link and let them join our community. üéÅ What do you get?
      - Bonus stars for use in the bot.
      - Access to exclusive features and capabilities.
      - Level up and access to new features.
      \n<b>Referrals:</b> ${count}`

    const linkText = `<a href="https://t.me/${botUsername}?start=${telegram_id}">https://t.me/${botUsername}?start=${telegram_id}</a>`

    await ctx.reply(introText, { parse_mode: 'HTML' })
    await ctx.reply(linkText, { parse_mode: 'HTML' })
    await ctx.scene.enter(ModeEnum.MainMenu) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ModeEnum
  } catch (error) {
    console.error('Error fetching referral count:', error)
    await ctx.reply(
      isRu
        ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : 'An error occurred while fetching referral data. Please try again later.'
    )
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º ctx.scene.enter –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}
// -----------------------------------------------------------------------------

// –£–±–∏—Ä–∞–µ–º –º–æ–∫ next
// const mockNext = jest.fn<() => Promise<void>>().mockResolvedValue();

describe('inviteScene enter handler logic', () => {
  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º describe
  let ctx: ReturnType<typeof makeMockContext>
  const mockFrom: User = {
    id: 123,
    is_bot: false,
    first_name: 'Inviter',
    language_code: 'ru',
  }
  const mockBotInfo: UserFromGetMe = {
    id: 1,
    is_bot: true,
    first_name: 'MyBot',
    username: 'myBot',
    can_join_groups: true,
    can_read_all_group_messages: false,
    supports_inline_queries: false,
  }

  beforeEach(() => {
    jest.clearAllMocks()
    ctx = makeMockContext(
      { message: { from: mockFrom, text: '/invite' } },
      {},
      { botInfo: mockBotInfo }
    )
    // –£–±–∏—Ä–∞–µ–º mockNext.mockClear()
  })

  it('sends invitation text and link, then enters MainMenu', async () => {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ scene.enter –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
    ctx.scene.enter = jest
      .fn<
        (
          sceneId: string,
          initialState?: object,
          silent?: boolean
        ) => Promise<unknown>
      >()
      .mockResolvedValue({} as unknown) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π Promise

    mockedGetReferals.mockResolvedValueOnce({
      count: 7,
      level: 1,
      subscriptionType: SubscriptionType.STARS,
      userData: null,
      isExist: true,
    })

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await inviteSceneEnterHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ –≤ MainMenu
    expect(ctx.reply).toHaveBeenNthCalledWith(
      1,
      expect.stringContaining('–†–µ—Ñ–∞—Ä–∞–ª—ã'),
      { parse_mode: 'HTML' }
    )
    expect(ctx.reply).toHaveBeenNthCalledWith(
      2,
      expect.stringContaining('https://t.me/myBot?start=123'),
      { parse_mode: 'HTML' }
    )
    expect(ctx.scene.enter).toHaveBeenCalledWith(ModeEnum.MainMenu) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ –≤ MainMenu
  })

  it('handles error by notifying user', async () => {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ scene.enter –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
    ctx.scene.enter = jest
      .fn<
        (
          sceneId: string,
          initialState?: object,
          silent?: boolean
        ) => Promise<unknown>
      >()
      .mockResolvedValue({} as unknown)

    mockedGetReferals.mockRejectedValueOnce(new Error('err'))

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞—à—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    await inviteSceneEnterHandler(ctx)

    expect(ctx.reply).toHaveBeenCalledWith(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    )
    expect(ctx.scene.enter).not.toHaveBeenCalled()
  })
})
