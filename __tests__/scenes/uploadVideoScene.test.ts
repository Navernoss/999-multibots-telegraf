/**
 * –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ü–µ–Ω—ã uploadVideoScene
 */
import { uploadVideoScene } from '../../src/scenes/uploadVideoScene'
import makeMockContext from '../utils/mockTelegrafContext'

// –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../../src/services/uploadVideoToServer', () => ({
  // @ts-ignore
  uploadVideoToServer: jest.fn(),
}))

describe('uploadVideoScene', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('–ø–µ—Ä–≤—ã–π —à–∞–≥: –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç next()', async () => {
    const ctx = makeMockContext()
    // @ts-ignore
    const step0 = uploadVideoScene.steps[0]
    await step0(ctx)
    expect(ctx.reply).toHaveBeenCalledWith(
      'üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª',
      expect.any(Object)
    )
    expect(ctx.wizard.next).toHaveBeenCalled()
  })

  it('–≤—Ç–æ—Ä–æ–π —à–∞–≥: –≤–∞–ª–∏–¥–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç videoUrl –∏ –≤—ã–∑—ã–≤–∞–µ—Ç next()', async () => {
    const ctx = makeMockContext()
    ctx.from = { id: 1, language_code: 'ru' }
    const fakeFile = { file_path: 'video.mp4' }
    ctx.telegram.getFile = jest.fn(() => Promise.resolve(fakeFile))
    ctx.message = { video: { file_id: 'vid1', file_size: 100 } }
    // @ts-ignore
    const step1 = uploadVideoScene.steps[1]
    await step1(ctx)
    expect(ctx.session.videoUrl).toBe(
      `https://api.telegram.org/file/bot${ctx.telegram.token}/${fakeFile.file_path}`
    )
    expect(ctx.wizard.next).toHaveBeenCalled()
  })

  it('–≤—Ç–æ—Ä–æ–π —à–∞–≥: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ –≤—ã–∑—ã–≤–∞–µ—Ç leave()', async () => {
    const ctx = makeMockContext()
    ctx.from = { id: 1, language_code: 'ru' }
    ctx.message = { video: { file_id: 'vid1', file_size: 60 * 1024 * 1024 } }
    // @ts-ignore
    const step1 = uploadVideoScene.steps[1]
    await step1(ctx)
    expect(ctx.reply).toHaveBeenCalledWith(
      '‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  it('–≤—Ç–æ—Ä–æ–π —à–∞–≥: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–∏–¥–µ–æ –≤—ã–∑—ã–≤–∞–µ—Ç leave()', async () => {
    const ctx = makeMockContext()
    ctx.from = { id: 1, language_code: 'ru' }
    ctx.message = { text: 'hello' }
    // @ts-ignore
    const step1 = uploadVideoScene.steps[1]
    await step1(ctx)
    expect(ctx.reply).toHaveBeenCalledWith(
      '‚ùå –û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  it('—Ç—Ä–µ—Ç–∏–π —à–∞–≥: —É—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ leave()', async () => {
    const ctx = makeMockContext()
    ctx.from = { id: 2, language_code: 'ru' }
    ctx.session = { videoUrl: 'url.mp4' }
    // @ts-ignore
    const uploadMock = jest.requireMock('../../src/services/uploadVideoToServer')
      .uploadVideoToServer
    uploadMock.mockResolvedValueOnce(undefined)
    // @ts-ignore
    const step2 = uploadVideoScene.steps[2]
    await step2(ctx)
    expect(uploadMock).toHaveBeenCalledWith({
      videoUrl: 'url.mp4',
      telegram_id: '2',
      fileName: expect.stringContaining('video_to_url_'),
    })
    expect(ctx.reply).toHaveBeenCalledWith(
      '‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  it('—Ç—Ä–µ—Ç–∏–π —à–∞–≥: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ leave()', async () => {
    const ctx = makeMockContext()
    ctx.from = { id: 3, language_code: 'ru' }
    ctx.session = { videoUrl: 'url.mp4' }
    // @ts-ignore
    const uploadMock = jest.requireMock('../../src/services/uploadVideoToServer')
      .uploadVideoToServer
    uploadMock.mockRejectedValueOnce(new Error('fail'))
    // @ts-ignore
    const step2 = uploadVideoScene.steps[2]
    await step2(ctx)
    expect(ctx.reply).toHaveBeenCalledWith(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ'
    )
    expect(ctx.scene.leave).toHaveBeenCalled()
  })
})