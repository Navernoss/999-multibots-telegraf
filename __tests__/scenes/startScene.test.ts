/**
 * –¢–µ—Å—Ç—ã –¥–ª—è startScene
 */
import {
  jest,
  describe,
  it,
  expect,
  beforeEach,
  beforeAll,
} from '@jest/globals'
import { startScene } from '../../src/scenes/startScene'
import makeMockContext from '../utils/mockTelegrafContext'
import { getUserDetails } from '@/core/supabase'
import { checkSubscriptionByTelegramId } from '@/core/supabase'

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –º–æ–∫–æ–≤ Supabase
type SupabaseMocks = {
  getTranslation: jest.Mock
  getReferalsCountAndUserData: jest.Mock
  checkPaymentStatus: jest.Mock
}

/* eslint-disable @typescript-eslint/ban-ts-comment */
// –ú–æ–∫–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ supabase
// @ts-ignore: mock module signature may differ
jest.mock('../../src/core/supabase', () => ({
  // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ –≤ –º–æ–∫–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  getTranslation: jest.fn().mockImplementation(({ key }: { key: any }) => ({
    translation: `–ú–æ–∫-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ ${key}`,
    url: key === 'start' ? 'https://example.com/mock-photo.jpg' : '',
  })),
  // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ –≤ –º–æ–∫–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  getReferalsCountAndUserData: jest
    .fn()
    .mockImplementation((telegram_id: string) => ({
      count: 0,
      level: 1,
      subscription: 'stars',
      userData: {
        user_id: '123e4567-e89b-12d3-a456-426614174000',
        telegram_id,
        subscription: 'stars',
        level: 1,
      },
      isExist: true,
    })),
  // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ –≤ –º–æ–∫–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  checkPaymentStatus: jest
    .fn()
    .mockImplementation(
      (ctx: any, subscription: string) => subscription !== 'stars'
    ),
  getUserDetails: jest.fn().mockResolvedValue({ isExist: false }),
  createUser: jest.fn().mockResolvedValue({}),
}))

// –ú–æ–∫–∏—Ä—É–µ–º process.env
const MOCK_SUBSCRIBE_CHANNEL_ID = '@test_pulse_channel'

describe('startScene', () => {
  let originalSubscribeChannelId: string | undefined

  beforeAll(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫
    originalSubscribeChannelId = process.env.SUBSCRIBE_CHANNEL_ID
    process.env.SUBSCRIBE_CHANNEL_ID = MOCK_SUBSCRIBE_CHANNEL_ID
  })

  afterAll(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    process.env.SUBSCRIBE_CHANNEL_ID = originalSubscribeChannelId
  })

  beforeEach(() => {
    jest
      .clearAllMocks()(
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ getUserDetails –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        getUserDetails as jest.Mock
      )
      .mockResolvedValue({ isExist: false })(
        require('@/core/supabase').createUser as jest.Mock
      )
      .mockClear() // –û—á–∏—â–∞–µ–º –º–æ–∫ createUser
  })

  it('–¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', async () => {
    // –°–æ–∑–¥–∞–µ–º mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = makeMockContext()

    // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω—ã
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const firstHandler = startScene.steps[0]
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    await firstHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    expect(ctx.replyWithPhoto).toHaveBeenCalled()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    const photoReply = ctx.debug.replies[0]
    expect(photoReply.type).toBe('photo')
    expect(photoReply.url).toBe('https://example.com/mock-photo.jpg')
    expect(photoReply.caption).toBe('–ú–æ–∫-–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞ start')
    expect(photoReply.extra.reply_markup).toBeDefined()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ next()
    expect(ctx.wizard.next).toHaveBeenCalled()

    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId –º–æ–∂–µ—Ç –±—ã—Ç—å ID –∏–ª–∏ @username
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
  })

  it('–¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ menuScene –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', async () => {
    // –°–æ–∑–¥–∞–µ–º mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const ctx = makeMockContext()

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const supabaseMock = jest.requireMock(
      '../../src/core/supabase'
    ) as SupabaseMocks
    supabaseMock.checkPaymentStatus.mockReturnValueOnce(true)

    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const secondHandler = startScene.steps[1]
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    await secondHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ menuScene
    expect(ctx.scene.enter).toHaveBeenCalledWith('menuScene')

    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
  })

  it('–¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ subscriptionScene –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', async () => {
    // –°–æ–∑–¥–∞–µ–º mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    const ctx = makeMockContext()

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–∫ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    const supabaseMock = jest.requireMock(
      '../../src/core/supabase'
    ) as SupabaseMocks
    supabaseMock.checkPaymentStatus.mockReturnValueOnce(false)

    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const secondHandler = startScene.steps[1]
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    await secondHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ subscriptionScene
    expect(ctx.scene.enter).toHaveBeenCalledWith('subscriptionScene')

    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
  })

  it('–¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ startScene –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ', async () => {
    // –°–æ–∑–¥–∞–µ–º mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = makeMockContext()

    // –í—ã–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ü–µ–Ω—ã
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const secondHandler = startScene.steps[1]
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    await secondHandler(ctx)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ startScene
    expect(ctx.scene.enter).toHaveBeenCalledWith('startScene')

    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
  })

  it('–¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É', async () => {
    // ... (mock setup) ...
    const ctx = makeMockContext() // mockBotConfig —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ

    // ... (–≤—ã–∑–æ–≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞) ...
    await startScene.middleware()(ctx, jest.fn())

    // ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ...

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId –º–æ–∂–µ—Ç –±—ã—Ç—å ID –∏–ª–∏ @username
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
    // ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É)
  })

  it('–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É', async () => {
    // ... (mock setup –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ...
    ;(getUserDetails as jest.Mock).mockResolvedValue({ isExist: true })
    const ctx = makeMockContext()

    // ... (–≤—ã–∑–æ–≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞) ...
    await startScene.middleware()(ctx, jest.fn())

    // ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ updateUserLevelPlusOne, sendTutorialMessages) ...

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –≥—Ä—É–ø–ø—ã @neuro_blogger_pulse –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      expect.any(String), // targetChatId
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )

    // ... (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É) ...
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è –ù–û–í–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  it('–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É', async () => {
    const ctx = makeMockContext()
    await startScene.middleware()(ctx, jest.fn())

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    expect(ctx.replyWithPhoto).toHaveBeenCalled() ||
      expect(ctx.reply).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ createUser
    expect(require('@/core/supabase').createUser).toHaveBeenCalledTimes(1)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      MOCK_SUBSCRIBE_CHANNEL_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  it('–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –° –†–ï–§–ï–†–ê–õ–û–ú: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∏ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É', async () => {
    const inviteCode = '123456789' // ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const referrerUsername = 'ref_user'
    const ctx = makeMockContext({ session: { inviteCode } })

    // –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç getReferalsCountAndUserData –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    const supabaseMock = jest.requireMock('@/core/supabase')
    supabaseMock.getReferalsCountAndUserData.mockResolvedValueOnce({
      count: 5,
      userData: { user_id: inviteCode, username: referrerUsername },
    })
    // –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç getReferalsCountAndUserData –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –µ–≥–æ —É—Ä–æ–≤–Ω—è)
    supabaseMock.getReferalsCountAndUserData.mockResolvedValueOnce({
      count: 0,
      userData: null, // –û–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    })

    await startScene.middleware()(ctx, jest.fn())

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      inviteCode,
      expect.stringContaining(
        `@${ctx.from?.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ`
      ) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      MOCK_SUBSCRIBE_CHANNEL_ID,
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîó –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username} (ID: ${ctx.from?.id}) –ø–æ —Ä–µ—Ñ. –æ—Ç @${referrerUsername}`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ createUser
    expect(require('@/core/supabase').createUser).toHaveBeenCalledTimes(1)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })

  // --- –¢–µ—Å—Ç—ã –¥–ª—è –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  it('—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É', async () => {
    ;(getUserDetails as jest.Mock).mockResolvedValue({ isExist: true }) // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const ctx = makeMockContext()

    await startScene.middleware()(ctx, jest.fn())

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    expect(ctx.replyWithPhoto).toHaveBeenCalled() ||
      expect(ctx.reply).toHaveBeenCalled()
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ createUser –ù–ï –≤—ã–∑—ã–≤–∞–ª—Å—è
    expect(require('@/core/supabase').createUser).not.toHaveBeenCalled()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É –æ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
    expect(ctx.telegram.sendMessage).toHaveBeenCalledWith(
      MOCK_SUBSCRIBE_CHANNEL_ID,
      expect.stringContaining(
        `[${ctx.botInfo.username}] üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${ctx.from?.username}`
      )
    )
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
    expect(ctx.scene.leave).toHaveBeenCalled()
  })
})
